<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="t_create_truststore" xml:lang="en-us">
    <title>Creating a  truststore with a third party certificate</title>
    <shortdesc>When creating a connection between the Sametime server and a service using TLS, a
        truststore is needed. The truststore is used to store Sametime certificates.<draft-comment
            author="debra.taylor">Is it Sametime certificates? Or the certificate to identify the
            service to Sametime? Or, both are true?</draft-comment></shortdesc>
    <taskbody>
        <prereq id="prereq_ryx_d2r_dvb">
            <p>To create a trust store, the Java <cmdname>Keytool</cmdname> command is used. The
                    <cmdname>keytool</cmdname> utility must be installed to complete the steps. The
                command is part of the Oracle and OpenJDK toolkits. The OpenJDK is included with
                Sametime. For more information on <cmdname>keytool</cmdname>, see the OpenJDK <xref
                    href="https://cr.openjdk.java.net/~jjg/8261930/docs/specs/man/keytool.html"
                    format="html" scope="external">The keytool Command</xref> or Oracle <xref
                    href="https://docs.oracle.com/en/java/javase/11/tools/keytool.html"
                    format="html" scope="external">Tools Reference</xref> websites.  Run the utility
                from the directory where it is installed.</p>
            <p>The certificate used to trust the connection must be a CRT file type format. For
                chained certificates, you also need the root and intermediate certificates.</p>
            <p>When using SAML connections, LDAP connections, and business card photos, there are
                additional considerations for creating the truststore. See the following sections
                for details.</p>
        </prereq>
    </taskbody>
    <task id="task_kh3_h2r_dvb">
        <title>Creating a truststore when using SAML</title>
        <taskbody>
            <prereq id="prereq_wdh_x4w_fvb">Ensure that you read the introductory section.</prereq>
            <context id="context_u2f_j2r_dvb">
                <p>When using a SAML connection, the Sametime server must be able to decodes the
                    SAML tokens.  You need to know how many SAML partnerships or relying party
                    trusts are required. For information on identifying the number, see <xref
                        scope="local" format="dita" href="enabling_sso_saml.dita"/>. If you are
                    supporting more than one relying party trust, create one trust store that
                    contains certificates for each one.</p>
                <p>The SAML trust store file name must be
                    <filepath>samltruststore.p12</filepath>.</p>
            </context>
            <steps id="steps_wtz_h2r_dvb">
                <step>
                    <cmd>Run the following command.</cmd>
                    <info>
                        <codeblock id="codeblock_bzs_1nr_dvb">
keytool -importcert -storetype PKCS12 -keystore samltruststore.p12 -storepass <varname>truststore_password</varname> -alias <varname>alias_name</varname> -file <varname>file_to_trust.crt</varname> -noprompt</codeblock>
                        <dl id="dl_sj4_cnr_dvb">
                            <dlentry>
                                <dt>truststore_password</dt>
                                <dd>The desired password for your trust store. Save the password for
                                    later use.</dd>
                            </dlentry>
                            <dlentry>
                                <dt>alias_name</dt>
                                <dd>The value to display in the trust store, each certificate must
                                    have a unique alias. </dd>
                            </dlentry>
                            <dlentry>
                                <dt>file_to_trust.crt</dt>
                                <dd>The full path to the certificate you are adding to the trust
                                    store.</dd>
                            </dlentry>
                        </dl>
                        <note id="note_dqt_b3v_fvb">If you are using OpenJDK version 11 and later,
                            add the <codeph>-J-Dkeystore.pkcs12.legacy</codeph> parameter to the
                            command. For
                            example:<codeblock id="codeblock_q5k_m3v_fvb">keytool -importcert -storetype PKCS12 -keystore samltruststore.p12 -storepass <varname>truststore_password</varname> -alias <varname>alias_name</varname> -file <varname>file_to_trust.crt</varname> -noprompt -J-Dkeystore.pkcs12.legacy </codeblock></note>
                    </info>
                </step>
            </steps>
            <postreq id="postreq_pf3_t5r_dvb">
                <p>To complete the configuration, refer to one of the following topics.<ul
                        id="ul_ksb_55r_dvb">
                        <li><xref format="dita" scope="local" href="enabling_saml_docker.dita"
                            /></li>
                        <li><xref format="dita" scope="local" href="enabling_saml_kubernetes.dita"
                            /></li>
                    </ul></p>
            </postreq>
        </taskbody>
    </task>
    <task id="task_igr_nmr_dvb">
        <title>Creating a truststore when using LDAP</title>
        <taskbody>
            <prereq id="prereq_hxj_dpw_fvb">Ensure that you read the introductory section.</prereq>
            <context id="context_z5n_4mr_dvb">
                <p>If the connection is secured using TLS, a certificate is needed to complete the
                    SSL handshake with LDAP. If you are connecting to multiple LDAP servers that
                    have different certificates, you need to trust each certificate in a single
                    trust store.</p>
                <p>The LDAP trust store file name must be <filepath>ldaptruststore.p12</filepath>.
                    It is defined using the commands in this procedure.</p>
            </context>
            <steps id="steps_gkx_4mr_dvb">
                <step>
                    <cmd> Copy the certificates to be trusted to the machine where the keytool
                        utility is installed, and stage them in a temporary directory. </cmd>
                </step>
                <step>
                    <cmd>Create a keystore by issuing the below command with the parameters: </cmd>
                    <info>
                        <codeblock id="codeblock_btx_jtr_dvb">keytool -importcert -storetype PKCS12 -keystore ldaptruststore.p12 -storepass <varname>truststore_password</varname> -alias <varname>alias_name</varname> -file <varname>file_to_trust.crt</varname> -noprompt</codeblock>
                        <dl id="dl_bqf_jtr_dvb">
                            <dlentry>
                                <dt>truststore_password</dt>
                                <dd>The desired password for your trust store. Save the password for
                                    later use.</dd>
                            </dlentry>
                            <dlentry>
                                <dt>alias_name</dt>
                                <dd>The value to display in the trust store, each certificate must
                                    have a unique alias. </dd>
                            </dlentry>
                            <dlentry>
                                <dt>file_to_trust.crt</dt>
                                <dd>The full path to the certificate you are adding to the trust
                                    store.</dd>
                            </dlentry>
                        </dl>
                    </info>
                </step>
                <step importance="optional">
                    <cmd>To import additional certificates into an existing trust store, run the
                        below command, be sure to use a unique alias for each additional
                        certificate.</cmd>
                    <info>
                        <codeblock id="codeblock_bhp_rtr_dvb">keytool -importcert -storetype PKCS12 -keystore ldaptruststore.p12 -storepass <varname>truststore_password</varname> -alias <varname>aliasname</varname> -file <varname>file_to_trust.crt</varname> -noprompt</codeblock>
                    </info>
                </step>
            </steps>
            <postreq id="postreq_rsk_15r_dvb">
                <p>To implement the trust store, refer to one of the following topics.<ul
                        id="ul_zcq_b5r_dvb">
                        <li><xref format="dita" scope="local" href="configuring_ldap_docker.dita"
                            /></li>
                        <li><xref format="dita" scope="local"
                                href="configuring_ldap_kubernetes.dita"/></li>
                    </ul></p>
            </postreq>
        </taskbody>
    </task>
    <task id="task_xjf_s3v_fvb">
        <title>Creating a truststore when using business card photos</title>
        <taskbody>
            <context id="context_hdq_t3v_fvb">
                <p>If you are retrieving photos from an HTTPS trusted URL, the Sametime Proxy
                    service needs a truststore to properly retrieve the photos from the https
                    protected PhotoURL.</p>
                <p> The truststore file name must be named <filepath>XXXX.p12</filepath>.
                        <draft-comment author="debra.taylor">(Need dev input - also in the
                        command)</draft-comment></p>
                <p>To create the truststore, run the following command.
                        <codeblock id="codeblock_mqh_gkv_fvb">keytool -importcert -storetype PKCS12 -keystore XXX.p12 -storepass truststore_password -alias alias_name -file file_to_trust.crt -noprompt</codeblock><dl
                        id="dl_k1y_gnv_fvb">
                        <dlentry>
                            <dt>truststore_password</dt>
                            <dd>The desired password for your truststore. Save the password for
                                later use.</dd>
                        </dlentry>
                        <dlentry>
                            <dt>use.alias_name</dt>
                            <dd>The value to display in the truststore, each certificate must have a
                                unique alias.</dd>
                        </dlentry>
                        <dlentry>
                            <dt>file_to_trust.crt</dt>
                            <dd>The full path to the certificate you are adding to the truststore. </dd>
                        </dlentry>
                    </dl></p>
            </context>
            <postreq id="postreq_gb3_3lw_fvb">
                <p>After creating the truststore, see <xref href="admin_st_buscard.dita"
                        format="dita" scope="local"/>.</p>
            </postreq>
        </taskbody>
    </task>
</task>
