<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="configuring_ldap_multiple_kubernetes" xml:lang="en-us">
    <title>Configuring additional LDAP servers on Kubernetes</title>
    <shortdesc>You can configure the Sametime Community pod to connect to two or more LDAP
        servers.</shortdesc>
    <taskbody>
        <prereq id="prereq_apc_ckj_5tb">When you connect to more than one LDAP server, it is
            important for the names to be unique. If you are trying to achieve high availability to
            the same directory, use a load balancer to front-end the connection between the multiple
            LDAP servers. <p>
                <ul id="ul_r4g_b5z_xtb">
                    <li> Configure the cluster for the first LDAP server. This must be done when the
                        cluster was installed.</li>
                    <li>You must know the host name, port and optional bind credentials for each
                        LDAP server.</li>
                    <li>If you are using a secure connection to LDAP, the LDAP server’s certificate
                        for each server must be stored in the same .p12 trust store file.  You must
                        create a secret containing the trust store that holds each LDAP server’s
                        certificate. Follow the step for creating a secret that contains your
                        certificate in the  <xref href="securing_ldap_kubernetes.dita" scope="local"
                            format="dita"/> topic.</li>
                </ul>
            </p></prereq>
        <context>
            <p>When more than one LDAP is defined in an environment, they are searched in the order
                defined in the <filepath>StCommunityConfig.xml</filepath> file. When you define each
                LDAP server, the order in which they are listed in the configuration is the same
                order in which they are searched.</p>
            <p>The process described in this procedures involves creating a new secret called
                    <parmname>extra-community-configs</parmname>. This secret overrides the LDAP
                configuration settings in the <filepath>values.yaml</filepath> file. The
                    <parmname>extra-community-configs</parmname> secret contains a copy of the
                configuration files used by the Community pod. The LDAP servers are defined within
                each configuration file. For more information on secrets, see <xref
                    href="managing_secrets_kubernetes.dita" scope="local" format="dita"/>.</p>
            <p><cmdname>kubectl</cmdname> commands are used to pull the existing file from the
                Community pod to your local machine. Modify these files locally with the required
                settings, then create the secret containing the files. </p>
            <p>This procedure is to configure Sametime to connect to two or more separate LDAP
                servers that have unique names.</p>
            <p>
                <note id="note_drz_tyz_xtb">If you have already created a secret for
                        <filepath>extra-community-config</filepath>, you can copy the
                        <filepath>UserInfoConfig.xml</filepath> file from the pod to the
                        <filepath>extra-community-config</filepath> directory and recreate the
                    secret with the other required files.</note>
            </p>
            <p>The changes in this task affect the following pods:<ul id="ul_uhp_bbd_d5b">
                    <li>community</li>
                </ul></p>
        </context>
        <steps id="steps_cdz_yjj_5tb">
            <step>
                <cmd>Create a directory on your machine called
                        <filepath>extra-community-config</filepath> at the root of where the
                    Sametime installation package was decompressed.</cmd>
            </step>
            <step>
                <cmd>Change to the <filepath>extra-community-config</filepath> directory.</cmd>
            </step>
            <step>
                <cmd> Find the Community pod name by running the <cmdname>get pods</cmdname>
                    command.</cmd>
                <info>The pod name has hashes in it. For example:
                    community-77d4695988-2bzrx.<codeblock id="codeblock_mzs_tb1_ytb">kubectl get pods</codeblock></info>
            </step>
            <step>
                <cmd>Pull a copy of the <filepath>StCommunityConfig.xml</filepath> from the
                    Community pod by running the below command, where <varname>podname</varname> is
                    the pod name found in the previous step.</cmd>
                <info>
                    <codeblock id="codeblock_v2k_wnx_wtb">kubectl exec -it <varname>podname</varname> --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml </codeblock>
                </info>
                <stepxmp>For example, if the Community pod name is
                        <userinput>community-845d5d5755-z7zf7</userinput>, the command to run is
                    <codeblock id="codeblock_njq_ykd_xtb">kubectl exec -it community-845d5d5755-z7zf7 --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml </codeblock></stepxmp>
            </step>
            <step>
                <cmd>Pull a copy of the <filepath>UserInfoConfig.xml</filepath> file from the
                    Community pod, by running the below command. Substitute the name of your
                    Community pod for <varname>podname</varname>.</cmd>
                <info>
                    <codeblock id="codeblock_wtp_d4x_wtb">kubectl exec -it <varname>podname</varname> --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml </codeblock>
                </info>
            </step>
            <step>
                <cmd>Find the base64 encoded value of your bind credentials. If you are using an
                    authenticated bind, issue the following command in a Linux shell that contains
                    your user name and password separated by a colon.</cmd>
                <info> The resulting value is used in a later step.
                    <codeblock id="codeblock_rjt_t41_ytb">echo -n “username:password” | base64 -d</codeblock></info>
                <stepxmp> If the Bind DN is CN=bind,O=Example and the password is password, then the
                    command is:
                    <codeblock id="codeblock_qt4_vpb_ytb">echo -n “CN=bind,O=Example:password” | base64 -d </codeblock></stepxmp>
            </step>
            <step>
                <cmd>Use a text editor to open your local copy of
                        <filepath>UserInfoConfig.xml</filepath> in edit mode.</cmd>
            </step>
            <step>
                <cmd>Duplicate the line that begins with <codeph>StorageDetails</codeph>.</cmd>
            </step>
            <step>
                <cmd>The order in which you list your <codeph>StorageDetails</codeph> statement is
                    the search order to be used.</cmd>
                <info>Configure your second LDAP server by completing the fields:<dl
                        id="dl_r4q_xqc_ytb">
                        <dlentry>
                            <dt> HostName</dt>
                            <dd>The fully qualified host name or IP address of the second LDAP
                                server.</dd>
                        </dlentry>
                        <dlentry>
                            <dt>Port</dt>
                            <dd>If using unsecured LDAP, specify the port number used by LDAP. If
                                you are using secure LDAP, you don't need to modify this field.</dd>
                        </dlentry>
                        <dlentry>
                            <dt>UserName</dt>
                            <dd>Set this field to empty double-quotes ( “” ).</dd>
                        </dlentry>
                        <dlentry>
                            <dt>Password</dt>
                            <dd>Set this field to empty double-quotes (“”). If using an
                                authenticated bind, add a new parameter after UserName and Password
                                called <uicontrol>UserEncodedAuth=</uicontrol> and set it to the
                                value that was determined in a previous step.</dd>
                        </dlentry>
                        <dlentry>
                            <dt>BaseDN</dt>
                            <dd>Define a base DN for searching the directory. If left blank, the
                                entire directory is searched.</dd>
                        </dlentry>
                        <dlentry>
                            <dt> SearchFilter</dt>
                            <dd>Modify the search filter if needed. The defaults work well with
                                Domino LDAP.</dd>
                        </dlentry>
                    </dl></info>
                <info>You can make other changes to the business cards configuration if needed at
                    this time. When finished, save and close the file.</info>
            </step>
            <step>
                <cmd>Edit the <filepath>StCommunityConfig.xml</filepath> file with a text editor and
                    make the following changes.</cmd>
                <substeps id="substeps_vmk_2sc_ytb">
                    <substep>
                        <cmd>Within the <codeph>&lt;LDAP></codeph> section, duplicate the line that
                            begins with <codeph>&lt;Connection Hostname</codeph>.</cmd>
                    </substep>
                    <substep>
                        <cmd>Modify the new line to contain the details of the second LDAP server.
                        </cmd>
                    </substep>
                    <substep>
                        <cmd>Modify the SearchOrder parameter for the additional LDAP server to a
                            unique number. This must match the search order you selected for
                                <filepath>UserInfoConfig.xml</filepath>.</cmd>
                    </substep>
                    <substep>
                        <cmd>Save and close the file.</cmd>
                    </substep>
                </substeps>
                <info/>
            </step>
            <step>
                <cmd>Change to the <filepath>extra-community-config</filepath> directory that was
                    created earlier. Run the following command to create the secret.</cmd>
                <info>
                    <codeblock id="codeblock_d13_nsc_ytb">kubectl create secret generic extra-community-config --from-file=./ </codeblock>
                </info>
                <info>If you have a namespace dedicated to Sametime add the <cmdname>-n</cmdname>
                    argument with your namespace to ensure it is created in the correct
                    namespace.</info>
            </step>
            <step>
                <cmd>Change to the <filepath>helm</filepath> directory where the Sametime
                    installation package was decompressed.</cmd>
            </step>
            <step>
                <cmd>Open the <filepath>values.yaml file</filepath> and place in edit mode. Add the
                    following line.</cmd>
                <info><codeblock id="codeblock_y1s_5sc_ytb">overrideCommunityConfigSecret: extra-community-config</codeblock>Save
                    and close the file.</info>
            </step>
            <step
                conref="securing_ldap_kubernetes.dita#securing_ldap_kubernetes/apply_changes_helmupgrade">
                <cmd/>
            </step>
            <step conref="pod_apply_changes.dita#pod_apply_changes/scale_pod">
                <cmd/>
            </step>
        </steps>
    </taskbody>
</task>
