{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Introducing Sametime"},{"location":"admin/index.html","text":"HCL Sametime\u00aeAdministration Guide 12.0.1 HCL Sametime Administration Guide 12.0.1 Accessibility features for Sametime What's new Encryption usage in Sametime Planning Sametime versus Sametime Premium Prerequistes System requirements MongoDB LDAP Platforms Planning for Docker Planning for Kubernetes Meeting server FAQ Sametime clients Planning the network topology and connectivity Planning considerations for chat Considerations for Sametime Premium Managing Sametime features Considerations for telephony Ports used by Sametime services Network planning for meetings Session Traversal Utilities for NAT (STUN) Determining where to install Sametime Clustering and high availability Configure high capacity for chat Configure high capacity for meetings Configuring autoscaling for recorder Configuring autoscaling for video Configuring MongoDB for high availability Installing Installation road map Installing the MongoDB Installing MongoDB on Windows Installing MongoDB on Linux Configuring MongoDB for Sametime Installing Sametime Information to provide during installation Installing Sametime in a Kubernetes environment Preparing the network Configuring host aliases for Kubernetes deployments Loading the Sametime image to Docker Preparing the deployment Enabling multiple videobridges Creating the persistent volume Creating persistent volume for a single node deployment Deploying Sametime to Kubernetes cluster Installing Ingress Configuring Ingress for Mux Verifying the service Installing Prometheus Installing Sametime in a Docker environment Installing Docker Installing Sametime on Docker Defining extra hosts for Docker deployments Installing Sametime clients Installing Sametime Connect and Embedded clients on Windows Installing Sametime Connect and Embedded clients on MacOS Installing the Connect client in silent mode Installing Sametime iOS and Android clients Configuring Adding corporate branding to meeting pages Adding corporate branding to meeting pages using Kubernetes Adding corporate branding to meeting pages using Docker Adding virtual backgrounds to the global library Adding default virtual backgrounds on Docker Adding default virtual backgrounds on Kubernetes Configuring alternate STUN servers Setting up business cards Configuring business cards using an LDAP directory Customizing business cards in Kubernetes Customizing business cards in Docker Storing photos in the Domino directory Using HCL Connections photos for the Sametime business card Configuring LDAP Configuring LDAP on Docker Configuring LDAP on Kubernetes Changing the LDAP service account password in Kubernetes Configuring additional LDAP servers on Docker Configuring additional LDAP servers on Kubernetes Creating custom Java classes for searching LDAP Example: Writing a Java class to format names returned in a search Example: Writing a Java class to filter searches for people and groups Configuring the class file on Docker Configuring the class file on Kubernetes Updating the time-to-live index for persistent chat Managing secrets in Kubernetes Viewing secrets Deleting a secret Modifying secrets Applying configuration changes in Docker Applying configuration changes in Kubernetes Chat Configuring the sametime.ini file Configuring the sametime.ini file on Docker Configuring the sametime.ini file on Kubernetes Meetings Disabling secure meeting room names Disabling secure rooms on Docker Disabling secure rooms on Kubernetes Enabling conference dial-in Configuring alternate host name for Web Chat Enabling meeting dial-out Enabling meeting dial-out on Docker Enabling meeting dial-out on Kubernetes Configuring the maximum number of meeting participants Enable Videobridge for TCP Disable sharing of meetings recording Enabling Microsoft Outlook Add-in Setting up a TURN server Installing a TURN Server on Ubuntu Installing a TURN Server Configuring the TURN Server for Docker Configuring the TURN server for Kubernetes Integrating with other applications Enabling the legacy web client on Docker Enabling the legacy web client on Kubernetes Monitoring your meeting and chat metrics with Grafana\u00ae Configuring Docker to run Grafana Configuring Kubernetes to run Grafana Push messaging through a proxy Configuring Docker to use a proxy server for push messaging Configuring Kubernetes to use a proxy server for push messaging Securing Securing connections Choosing the TLS configuration scope Implementing the Global TLS Scope Implementing the Individual TLS Scope Securing connections between the Sametime mux and clients Configuring TLS for Sametime mux on Kubernetes Configuring the encryption settings on Docker Securing connections between Sametime servers and LDAP Securing LDAP on Kubernetes Securing LDAP on Docker Creating a truststore with a third party certificate How to create a new Java Keystore with a Third Party certificate Enabling Single Sign-on Setting up SSO using LTPA Generating LTPA keys Configuring LTPA in Docker Configuring LTPA in Kubernetes Integrating with HCL Connections Integrating Sametime with HCL Domino Setting up SSO using SAML Configuring SAML on Docker Configuring SAML in Kubernetes Configuration settings related to SAML authentication Enabling SAML authentication in client installation packages Enabling SAML authentication in installed clients Enabling security in the MongoDB Enabling TLS for the Mongo database Updating the Sametime server TLS certificates Updating the TLS certificates on Docker Updating the TLS certificates on Kubernetes Applying Let's Encrypt certificates Administering Managing Sametime clients Managing client types and log-ins Configuring allowed client types Configuring the preferred login list Configuring the single login type Sametime Client IDs Connecting the Sametime Connect client to the Sametime server Defining the host server and port for connecting to a Sametime server Choosing a method for connecting to the Sametime Community Server Connecting the client through a direct connection over TCP/IP Connecting the client through a TLS connection Connecting the client through a proxy connection Configuring alternate communities for clients Sametime client configuration options Sametime client preferences Accessibility preferences Auto-status change preferences Calendar preferences Chat preferences Community preferences Contact list preferences External application preferences File transfer preferences Live Text and Widgets preferences Location preferences Login preferences Notes preferences Sametime Advanced preferences (Sametime 9.0.1 only) Notification preferences People preferences Rules manager preferences Spell checker preferences Update preferences Selecting preferences in the client Configuring Sametime client preferences with the Expeditor managed settings framework Configuring Sametime Connect Client preferences in the plugin_customization.ini file Changing the URL for the settings XML file in the plugin_customization.ini file Updating client preferences with the managed-settings.xml file Defining preferences in the managed-settings.xml file Deploy managed-settings.xml or managed-community-configs.xml file to a web server Updating the client policy to include the managed settings or managed community configs URL Changing the update interval for managed preferences Discontinuing managed preferences Configuring Sametime preferences using HCL Notes policies Updating connectivity settings with the managed-community-configs.xml file Managed community settings Creating a community provisioning URL for mobile users Managing file transfer data Testing Sametime chat and meeting clients Starting and stopping the Sametime server Starting and stopping MongoDB Managing policies Policy behaviors Configuring policies Managing policies on Docker Managing policies on Kubernetes Sametime policy IDs Mobile client policies General policies General chat policies General meeting policies File transfer policies General file transfer policies Mobile file transfer policies Security policies Generating link previews on chat Enabling self-signed certificates Requiring password entry at login Copying and pasting of chat content to external applications Exporting and saving contacts on your mobile device Managing mobile client connections Creating a new policy other than the default policy Changing a user policy\u2019s weight Assigning users and groups to policies Allowing or restricting custom policies for Sametime clients Community configuration files Enabling multi-tenancy MongoDB Updating Sametime data in MongoDB Updating user IDs Converting user information from Domino Directory format to LDAP format Deleting user IDs Sametime DB Utility reporting Changing MongoDB Credentials Changing MongoDB log file size Managing Sametime Meetings Disabling guest access Configuring live streaming Increasing active cameras Managing recording Managing user sign-on Disabling virtual background Disabling custom background uploads Managing file transfer data Troubleshooting Working with HCL support Troubleshooting Sametime on Docker Enabling Community trace in Docker Troubleshooting Sametime on Kubernetes Enabling Community trace in Kubernetes Viewing and saving log files Pods in Sametime Transferring files from a pod to a Linux shell Capturing a network trace in a pod Applying changes Kubernetes: Containers not starting due to \"Host not found\" Troubleshooting LDAP on the community pod Troubleshooting the Sametime server Troubleshooting Sametime Meetings Troubleshooting Sametime Chat Troubleshooting Sametime clients Collecting Sametime client configuration and log data Logging and tracing on the Sametime Embedded and Connect Client Resolving problems with business cards Migrating and Upgrading Planning for migration to Sametime 12 Upgrading to a new version or applying a fixpack Installing a fix pack on Docker Installing a fix pack on Kubernetes Reverting to a previous version on Docker Reverting to a previous version on Kubernetes Migrating from older Sametime versions Upgrading from Meetings 11.5 and 11.6 Upgrading Sametime 11.5 and Sametime 11.6 Docker deployments Upgrading Sametime 11.5 and Sametime 11.6 Kubernetes deployments Notices","title":"HCL Sametime\u00aeAdministration Guide 12.0.1"},{"location":"admin/index.html#hcl-sametimeadministration-guide-1201","text":"HCL Sametime Administration Guide 12.0.1 Accessibility features for Sametime What's new Encryption usage in Sametime Planning Sametime versus Sametime Premium Prerequistes System requirements MongoDB LDAP Platforms Planning for Docker Planning for Kubernetes Meeting server FAQ Sametime clients Planning the network topology and connectivity Planning considerations for chat Considerations for Sametime Premium Managing Sametime features Considerations for telephony Ports used by Sametime services Network planning for meetings Session Traversal Utilities for NAT (STUN) Determining where to install Sametime Clustering and high availability Configure high capacity for chat Configure high capacity for meetings Configuring autoscaling for recorder Configuring autoscaling for video Configuring MongoDB for high availability Installing Installation road map Installing the MongoDB Installing MongoDB on Windows Installing MongoDB on Linux Configuring MongoDB for Sametime Installing Sametime Information to provide during installation Installing Sametime in a Kubernetes environment Preparing the network Configuring host aliases for Kubernetes deployments Loading the Sametime image to Docker Preparing the deployment Enabling multiple videobridges Creating the persistent volume Creating persistent volume for a single node deployment Deploying Sametime to Kubernetes cluster Installing Ingress Configuring Ingress for Mux Verifying the service Installing Prometheus Installing Sametime in a Docker environment Installing Docker Installing Sametime on Docker Defining extra hosts for Docker deployments Installing Sametime clients Installing Sametime Connect and Embedded clients on Windows Installing Sametime Connect and Embedded clients on MacOS Installing the Connect client in silent mode Installing Sametime iOS and Android clients Configuring Adding corporate branding to meeting pages Adding corporate branding to meeting pages using Kubernetes Adding corporate branding to meeting pages using Docker Adding virtual backgrounds to the global library Adding default virtual backgrounds on Docker Adding default virtual backgrounds on Kubernetes Configuring alternate STUN servers Setting up business cards Configuring business cards using an LDAP directory Customizing business cards in Kubernetes Customizing business cards in Docker Storing photos in the Domino directory Using HCL Connections photos for the Sametime business card Configuring LDAP Configuring LDAP on Docker Configuring LDAP on Kubernetes Changing the LDAP service account password in Kubernetes Configuring additional LDAP servers on Docker Configuring additional LDAP servers on Kubernetes Creating custom Java classes for searching LDAP Example: Writing a Java class to format names returned in a search Example: Writing a Java class to filter searches for people and groups Configuring the class file on Docker Configuring the class file on Kubernetes Updating the time-to-live index for persistent chat Managing secrets in Kubernetes Viewing secrets Deleting a secret Modifying secrets Applying configuration changes in Docker Applying configuration changes in Kubernetes Chat Configuring the sametime.ini file Configuring the sametime.ini file on Docker Configuring the sametime.ini file on Kubernetes Meetings Disabling secure meeting room names Disabling secure rooms on Docker Disabling secure rooms on Kubernetes Enabling conference dial-in Configuring alternate host name for Web Chat Enabling meeting dial-out Enabling meeting dial-out on Docker Enabling meeting dial-out on Kubernetes Configuring the maximum number of meeting participants Enable Videobridge for TCP Disable sharing of meetings recording Enabling Microsoft Outlook Add-in Setting up a TURN server Installing a TURN Server on Ubuntu Installing a TURN Server Configuring the TURN Server for Docker Configuring the TURN server for Kubernetes Integrating with other applications Enabling the legacy web client on Docker Enabling the legacy web client on Kubernetes Monitoring your meeting and chat metrics with Grafana\u00ae Configuring Docker to run Grafana Configuring Kubernetes to run Grafana Push messaging through a proxy Configuring Docker to use a proxy server for push messaging Configuring Kubernetes to use a proxy server for push messaging Securing Securing connections Choosing the TLS configuration scope Implementing the Global TLS Scope Implementing the Individual TLS Scope Securing connections between the Sametime mux and clients Configuring TLS for Sametime mux on Kubernetes Configuring the encryption settings on Docker Securing connections between Sametime servers and LDAP Securing LDAP on Kubernetes Securing LDAP on Docker Creating a truststore with a third party certificate How to create a new Java Keystore with a Third Party certificate Enabling Single Sign-on Setting up SSO using LTPA Generating LTPA keys Configuring LTPA in Docker Configuring LTPA in Kubernetes Integrating with HCL Connections Integrating Sametime with HCL Domino Setting up SSO using SAML Configuring SAML on Docker Configuring SAML in Kubernetes Configuration settings related to SAML authentication Enabling SAML authentication in client installation packages Enabling SAML authentication in installed clients Enabling security in the MongoDB Enabling TLS for the Mongo database Updating the Sametime server TLS certificates Updating the TLS certificates on Docker Updating the TLS certificates on Kubernetes Applying Let's Encrypt certificates Administering Managing Sametime clients Managing client types and log-ins Configuring allowed client types Configuring the preferred login list Configuring the single login type Sametime Client IDs Connecting the Sametime Connect client to the Sametime server Defining the host server and port for connecting to a Sametime server Choosing a method for connecting to the Sametime Community Server Connecting the client through a direct connection over TCP/IP Connecting the client through a TLS connection Connecting the client through a proxy connection Configuring alternate communities for clients Sametime client configuration options Sametime client preferences Accessibility preferences Auto-status change preferences Calendar preferences Chat preferences Community preferences Contact list preferences External application preferences File transfer preferences Live Text and Widgets preferences Location preferences Login preferences Notes preferences Sametime Advanced preferences (Sametime 9.0.1 only) Notification preferences People preferences Rules manager preferences Spell checker preferences Update preferences Selecting preferences in the client Configuring Sametime client preferences with the Expeditor managed settings framework Configuring Sametime Connect Client preferences in the plugin_customization.ini file Changing the URL for the settings XML file in the plugin_customization.ini file Updating client preferences with the managed-settings.xml file Defining preferences in the managed-settings.xml file Deploy managed-settings.xml or managed-community-configs.xml file to a web server Updating the client policy to include the managed settings or managed community configs URL Changing the update interval for managed preferences Discontinuing managed preferences Configuring Sametime preferences using HCL Notes policies Updating connectivity settings with the managed-community-configs.xml file Managed community settings Creating a community provisioning URL for mobile users Managing file transfer data Testing Sametime chat and meeting clients Starting and stopping the Sametime server Starting and stopping MongoDB Managing policies Policy behaviors Configuring policies Managing policies on Docker Managing policies on Kubernetes Sametime policy IDs Mobile client policies General policies General chat policies General meeting policies File transfer policies General file transfer policies Mobile file transfer policies Security policies Generating link previews on chat Enabling self-signed certificates Requiring password entry at login Copying and pasting of chat content to external applications Exporting and saving contacts on your mobile device Managing mobile client connections Creating a new policy other than the default policy Changing a user policy\u2019s weight Assigning users and groups to policies Allowing or restricting custom policies for Sametime clients Community configuration files Enabling multi-tenancy MongoDB Updating Sametime data in MongoDB Updating user IDs Converting user information from Domino Directory format to LDAP format Deleting user IDs Sametime DB Utility reporting Changing MongoDB Credentials Changing MongoDB log file size Managing Sametime Meetings Disabling guest access Configuring live streaming Increasing active cameras Managing recording Managing user sign-on Disabling virtual background Disabling custom background uploads Managing file transfer data Troubleshooting Working with HCL support Troubleshooting Sametime on Docker Enabling Community trace in Docker Troubleshooting Sametime on Kubernetes Enabling Community trace in Kubernetes Viewing and saving log files Pods in Sametime Transferring files from a pod to a Linux shell Capturing a network trace in a pod Applying changes Kubernetes: Containers not starting due to \"Host not found\" Troubleshooting LDAP on the community pod Troubleshooting the Sametime server Troubleshooting Sametime Meetings Troubleshooting Sametime Chat Troubleshooting Sametime clients Collecting Sametime client configuration and log data Logging and tracing on the Sametime Embedded and Connect Client Resolving problems with business cards Migrating and Upgrading Planning for migration to Sametime 12 Upgrading to a new version or applying a fixpack Installing a fix pack on Docker Installing a fix pack on Kubernetes Reverting to a previous version on Docker Reverting to a previous version on Kubernetes Migrating from older Sametime versions Upgrading from Meetings 11.5 and 11.6 Upgrading Sametime 11.5 and Sametime 11.6 Docker deployments Upgrading Sametime 11.5 and Sametime 11.6 Kubernetes deployments Notices","title":"HCL Sametime\u00aeAdministration Guide 12.0.1"},{"location":"admin/Managing_dashboard.html","text":"Monitoring your meeting and chat metrics with Grafana\u00ae Sametime uses the third-party software, Grafana\u00ae, to generate insightful graphs and visualizations derived from time-series database (TSDB) data. This section covers the steps on how to use Grafana in your Sametime environment. There are two Dashboard JSON file in the build: Docker_Sametime_Dashboard.json K8_Sametime_Dashboard.json file By default, the basic Grafana dashboard consists of four rows: Overview Chat Server Chat Proxy Meetings Each row consist of panels giving chat and meetings information to the admin. Currently, only users that have permission to view the monitoring dashboard are allowed access. Some configuration options require admin access to make changes to the dashboard. As an administrator, you can configure your dashboard to generate insights using certain specific information. Refer to Dashboards for the details. Configuring Docker to run Grafana Configuring Kubernetes to run Grafana Parent topic: Configuring","title":"Monitoring your meeting and chat metrics with Grafana\u00ae {#Managing_dashboard .task}"},{"location":"admin/Managing_dashboard.html#Managing_dashboard","text":"Sametime uses the third-party software, Grafana\u00ae, to generate insightful graphs and visualizations derived from time-series database (TSDB) data. This section covers the steps on how to use Grafana in your Sametime environment. There are two Dashboard JSON file in the build: Docker_Sametime_Dashboard.json K8_Sametime_Dashboard.json file By default, the basic Grafana dashboard consists of four rows: Overview Chat Server Chat Proxy Meetings Each row consist of panels giving chat and meetings information to the admin. Currently, only users that have permission to view the monitoring dashboard are allowed access. Some configuration options require admin access to make changes to the dashboard. As an administrator, you can configure your dashboard to generate insights using certain specific information. Refer to Dashboards for the details. Configuring Docker to run Grafana Configuring Kubernetes to run Grafana Parent topic: Configuring","title":"Monitoring your meeting and chat metrics with Grafana\u00ae"},{"location":"admin/admin_policy_enable_custom.html","text":"Allowing or restricting custom policies for Sametime clients Optionally allow or restrict features for clients by creating exception rules for the policy service in the policyExceptions.xml file. Sometimes you need to disable features for a specific client version or for particular client IDs; for example because of a known problem or a limitation. You can either allow or restrict custom policies for specific client versions and IDs. The policy service on the Sametime server manages a list of exception rules for specific client versions and client types (IDs). The exceptions are assigned a \"weight\" and are then compared with the user's policy assignment weight, which was calculated by the policy service. If the exception is weighted higher, the user will be assigned the exceptions defined in the policyExceptions.xml file. The code that handles exception rules is invoked after a user policy is calculated. The STPolicy application (on the Community Server) looks for exception rules defined for a client ID and for the client version. If more than one exception rule is found, the rule with the higher weight is selected. The selected exception rule is applied to the user only if its weight is higher than a weight of the policy that was already assigned to that user by his or her direct/group assignment). The STPolicy application reads the exception rules when the server is started, and again every time the regular policy rules are loaded from the Sametime System Console (once every 60 minutes). Build the policyExceptions.xml file and deploy it on the Sametime server by completing the following steps. Create an XML file using standard XML syntax rules with a text or XML/HTML editor. Use the following opening and closing tags: <PolicyExceptionsRules> ... </PolicyExceptionsRules> Determine values for the client_ids and client_versions settings. The exceptions can apply to either client versions, client IDs, or a combination of both. The client version is a base version of the client that includes all fix levels (for example 8.5.2.0). You can specify multiple client versions. The client_versions setting uses a 4 digit number that includes the base Sametime version. The policy exception rules apply to any running client that matches one of the specified client_versions values. Table 1 lists examples of clients and their corresponding version values. Client client_versions value Sametime\u00ae 8.5.2 8520 Sametime 8.5.2 IFR1 8521 Sametime 9 9000 The client ID is a specific build of a particular client (such as Notes\u00ae 8.5.2 with Sametime embedded 8.5.2). You can specify multiple client IDs. The client_ids setting must be formatted in decimal format. Use the HCL\u00ae knowledge article Table of Client types that are connecting to a Sametime server to identify the client IDs and their corresponding decimal values. Table 2 lists examples of clients and their corresponding hexadecimal IDs and decimal values, which are listed in the technote. Client Hexadecimal ID Decimal equivalent Sametime Connect client 8.5.2 0x130D 4877 Notes 8.5.2 using the Embedded Sametime 8.5.2 client 0x1240 4672 Notes 9.0.1 using the Embedded Sametime 8.5.2 client 0x1298 4760 Create the rules in the XML file by inserting a <Rule /> section (one for each rule) between the opening and closing tags that you created in step 1. The rule is represented as a section in the file, so format the opening and closing tags as follows: <PolicyExceptionsRules> <Rule id=\"id\" weight=\"weight\" product=\"product\" client_versions=\"client\\_versions\" client_ids=\"client\\_ids\"> ... </Rule> </PolicyExceptionsRules> Assign values to the variables in the <Rule /> tag. Table 3 explains the settings used in the <Rule /> tag. Setting Description Example id Required. A number that identifies the rule. The ID must be unique within the file. id=\"1\" weight Required. A number that defines the priority of the exception rule to determine whether it should override the direct user/group policy assignment. The weight must be unique within the file and cannot match the regular policy weights. weight=\"10\" product Required. A two-letter prefix that indicates which product feature policy is affected by the rule: - av : audio and video (media services) - im : instant messaging - ms : meetings product=\"im\" client_versions Optional. This is the 4-digit number representing a specific version of the Sametime client. You must include either the client_versions setting, the client_ids setting, or both settings. If you omit the client_versions setting, the rule is applied only to the specified client IDs. client_versions=\"8500,8520\" client_ids Optional. This is the decimal value representing the ID of a particular type of Sametime client. You must include either the client_versions setting, the client_ids setting, or both settings. If you omit the client_ids setting, the rule is applied only to the specified client versions. client_ids=\"4870,4874\" The following example shows a rule statement: <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> \\(..... the policy settings are specified here ....\\) </Rule> </PolicyExceptionsRules> For each policy setting that is affected by the rule, create a <Policy /> statement that specifies the policy ID and setting for each policy exception. Begin each statement with the <Policy /> tag, formatted as shown in the following example. <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> <Policy id=\"id\" value=\"value\" /> </Rule> </PolicyExceptionsRules> Assign values to the variables in the <Policy /> statement. Table 4 explains the settings used in the <Policy /> tag. Setting Description Example id Required. Policies are predefined and are specified using their IDs. The list of policy IDs for each product feature is available in the following topics: - Instant messaging policy IDs id=\"2006\" value Required. Specify the value to use when the policy is implemented. Some values require a URL or a numeric setting to use as a maximum or minimum amount; others might require 0 to disable or 1 to enable the policy. value=\"0\" Important rules about creating the policy exceptions: List only the exceptions to a policy. The user still retrieves their regular policy assignment and then the exceptions are applied to that. Specify only one exception rule per product for a specific client ID or version. If more than one exception rule exists for a particular client ID or version, the highest-weight rule will be applied and the others will be ignored. Place each setting under the appropriate product prefix (instant messaging, meetings, or media services, described in Table 3). For certain attributes, you must omit the product prefix to ensure compatibility with older clients. For historical reasons the Connect client and the Notes embedded client support some policy attributes without a product prefix; however the web and mobile clients support only prefixed IDs. Omit the product prefix from the policyExceptions.xml file for the following policy attributes: All numeric attributes for the im product. The 2024 and 2025 attributes that include the \"sut\" prefix in the policies.user.xml file. The attribute1001 - attribute1005 attributes for the ms product (they appear in the policies.user.xml file without the product prefix as well). - It is not necessary to include the \"label\" setting with the policy id in your file. Examples in the product documentation sometimes include the label; but you can omit it. For example, if you want the policy ID 2006 (maximum number of days to save a chat transcript) set to 0 days, the label looks like the following statement: im.2006.label = Maximum days to save automatically saved chat transcripts (IC) You can omit that label and just use the corresponding setting tag to set the value, as in the following statement: <Policy id=\"2006\" value=\"0\"/> Exception rules apply only to authenticated community users, each of whom has a record in the organization's directory and is authenticated when connecting to the community. Anonymous users will always be assigned to the strict lowest-weight policy, regardless of the client version or ID. The following code example shows an example policy statement: <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> <Policy id=\"2006\" value=\"0\" /> </Rule> </PolicyExceptionsRules> The following example shows two rule sections with policy statements: <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> <Policy id=\"2006\" value=\"0\" /> <Policy id=\"2012\" value=\"http://sametime.server.com/updates\" /> <Policy id=\"2014\" value=\"800\" /> </Rule> <Rule id=\"2\" weight=\"20\" product=\"av\" client_versions=\"\" client_ids=\"4868,4878\"> <Policy id=\"av.avCapAvailableThroughSMS\" value=\"0\" /> <Policy id=\"av.allowChangesToPrefNumbers\" value=\"0\" /> <Policy id=\"2024\" value=\"0\" /> </Rule> </PolicyExceptionsRules> Rule id=\"1\" uses a weight of \" 10\" and is enabled for instant messaging. It applies to client IDs 4870 and 4874 , but only for client versions 8.5 and 8.5.2 (other versions of those client IDs will not be affected). This rule specifies three policies that will be applied to the specified clients when used with instant messaging: 2006 (Maximum days to save automatically saved chat transcripts) is set to 0 days, so transcripts will not be saved. 2012 (Sametime update site URL) specifies the URL where users can access client updates. 2014 (Limit contact list size) is set to 800 contacts per user. Rule id=\"2\" uses a weight of \"20\" and is enabled for media services (audio and video). It applies to client IDs 4868 and 4878 , for all versions of those clients. This rule specifies three policies that will be applied to the specified clients when used with media services: av.avCapAvailableThroughSMS (Voice and video capabilities available through the Sametime Media Server) is set to 0, so audio/video will not be available through the Media Manager server for the specified clients. av.allowChangesToPrefNumbers (Allow changes to preferred numbers) is set to 0, so users cannot change preferred phone numbers. 2024 (Allow changes to the permanent call routing rule ) is set to 0, so users cannot change call routing rules. Deploy and test the policyExceptions.xml file. Save and close the policyExceptions.xml file. Open the file in a browser and confirm there are no syntax errors displayed (correct any errors before proceeding). Copy thepolicyExceptions.xml file to the Domino\u00ae program directory on every Sametime Community Server in the deployment. Restart the Sametime server (or wait for the configuration refresh interval, which is approximately every 60 minutes). Restart your Sametime client, log in, and confirm that the correct policy exceptions are displayed. Parent topic: Managing policies","title":"Allowing or restricting custom policies for Sametime clients {#admin_policy_enable_custom .task}"},{"location":"admin/admin_policy_enable_custom.html#admin_policy_enable_custom","text":"Optionally allow or restrict features for clients by creating exception rules for the policy service in the policyExceptions.xml file. Sometimes you need to disable features for a specific client version or for particular client IDs; for example because of a known problem or a limitation. You can either allow or restrict custom policies for specific client versions and IDs. The policy service on the Sametime server manages a list of exception rules for specific client versions and client types (IDs). The exceptions are assigned a \"weight\" and are then compared with the user's policy assignment weight, which was calculated by the policy service. If the exception is weighted higher, the user will be assigned the exceptions defined in the policyExceptions.xml file. The code that handles exception rules is invoked after a user policy is calculated. The STPolicy application (on the Community Server) looks for exception rules defined for a client ID and for the client version. If more than one exception rule is found, the rule with the higher weight is selected. The selected exception rule is applied to the user only if its weight is higher than a weight of the policy that was already assigned to that user by his or her direct/group assignment). The STPolicy application reads the exception rules when the server is started, and again every time the regular policy rules are loaded from the Sametime System Console (once every 60 minutes). Build the policyExceptions.xml file and deploy it on the Sametime server by completing the following steps. Create an XML file using standard XML syntax rules with a text or XML/HTML editor. Use the following opening and closing tags: <PolicyExceptionsRules> ... </PolicyExceptionsRules> Determine values for the client_ids and client_versions settings. The exceptions can apply to either client versions, client IDs, or a combination of both. The client version is a base version of the client that includes all fix levels (for example 8.5.2.0). You can specify multiple client versions. The client_versions setting uses a 4 digit number that includes the base Sametime version. The policy exception rules apply to any running client that matches one of the specified client_versions values. Table 1 lists examples of clients and their corresponding version values. Client client_versions value Sametime\u00ae 8.5.2 8520 Sametime 8.5.2 IFR1 8521 Sametime 9 9000 The client ID is a specific build of a particular client (such as Notes\u00ae 8.5.2 with Sametime embedded 8.5.2). You can specify multiple client IDs. The client_ids setting must be formatted in decimal format. Use the HCL\u00ae knowledge article Table of Client types that are connecting to a Sametime server to identify the client IDs and their corresponding decimal values. Table 2 lists examples of clients and their corresponding hexadecimal IDs and decimal values, which are listed in the technote. Client Hexadecimal ID Decimal equivalent Sametime Connect client 8.5.2 0x130D 4877 Notes 8.5.2 using the Embedded Sametime 8.5.2 client 0x1240 4672 Notes 9.0.1 using the Embedded Sametime 8.5.2 client 0x1298 4760 Create the rules in the XML file by inserting a <Rule /> section (one for each rule) between the opening and closing tags that you created in step 1. The rule is represented as a section in the file, so format the opening and closing tags as follows: <PolicyExceptionsRules> <Rule id=\"id\" weight=\"weight\" product=\"product\" client_versions=\"client\\_versions\" client_ids=\"client\\_ids\"> ... </Rule> </PolicyExceptionsRules> Assign values to the variables in the <Rule /> tag. Table 3 explains the settings used in the <Rule /> tag. Setting Description Example id Required. A number that identifies the rule. The ID must be unique within the file. id=\"1\" weight Required. A number that defines the priority of the exception rule to determine whether it should override the direct user/group policy assignment. The weight must be unique within the file and cannot match the regular policy weights. weight=\"10\" product Required. A two-letter prefix that indicates which product feature policy is affected by the rule: - av : audio and video (media services) - im : instant messaging - ms : meetings product=\"im\" client_versions Optional. This is the 4-digit number representing a specific version of the Sametime client. You must include either the client_versions setting, the client_ids setting, or both settings. If you omit the client_versions setting, the rule is applied only to the specified client IDs. client_versions=\"8500,8520\" client_ids Optional. This is the decimal value representing the ID of a particular type of Sametime client. You must include either the client_versions setting, the client_ids setting, or both settings. If you omit the client_ids setting, the rule is applied only to the specified client versions. client_ids=\"4870,4874\" The following example shows a rule statement: <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> \\(..... the policy settings are specified here ....\\) </Rule> </PolicyExceptionsRules> For each policy setting that is affected by the rule, create a <Policy /> statement that specifies the policy ID and setting for each policy exception. Begin each statement with the <Policy /> tag, formatted as shown in the following example. <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> <Policy id=\"id\" value=\"value\" /> </Rule> </PolicyExceptionsRules> Assign values to the variables in the <Policy /> statement. Table 4 explains the settings used in the <Policy /> tag. Setting Description Example id Required. Policies are predefined and are specified using their IDs. The list of policy IDs for each product feature is available in the following topics: - Instant messaging policy IDs id=\"2006\" value Required. Specify the value to use when the policy is implemented. Some values require a URL or a numeric setting to use as a maximum or minimum amount; others might require 0 to disable or 1 to enable the policy. value=\"0\" Important rules about creating the policy exceptions: List only the exceptions to a policy. The user still retrieves their regular policy assignment and then the exceptions are applied to that. Specify only one exception rule per product for a specific client ID or version. If more than one exception rule exists for a particular client ID or version, the highest-weight rule will be applied and the others will be ignored. Place each setting under the appropriate product prefix (instant messaging, meetings, or media services, described in Table 3). For certain attributes, you must omit the product prefix to ensure compatibility with older clients. For historical reasons the Connect client and the Notes embedded client support some policy attributes without a product prefix; however the web and mobile clients support only prefixed IDs. Omit the product prefix from the policyExceptions.xml file for the following policy attributes: All numeric attributes for the im product. The 2024 and 2025 attributes that include the \"sut\" prefix in the policies.user.xml file. The attribute1001 - attribute1005 attributes for the ms product (they appear in the policies.user.xml file without the product prefix as well). - It is not necessary to include the \"label\" setting with the policy id in your file. Examples in the product documentation sometimes include the label; but you can omit it. For example, if you want the policy ID 2006 (maximum number of days to save a chat transcript) set to 0 days, the label looks like the following statement: im.2006.label = Maximum days to save automatically saved chat transcripts (IC) You can omit that label and just use the corresponding setting tag to set the value, as in the following statement: <Policy id=\"2006\" value=\"0\"/> Exception rules apply only to authenticated community users, each of whom has a record in the organization's directory and is authenticated when connecting to the community. Anonymous users will always be assigned to the strict lowest-weight policy, regardless of the client version or ID. The following code example shows an example policy statement: <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> <Policy id=\"2006\" value=\"0\" /> </Rule> </PolicyExceptionsRules> The following example shows two rule sections with policy statements: <PolicyExceptionsRules> <Rule id=\"1\" weight=\"10\" product=\"im\" client_versions=\"8500,8520\" client_ids=\"4870,4874\"> <Policy id=\"2006\" value=\"0\" /> <Policy id=\"2012\" value=\"http://sametime.server.com/updates\" /> <Policy id=\"2014\" value=\"800\" /> </Rule> <Rule id=\"2\" weight=\"20\" product=\"av\" client_versions=\"\" client_ids=\"4868,4878\"> <Policy id=\"av.avCapAvailableThroughSMS\" value=\"0\" /> <Policy id=\"av.allowChangesToPrefNumbers\" value=\"0\" /> <Policy id=\"2024\" value=\"0\" /> </Rule> </PolicyExceptionsRules> Rule id=\"1\" uses a weight of \" 10\" and is enabled for instant messaging. It applies to client IDs 4870 and 4874 , but only for client versions 8.5 and 8.5.2 (other versions of those client IDs will not be affected). This rule specifies three policies that will be applied to the specified clients when used with instant messaging: 2006 (Maximum days to save automatically saved chat transcripts) is set to 0 days, so transcripts will not be saved. 2012 (Sametime update site URL) specifies the URL where users can access client updates. 2014 (Limit contact list size) is set to 800 contacts per user. Rule id=\"2\" uses a weight of \"20\" and is enabled for media services (audio and video). It applies to client IDs 4868 and 4878 , for all versions of those clients. This rule specifies three policies that will be applied to the specified clients when used with media services: av.avCapAvailableThroughSMS (Voice and video capabilities available through the Sametime Media Server) is set to 0, so audio/video will not be available through the Media Manager server for the specified clients. av.allowChangesToPrefNumbers (Allow changes to preferred numbers) is set to 0, so users cannot change preferred phone numbers. 2024 (Allow changes to the permanent call routing rule ) is set to 0, so users cannot change call routing rules. Deploy and test the policyExceptions.xml file. Save and close the policyExceptions.xml file. Open the file in a browser and confirm there are no syntax errors displayed (correct any errors before proceeding). Copy thepolicyExceptions.xml file to the Domino\u00ae program directory on every Sametime Community Server in the deployment. Restart the Sametime server (or wait for the configuration refresh interval, which is approximately every 60 minutes). Restart your Sametime client, log in, and confirm that the correct policy exceptions are displayed. Parent topic: Managing policies","title":"Allowing or restricting custom policies for Sametime clients"},{"location":"admin/admin_policy_im_ids.html","text":"Sametime policy IDs This section describes the policies and configurations available in the Sametime deployment. Policy ID Description im.2019.label User must set this community as the default server community (IC) im.2011.label Allow user to add multiple server communities (IC) im.2001.label Allow user to add external users using Sametime gateway communities Policy ID Description im.2002.label Allow user to save chat transcripts (IC) Attention: Local chat history is unencrypted. To disable and restrict users from saving a local copy, refer to Configuring policies . | |im.2004.label|Automatically save chat transcripts (IC)| |im.2006.label|Define the maximum days to save automatically saved chat transcripts (IC)| |im.2008.label|Allow custom emoticons (IC)| |im.enableOfflineMessages.label|Allow user to send offline messages| |im.mobile.disableChatHistory.label|Disable chat history| Policy ID Description im.thirdPartyMeetingEnabled Set to true to enable Sametime Meetings im.meetingsEnabled Set to true to enable Sametime Meetings Policy ID Description im.1.label Allow user to transfer files through server (IC) im.2.label Maximum individual file transfer size, in Kilobytes, for files sent through the server (IC) im.3.label Use exclude file types transfer list, for files sent through the server (IC) im.4.label Types to exclude from transfer. Type the three-letter extension of each file type, separated by a comma or semicolon (IC) im.2005.label Allow client-to-client file transfer (IC) im.2009.label Allow screen capture and images (IC) im.2020.label Set maximum image size for custom emoticons, screen captures, and inline images (IC) im.2021.label KB im.allowTransferringMultipleFilesAndFolders.label Allow transferring multiple files and folders (for Sametime advance users only) im.allowTransferringFilesToNwayParticipants.label Allow transferring files to participants in an n-way session im.maxNumberUsersToReceiveSingleFileInOneFileTransferSession.label Maximum number of users to receive a single file in one file transfer session Policy ID Description im.2010.label Allow mobile client Policy ID Description im.2012.label Sametime update site URL (IC) im.2013.label Allow user to install plug-ins (IC) im.2014.label Limit contact list size im.2015.label Contacts im.2022.label Sametime optional plug-in site URLs. Type the URLs separated by a comma or semicolon (IC) im.3000.label Allow all Sametime Connect features to be used with integrated clients (IC) im.mobile.allowContactExport.label Allow contact export im.mobile.allowLocationReporting.label Allow location reporting im.mobile.offlineAccessEnabled.label Enable offline access im.mobile.offlineAccessPwdMinLength.label Offline access password minimum length im.mobile.offlineAccessPwdExpiryDays.label Offline access password expiry days im.mobile.offlineAccessPromptDelayMin.label Offline access prompt delay im.mobile.disablePasswordSave.label Disable password save im.mobile.offlineAccessPwdRequired.label Offline access password required im.mobile.disableUntrustedSsl.label Disable untrusted SSL im.mobile.disableUrlDialler.label Disable URL dialer im.mobile.forceLogoutDurationMin.label Minimum force log out duration Parent topic: Managing policies","title":"Sametime policy IDs {#admin_policy_im_ids .concept}"},{"location":"admin/admin_policy_im_ids.html#admin_policy_im_ids","text":"This section describes the policies and configurations available in the Sametime deployment. Policy ID Description im.2019.label User must set this community as the default server community (IC) im.2011.label Allow user to add multiple server communities (IC) im.2001.label Allow user to add external users using Sametime gateway communities Policy ID Description im.2002.label Allow user to save chat transcripts (IC) Attention: Local chat history is unencrypted. To disable and restrict users from saving a local copy, refer to Configuring policies . | |im.2004.label|Automatically save chat transcripts (IC)| |im.2006.label|Define the maximum days to save automatically saved chat transcripts (IC)| |im.2008.label|Allow custom emoticons (IC)| |im.enableOfflineMessages.label|Allow user to send offline messages| |im.mobile.disableChatHistory.label|Disable chat history| Policy ID Description im.thirdPartyMeetingEnabled Set to true to enable Sametime Meetings im.meetingsEnabled Set to true to enable Sametime Meetings Policy ID Description im.1.label Allow user to transfer files through server (IC) im.2.label Maximum individual file transfer size, in Kilobytes, for files sent through the server (IC) im.3.label Use exclude file types transfer list, for files sent through the server (IC) im.4.label Types to exclude from transfer. Type the three-letter extension of each file type, separated by a comma or semicolon (IC) im.2005.label Allow client-to-client file transfer (IC) im.2009.label Allow screen capture and images (IC) im.2020.label Set maximum image size for custom emoticons, screen captures, and inline images (IC) im.2021.label KB im.allowTransferringMultipleFilesAndFolders.label Allow transferring multiple files and folders (for Sametime advance users only) im.allowTransferringFilesToNwayParticipants.label Allow transferring files to participants in an n-way session im.maxNumberUsersToReceiveSingleFileInOneFileTransferSession.label Maximum number of users to receive a single file in one file transfer session Policy ID Description im.2010.label Allow mobile client Policy ID Description im.2012.label Sametime update site URL (IC) im.2013.label Allow user to install plug-ins (IC) im.2014.label Limit contact list size im.2015.label Contacts im.2022.label Sametime optional plug-in site URLs. Type the URLs separated by a comma or semicolon (IC) im.3000.label Allow all Sametime Connect features to be used with integrated clients (IC) im.mobile.allowContactExport.label Allow contact export im.mobile.allowLocationReporting.label Allow location reporting im.mobile.offlineAccessEnabled.label Enable offline access im.mobile.offlineAccessPwdMinLength.label Offline access password minimum length im.mobile.offlineAccessPwdExpiryDays.label Offline access password expiry days im.mobile.offlineAccessPromptDelayMin.label Offline access prompt delay im.mobile.disablePasswordSave.label Disable password save im.mobile.offlineAccessPwdRequired.label Offline access password required im.mobile.disableUntrustedSsl.label Disable untrusted SSL im.mobile.disableUrlDialler.label Disable URL dialer im.mobile.forceLogoutDurationMin.label Minimum force log out duration Parent topic: Managing policies","title":"Sametime policy IDs"},{"location":"admin/admin_ssc_policies_understand.html","text":"Policy behaviors You can assign anonymous, default, or custom user policies to users or groups to allow or restrict access to certain Sametime features. Sametime uses policy weights and group nesting levels to determine which policies take precedence. Types of policies Sametime automatically assigns two predefined policies, the anonymous user policy and the default user policy, and also supports the creation of custom user policies. Policy type Description Anonymous user policy - Users who have not authenticated are assigned the anonymous policy by default. - The anonymous policy cannot be deleted but can be edited if you want to allow or restrict access to certain Sametime features for unauthenticated users. - The anonymous policy always has the lowest policy weight (0) and this weight cannot be changed. | |Default user policy|- Users who have authenticated are assigned the default policy if no other policy can be found for that user. - The default policy can be inherited or assigned. - The default policy cannot be deleted but can be edited if you want to allow or restrict access to certain Sametime features. - The default policy has the next lowest policy weight (1) after the anonymous policy and this weight cannot be changed. | |Custom user policies|- Custom policies can be designed for specific users or groups to allow or restrict access to certain Sametime features. - When you create a new policy, the default policy settings are applied as the base settings of the new policy. You can update these settings. | Policy weights User policies in Sametime have weights that determine whether or not a policy's attributes take precedence over the attributes of other policies. Policies with a higher weight take precedence over those with a lower weight. You can change the weight of policies to control their order of precedence by moving them up and down within the policy list of a Sametime product. The policy weights of the anonymous and default policies, which are the lowest (0) and next-lowest (1) weights, cannot be changed. For a user or group that is assigned two or more policies, Sametime implements the policy with the highest weight. For authenticated users, Sametime searches for an exact ID match, and then applies the highest weighted policy. If there is no match for the specific user ID in any policy, then Sametime applies the highest weighted group match. If no group matches are found, the default policy is applied. Policies are only applied from the primary Sametime community. Additional server communities' policies are not pushed down to the users' desktops. A user's primary Sametime community is the first community listed in their Sametime Server Communities Properties settings. Policies applied to nested groups You can configure how Sametime considers nested groups when it applies policies and how many levels deep that Sametime searches for the highest weighted group. By default, Sametime searches through four levels of nested groups when it determines the highest weighted policy. The maximum search depth limit is 10 levels and the minimum is -1 level (no nesting). If a policy is assigned to a group nested more than the current nesting depth, then the default policy is applied. If a group inherits a higher-level policy and is also assigned a policy directly, the directly assigned policy takes precedence over the inherited policy, regardless of either policy's weight. Note: Entering a large number as the maximum nested group depth can have an impact on performance. In the examples, the Renovations company has assigned employees to the following user groups; notice that many of the groups have other groups nested within them. Renovations Group contains George and Corporate Communications Group Corporate Communications Group contains Fernando and Marketing & Merchandising Group Marketing & Merchandising Group contains Betty and Marketing Group Marketing Group contains Samantha and Sales Group Sales Group contains Anne and Brand Specialist Group Brand Specialist Group contains Ted The Renovations company has created some policies to control which user groups have access to different features in Sametime. The actual set of features available to each user will depend on how these policies are weighted and nested. Example 1: Nested groups inherit policies Policy A is assigned to Renovations Group. The nesting level is set to the default 4. George is assigned to Policy A because he belongs directly to the Renovations Group. Fernando is assigned to Policy A because his group falls within the group search nesting limit of 4 levels from the Renovations Group. Betty is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Samantha is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Anne is assigned to the default policy because her user group is nested more than the defined limit of 4 levels from the Renovations Group. Ted is assigned to the default policy because his user group is also nested more than the defined limit of 4 levels from the Renovations Group. Example 2: Highest policy weight breaks ties Policy A has a weight of 3 and is assigned to Renovations Group. Policy B has a weight of 2 and is also assigned to Renovations group. The nesting level is set to the default of 4. George is assigned to Policy A because he belongs directly to the Renovations Group and Policy A has a higher weight. Fernando is assigned to Policy A because his group falls within the group search nesting limit of 4 levels from the Renovations Group. Betty is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Samantha is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Anne is assigned to the default policy because her user group is nested more than the defined limit of 4 levels from the Renovations Group. Ted is assigned to the default policy because his user group is also nested more than the defined limit of 4 levels from the Renovations Group. Example 3: Directly assigned policies have priority over inherited policies, regardless of weight Policy A has a weight of 2 and is assigned to the Corporate Communications Group. Policy B has a weight of 3 and is assigned to the Renovations Group. The nesting level is set to the default of 4. George is assigned to Policy A because he belongs directly to the Renovations Group. Fernando is assigned to Policy A because he belongs directly to the Corporate Communications Group and Policy A has been directly assigned to the Corporate Communications Group. Betty is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Corporate Communications Group. Samantha is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Corporate Communications Group. Anne is assigned to Policy A because her groups falls within the group search nesting limit of 4 levels from the Corporate Communications Group. Ted is assigned to the default policy because his user group is nested more than the defined limit of 4 levels from both the Renovations Group and the Corporate Communications Group. Parent topic: Managing policies","title":"Policy behaviors {#understandingpolicyimplementation .concept}"},{"location":"admin/admin_ssc_policies_understand.html#understandingpolicyimplementation","text":"You can assign anonymous, default, or custom user policies to users or groups to allow or restrict access to certain Sametime features. Sametime uses policy weights and group nesting levels to determine which policies take precedence.","title":"Policy behaviors"},{"location":"admin/admin_ssc_policies_understand.html#types-of-policies","text":"Sametime automatically assigns two predefined policies, the anonymous user policy and the default user policy, and also supports the creation of custom user policies. Policy type Description Anonymous user policy - Users who have not authenticated are assigned the anonymous policy by default. - The anonymous policy cannot be deleted but can be edited if you want to allow or restrict access to certain Sametime features for unauthenticated users. - The anonymous policy always has the lowest policy weight (0) and this weight cannot be changed. | |Default user policy|- Users who have authenticated are assigned the default policy if no other policy can be found for that user. - The default policy can be inherited or assigned. - The default policy cannot be deleted but can be edited if you want to allow or restrict access to certain Sametime features. - The default policy has the next lowest policy weight (1) after the anonymous policy and this weight cannot be changed. | |Custom user policies|- Custom policies can be designed for specific users or groups to allow or restrict access to certain Sametime features. - When you create a new policy, the default policy settings are applied as the base settings of the new policy. You can update these settings. |","title":"Types of policies"},{"location":"admin/admin_ssc_policies_understand.html#policy-weights","text":"User policies in Sametime have weights that determine whether or not a policy's attributes take precedence over the attributes of other policies. Policies with a higher weight take precedence over those with a lower weight. You can change the weight of policies to control their order of precedence by moving them up and down within the policy list of a Sametime product. The policy weights of the anonymous and default policies, which are the lowest (0) and next-lowest (1) weights, cannot be changed. For a user or group that is assigned two or more policies, Sametime implements the policy with the highest weight. For authenticated users, Sametime searches for an exact ID match, and then applies the highest weighted policy. If there is no match for the specific user ID in any policy, then Sametime applies the highest weighted group match. If no group matches are found, the default policy is applied. Policies are only applied from the primary Sametime community. Additional server communities' policies are not pushed down to the users' desktops. A user's primary Sametime community is the first community listed in their Sametime Server Communities Properties settings.","title":"Policy weights"},{"location":"admin/admin_ssc_policies_understand.html#policies-applied-to-nested-groups","text":"You can configure how Sametime considers nested groups when it applies policies and how many levels deep that Sametime searches for the highest weighted group. By default, Sametime searches through four levels of nested groups when it determines the highest weighted policy. The maximum search depth limit is 10 levels and the minimum is -1 level (no nesting). If a policy is assigned to a group nested more than the current nesting depth, then the default policy is applied. If a group inherits a higher-level policy and is also assigned a policy directly, the directly assigned policy takes precedence over the inherited policy, regardless of either policy's weight. Note: Entering a large number as the maximum nested group depth can have an impact on performance. In the examples, the Renovations company has assigned employees to the following user groups; notice that many of the groups have other groups nested within them. Renovations Group contains George and Corporate Communications Group Corporate Communications Group contains Fernando and Marketing & Merchandising Group Marketing & Merchandising Group contains Betty and Marketing Group Marketing Group contains Samantha and Sales Group Sales Group contains Anne and Brand Specialist Group Brand Specialist Group contains Ted The Renovations company has created some policies to control which user groups have access to different features in Sametime. The actual set of features available to each user will depend on how these policies are weighted and nested. Example 1: Nested groups inherit policies Policy A is assigned to Renovations Group. The nesting level is set to the default 4. George is assigned to Policy A because he belongs directly to the Renovations Group. Fernando is assigned to Policy A because his group falls within the group search nesting limit of 4 levels from the Renovations Group. Betty is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Samantha is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Anne is assigned to the default policy because her user group is nested more than the defined limit of 4 levels from the Renovations Group. Ted is assigned to the default policy because his user group is also nested more than the defined limit of 4 levels from the Renovations Group. Example 2: Highest policy weight breaks ties Policy A has a weight of 3 and is assigned to Renovations Group. Policy B has a weight of 2 and is also assigned to Renovations group. The nesting level is set to the default of 4. George is assigned to Policy A because he belongs directly to the Renovations Group and Policy A has a higher weight. Fernando is assigned to Policy A because his group falls within the group search nesting limit of 4 levels from the Renovations Group. Betty is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Samantha is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Renovations Group. Anne is assigned to the default policy because her user group is nested more than the defined limit of 4 levels from the Renovations Group. Ted is assigned to the default policy because his user group is also nested more than the defined limit of 4 levels from the Renovations Group. Example 3: Directly assigned policies have priority over inherited policies, regardless of weight Policy A has a weight of 2 and is assigned to the Corporate Communications Group. Policy B has a weight of 3 and is assigned to the Renovations Group. The nesting level is set to the default of 4. George is assigned to Policy A because he belongs directly to the Renovations Group. Fernando is assigned to Policy A because he belongs directly to the Corporate Communications Group and Policy A has been directly assigned to the Corporate Communications Group. Betty is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Corporate Communications Group. Samantha is assigned to Policy A because her group falls within the group search nesting limit of 4 levels from the Corporate Communications Group. Anne is assigned to Policy A because her groups falls within the group search nesting limit of 4 levels from the Corporate Communications Group. Ted is assigned to the default policy because his user group is nested more than the defined limit of 4 levels from both the Renovations Group and the Corporate Communications Group. Parent topic: Managing policies","title":"Policies applied to nested groups"},{"location":"admin/admin_st_buscard.html","text":"Setting up business cards You can configure the Sametime server so that business card information about an individual displays when a user hovers over a name in a chat window or a contact list. Business card information also displays at the top of an active chat window. Business cards are configured to access user information from the LDAP directory. To access the user information from the LDAP directory, Sametime provides a search engine called a black box. By default, you can choose the following fields to display in the business card. Photo Name Company E-mail address Telephone Address or location Title To troubleshoot problems with business cards, see Resolving problems with business cards . Business card photos must meet the following requirements: Photos must be less than 45K in size. Photos 10K or less are recommended. Photo file types .jpg and .gif are supported. Photos to be used in business card for mobile or web clients they must be in the format of a URL, such as hosted from a web server or HCL Connections Profiles server. Planning for business cards A single LDAP server must be used as the primary repository to retrieve user information. A secondary repository is optional and must be configured as a secondary LDAP server for business cards. Planning for photos If photos are used in a business card , they can be stored in the LDAP directory or in the format of a URL hosted from a web server. For mobile and web clients using the Sametime Proxy server, they must be stored in the format of a URL. Importing photos into a directory using an image/jpeg type is only supported on the Connect and Embedded clients. Importing photos into a directory increases the size of the directory. The increase in size can affect the performance of other applications that use the directory. Depending on the Sametime client type, the attribute to defined the photo location is different. PhotoURL supports the Web and Mobile clients. ImagePath supports the Connect and Notes Embedded clients. Photos set to image/jpeg type supports the Connect and Notes Embedded clients. PhotoURL and ImagePath can be mapped to the same LDAP field. To support all Sametime client types using a URL, update the Sametime server UserInfoConfig.xml file to define both PhotoURL and ImagePath . For example: <Detail Type=\"text/plain\" FieldName=\"PhotoURL\" Id=\"ImagePath\"/> <Detail Type=\"text/plain\" FieldName=\"PhotoURL\" Id=\"PhotoURL\"/> <Set params=\"MailAddress,Name,Title,Location,Telephone,PhotoURL,ImagePath,Company\" SetId=\"0\"/> <Set params=\"MailAddress,Name,Title,Location,Telephone,PhotoURL,ImagePath,Company\" SetId=\"1\"/> After you have identified where the user information is stored, proceed to the applicable topic to configure business cards. Configuring business cards using an LDAP directory Configuring business cards is done in the UserInfoConfig.xml file in the community pod. Customizing business cards in Kubernetes You can override the default business cards configuration by creating an extra-community-configs secret to hold the configuration files. Customizing business cards in Docker You can override the default business cards configuration by editing a UserInfoConfig.xml file and adding it as a volume in the docker-compose.yml. Storing photos in the Domino directory If the Sametime server is connected to a Domino LDAP server, you can store business cards photos in the Domino Directory. Using HCL Connections photos for the Sametime business card You can use the HCL Connections profiles photos for the Sametime business cards. A benefits for using this method is that updated photos in Connections are automatically updated in Sametime. Parent topic: Configuring","title":"Setting up business cards {#admin_st_buscard .concept}"},{"location":"admin/admin_st_buscard.html#admin_st_buscard","text":"You can configure the Sametime server so that business card information about an individual displays when a user hovers over a name in a chat window or a contact list. Business card information also displays at the top of an active chat window. Business cards are configured to access user information from the LDAP directory. To access the user information from the LDAP directory, Sametime provides a search engine called a black box. By default, you can choose the following fields to display in the business card. Photo Name Company E-mail address Telephone Address or location Title To troubleshoot problems with business cards, see Resolving problems with business cards . Business card photos must meet the following requirements: Photos must be less than 45K in size. Photos 10K or less are recommended. Photo file types .jpg and .gif are supported. Photos to be used in business card for mobile or web clients they must be in the format of a URL, such as hosted from a web server or HCL Connections Profiles server.","title":"Setting up business cards"},{"location":"admin/admin_st_buscard.html#section_pny_k5w_35b","text":"A single LDAP server must be used as the primary repository to retrieve user information. A secondary repository is optional and must be configured as a secondary LDAP server for business cards.","title":"Planning for business cards"},{"location":"admin/admin_st_buscard.html#tasktroubleshooting_ay3_nrv_4tb","text":"If photos are used in a business card , they can be stored in the LDAP directory or in the format of a URL hosted from a web server. For mobile and web clients using the Sametime Proxy server, they must be stored in the format of a URL. Importing photos into a directory using an image/jpeg type is only supported on the Connect and Embedded clients. Importing photos into a directory increases the size of the directory. The increase in size can affect the performance of other applications that use the directory. Depending on the Sametime client type, the attribute to defined the photo location is different. PhotoURL supports the Web and Mobile clients. ImagePath supports the Connect and Notes Embedded clients. Photos set to image/jpeg type supports the Connect and Notes Embedded clients. PhotoURL and ImagePath can be mapped to the same LDAP field. To support all Sametime client types using a URL, update the Sametime server UserInfoConfig.xml file to define both PhotoURL and ImagePath . For example: <Detail Type=\"text/plain\" FieldName=\"PhotoURL\" Id=\"ImagePath\"/> <Detail Type=\"text/plain\" FieldName=\"PhotoURL\" Id=\"PhotoURL\"/> <Set params=\"MailAddress,Name,Title,Location,Telephone,PhotoURL,ImagePath,Company\" SetId=\"0\"/> <Set params=\"MailAddress,Name,Title,Location,Telephone,PhotoURL,ImagePath,Company\" SetId=\"1\"/> After you have identified where the user information is stored, proceed to the applicable topic to configure business cards. Configuring business cards using an LDAP directory Configuring business cards is done in the UserInfoConfig.xml file in the community pod. Customizing business cards in Kubernetes You can override the default business cards configuration by creating an extra-community-configs secret to hold the configuration files. Customizing business cards in Docker You can override the default business cards configuration by editing a UserInfoConfig.xml file and adding it as a volume in the docker-compose.yml. Storing photos in the Domino directory If the Sametime server is connected to a Domino LDAP server, you can store business cards photos in the Domino Directory. Using HCL Connections photos for the Sametime business card You can use the HCL Connections profiles photos for the Sametime business cards. A benefits for using this method is that updated photos in Connections are automatically updated in Sametime. Parent topic: Configuring","title":"Planning for photos"},{"location":"admin/admin_st_mng_remotecomm.html","text":"Updating connectivity settings with the managed-community-configs.xml file You can distribute updates to HCL\u00ae Sametime\u00ae client communities automatically using a managed-community-configs.xml file. The managed-community-configs.xml file is policy-based, so you can control communities for different user groups. You can also use the managed-community-configs.xml file to manage secondary communities, while preventing users from adding or deleting communities. Set the Allow Multiple Communities policy to false and use the managed-community-configs.xml to define the desired secondary communities. The client allows the user to log into secondary communities defined in the .xml file, but the user cannot delete secondary communities defined in the file. At login time, the client receives policies and checks for the existence of a managed-community-configs.xml file according to the Sametime update site URL policy. For example, if the administration update site URL is http://example.com/updates, the client looks for the file in http://example.com/updates/managed-community-configs.xml. Follow these steps to create and post a managed-community-configs.xml file. Create a settings XML file and save it as managed-community-configs.xml. Add settings for communities and actions in the file. Place the file on a web server, and post the URL (starting with http://) for the file to the Sametime update site URL in the Chat section of the Instant Messaging policy. If you changed the settings file to update the host name of a community to a new server that is part of the same community, users' contact lists are still valid with the new host. Set the ST_COMMUNITY_ID in the sametime.ini file of both servers to the same value and ensure that all the communities in your cluster are using the same community ID. This prevents duplicate communities from being created on the client when logging into the new host for the first time. You can now test the managed-community-configs.xml file: Create a policy set that includes the administration update site URL and place the .xml file in the location specified by the update site URL. Apply the policy to yourself. Log in to the client to verify the expected changes take effect. (Optional) Enable logging of the managed community settings to help debug problems. To enable logging for the handling of the remote managed-community-configs.xml file, set the following log level in your client's user.home/HCL/Sametime/.config/rcpinstall.properties file: com.ibm.collaboration.realtime.community.internal.config.level=FINEST com.ibm.collaboration.realtime.policy.sametime.level=FINEST where user.home/HCL/Sametime represents the client's workspace location. Managed community settings Define managed community settings in the managed-community-configs.xml file. Parent topic: Sametime client configuration options","title":"Updating connectivity settings with the managed-community-configs.xml file {#admin_st_mng_remotecomm .task}"},{"location":"admin/admin_st_mng_remotecomm.html#admin_st_mng_remotecomm","text":"You can distribute updates to HCL\u00ae Sametime\u00ae client communities automatically using a managed-community-configs.xml file. The managed-community-configs.xml file is policy-based, so you can control communities for different user groups. You can also use the managed-community-configs.xml file to manage secondary communities, while preventing users from adding or deleting communities. Set the Allow Multiple Communities policy to false and use the managed-community-configs.xml to define the desired secondary communities. The client allows the user to log into secondary communities defined in the .xml file, but the user cannot delete secondary communities defined in the file. At login time, the client receives policies and checks for the existence of a managed-community-configs.xml file according to the Sametime update site URL policy. For example, if the administration update site URL is http://example.com/updates, the client looks for the file in http://example.com/updates/managed-community-configs.xml. Follow these steps to create and post a managed-community-configs.xml file. Create a settings XML file and save it as managed-community-configs.xml. Add settings for communities and actions in the file. Place the file on a web server, and post the URL (starting with http://) for the file to the Sametime update site URL in the Chat section of the Instant Messaging policy. If you changed the settings file to update the host name of a community to a new server that is part of the same community, users' contact lists are still valid with the new host. Set the ST_COMMUNITY_ID in the sametime.ini file of both servers to the same value and ensure that all the communities in your cluster are using the same community ID. This prevents duplicate communities from being created on the client when logging into the new host for the first time. You can now test the managed-community-configs.xml file: Create a policy set that includes the administration update site URL and place the .xml file in the location specified by the update site URL. Apply the policy to yourself. Log in to the client to verify the expected changes take effect. (Optional) Enable logging of the managed community settings to help debug problems. To enable logging for the handling of the remote managed-community-configs.xml file, set the following log level in your client's user.home/HCL/Sametime/.config/rcpinstall.properties file: com.ibm.collaboration.realtime.community.internal.config.level=FINEST com.ibm.collaboration.realtime.policy.sametime.level=FINEST where user.home/HCL/Sametime represents the client's workspace location. Managed community settings Define managed community settings in the managed-community-configs.xml file. Parent topic: Sametime client configuration options","title":"Updating connectivity settings with the managed-community-configs.xml file"},{"location":"admin/administering.html","text":"Administering This section provides information on administering on Sametime environments. Managing Sametime clients This section provides information on managing Sametime clients. Managing file transfer data As with meeting recordings and reports, files that are shared in the chat are stored in a Docker volume or a Kubernetes persistent volume. By default, you can download these files within 90 days . Testing Sametime chat and meeting clients This article assumes that you have successfully installed and configured Sametime or Sametime Premium. Starting and stopping the Sametime server Starting and stopping the Sametime server involves starting and stopping the Sametime services running in the container management system. Starting and stopping MongoDB Managing policies Sametime policies allows administrators to control user access to features. Community configuration files Configuration files maintain information used by the Sametime server for various reasons. Enabling multi-tenancy Multi-tenancy allows multiple organizations to be part of the Sametime community. With multi-tenancy, Sametime users can chat, add users and groups to contact lists, and have awareness of users in their organization or in other organizations that are configured to be visible to them. MongoDB This section provides information relating to administering MongoDB. Managing Sametime Meetings This topic explains the features you can enable or disable for meetings. Currently, the settings that you can change are global settings that apply to the entire server. User policies cannot control the settings. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Administering {#administering .task}"},{"location":"admin/administering.html#administering","text":"This section provides information on administering on Sametime environments. Managing Sametime clients This section provides information on managing Sametime clients. Managing file transfer data As with meeting recordings and reports, files that are shared in the chat are stored in a Docker volume or a Kubernetes persistent volume. By default, you can download these files within 90 days . Testing Sametime chat and meeting clients This article assumes that you have successfully installed and configured Sametime or Sametime Premium. Starting and stopping the Sametime server Starting and stopping the Sametime server involves starting and stopping the Sametime services running in the container management system. Starting and stopping MongoDB Managing policies Sametime policies allows administrators to control user access to features. Community configuration files Configuration files maintain information used by the Sametime server for various reasons. Enabling multi-tenancy Multi-tenancy allows multiple organizations to be part of the Sametime community. With multi-tenancy, Sametime users can chat, add users and groups to contact lists, and have awareness of users in their organization or in other organizations that are configured to be visible to them. MongoDB This section provides information relating to administering MongoDB. Managing Sametime Meetings This topic explains the features you can enable or disable for meetings. Currently, the settings that you can change are global settings that apply to the entire server. User policies cannot control the settings. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Administering"},{"location":"admin/administering_mongodb.html","text":"MongoDB This section provides information relating to administering MongoDB. Updating Sametime data in MongoDB When you update existing contact information in the directory, you must run the Sametime database utility in order to synchronize the information with that of the Community Server databases. Changing MongoDB Credentials This section provides information relating to administering MongoDB. Changing MongoDB log file size This section provides information on how to control MongoDB log file size. Parent topic: Administering","title":"MongoDB {#administering_mongodb .task}"},{"location":"admin/administering_mongodb.html#administering_mongodb","text":"This section provides information relating to administering MongoDB. Updating Sametime data in MongoDB When you update existing contact information in the directory, you must run the Sametime database utility in order to synchronize the information with that of the Community Server databases. Changing MongoDB Credentials This section provides information relating to administering MongoDB. Changing MongoDB log file size This section provides information on how to control MongoDB log file size. Parent topic: Administering","title":"MongoDB"},{"location":"admin/administering_mongodb_credential.html","text":"Changing MongoDB Credentials This section provides information relating to administering MongoDB. Parent topic: MongoDB","title":"Changing MongoDB Credentials {#administering_mongodb_credential .task}"},{"location":"admin/administering_mongodb_credential.html#administering_mongodb_credential","text":"This section provides information relating to administering MongoDB. Parent topic: MongoDB","title":"Changing MongoDB Credentials"},{"location":"admin/administrator_doc.html","text":"HCL Sametime Administration Guide 12.0.1 The Administration Guide contains information for installing and configuring HCL Sametime Premium and Sametime. Getting Started What's new Planning System requirements Troubleshooting and Support HCL Customer Support Sametime Resources Sametime\u00ae community forum Additional Resources Using HCL Sametime Premium Meetings HCL Sametime Meetings Add-in for Microsoft Users . HCL Sametime iOS Users Guide Configuring Sametime for iOS via an EMM Provider HCL Sametime Android Users Guide Configuring Sametime for Android Enterprise with EMMs Accessibility features for Sametime Accessibility features help users who have a disability, such as restricted mobility or limited vision, to use information technology products successfully. HCL\u00ae strives to provide products with usable access for everyone. What's new HCL Sametime and HCL Sametime Premium 12.0.1 provides many new features, enhancements and fixes to servers and clients. For information on these new features and enhancement, see the HCL Sametime and HCL Sametime Premium 12.0.1 Release Information article. Encryption usage in Sametime HCL\u00ae Sametime\u00ae uses several types of encryption to protect data. Planning This section describes the system requirements and server configurations needed for HCL Sametime and HCL Sametime Premium. Installing This section provides information on installing and configuring the servers for HCL Sametime and HCL Sametime Premium. Configuring This section provides information on configuring the HCL Sametime server. Securing This section provides information on securing your HCL Sametime environments. Administering This section provides information on administering on Sametime environments. Troubleshooting This section provides information on troubleshooting and supporting Sametime environments. Migrating and Upgrading This section provides information on migrating data from an earlier release to Sametime 12. Notices","title":"Administering Sametime"},{"location":"admin/administrator_doc.html#administrator_doc","text":"The Administration Guide contains information for installing and configuring HCL Sametime Premium and Sametime.","title":"HCL Sametime Administration Guide 12.0.1"},{"location":"admin/administrator_doc.html#section_s1b_dcn_3kb","text":"What's new Planning System requirements","title":"Getting Started"},{"location":"admin/administrator_doc.html#section_dhd_xcn_3kb","text":"HCL Customer Support Sametime Resources Sametime\u00ae community forum","title":"Troubleshooting and Support"},{"location":"admin/administrator_doc.html#section_ok4_wty_hlb","text":"Using HCL Sametime Premium Meetings HCL Sametime Meetings Add-in for Microsoft Users . HCL Sametime iOS Users Guide Configuring Sametime for iOS via an EMM Provider HCL Sametime Android Users Guide Configuring Sametime for Android Enterprise with EMMs Accessibility features for Sametime Accessibility features help users who have a disability, such as restricted mobility or limited vision, to use information technology products successfully. HCL\u00ae strives to provide products with usable access for everyone. What's new HCL Sametime and HCL Sametime Premium 12.0.1 provides many new features, enhancements and fixes to servers and clients. For information on these new features and enhancement, see the HCL Sametime and HCL Sametime Premium 12.0.1 Release Information article. Encryption usage in Sametime HCL\u00ae Sametime\u00ae uses several types of encryption to protect data. Planning This section describes the system requirements and server configurations needed for HCL Sametime and HCL Sametime Premium. Installing This section provides information on installing and configuring the servers for HCL Sametime and HCL Sametime Premium. Configuring This section provides information on configuring the HCL Sametime server. Securing This section provides information on securing your HCL Sametime environments. Administering This section provides information on administering on Sametime environments. Troubleshooting This section provides information on troubleshooting and supporting Sametime environments. Migrating and Upgrading This section provides information on migrating data from an earlier release to Sametime 12. Notices","title":"Additional Resources"},{"location":"admin/alternate_client_configuration.html","text":"Configuring Sametime preferences using HCL Notes policies To configure preferences for the HCL Sametime Embedded Client for Notes, you can also use the Domino\u00ae Desktop policy settings document . These policies are applied when a Notes user logs into their home mail server and retrieves their desktop policy. These settings will not apply to any other client. The Domino desktop policy settings document Custom Settings tab contains a Managed Settings option, through which you can define preferences. If you do not use Domino Administrative policies in your organization, you can configure the same settings by leveraging the managed-settings.xml file and defining it in the Sametime policy. If the preference is set in both the Domino Desktop policy settings document and the managed settings, the preference in the Desktop policy settings document takes precedence. Best practices indicate that it's preferable to set the preference in the Desktop policy settings document or the managed settings, but not in both places. For step-by-step instructions see the article: How to use a Notes desktop policy to push Sametime embedded client settings . Parent topic: Sametime client configuration options","title":"Configuring Sametime preferences using HCL Notes policies {#alternate_client_configuration .task}"},{"location":"admin/alternate_client_configuration.html#alternate_client_configuration","text":"To configure preferences for the HCL Sametime Embedded Client for Notes, you can also use the Domino\u00ae Desktop policy settings document . These policies are applied when a Notes user logs into their home mail server and retrieves their desktop policy. These settings will not apply to any other client. The Domino desktop policy settings document Custom Settings tab contains a Managed Settings option, through which you can define preferences. If you do not use Domino Administrative policies in your organization, you can configure the same settings by leveraging the managed-settings.xml file and defining it in the Sametime policy. If the preference is set in both the Domino Desktop policy settings document and the managed settings, the preference in the Desktop policy settings document takes precedence. Best practices indicate that it's preferable to set the preference in the Desktop policy settings document or the managed settings, but not in both places. For step-by-step instructions see the article: How to use a Notes desktop policy to push Sametime embedded client settings . Parent topic: Sametime client configuration options","title":"Configuring Sametime preferences using HCL Notes policies"},{"location":"admin/apply_configchanges_docker.html","text":"Applying configuration changes in Docker Configuration files contain environment variables that can be changed and applied to the Sametime server. You can make configuration changes by modifying the following files. custom.env .env docker-compose.yml The docker-compose command is used to apply the changes. Note: Values in the Docker commands are case sensitive and must be entered in lower case. Shut down the Sametime server. docker-compose down Modify the configuration file. Save changes to the configuration files. Delete the jitsi-conifg directory with the options recursive and force. rm -rf jitsi-config/ The jitsi-config directory on Docker is built on start up with the new configuration values. Save and Restart the server to apply the changes. docker-compose down docker-compose up -d Parent topic: Configuring","title":"Applying configuration changes in Docker {#apply_confichanges_docker .task}"},{"location":"admin/apply_configchanges_docker.html#apply_confichanges_docker","text":"Configuration files contain environment variables that can be changed and applied to the Sametime server. You can make configuration changes by modifying the following files. custom.env .env docker-compose.yml The docker-compose command is used to apply the changes. Note: Values in the Docker commands are case sensitive and must be entered in lower case. Shut down the Sametime server. docker-compose down Modify the configuration file. Save changes to the configuration files. Delete the jitsi-conifg directory with the options recursive and force. rm -rf jitsi-config/ The jitsi-config directory on Docker is built on start up with the new configuration values. Save and Restart the server to apply the changes. docker-compose down docker-compose up -d Parent topic: Configuring","title":"Applying configuration changes in Docker"},{"location":"admin/apply_configchanges_kubernetes.html","text":"Applying configuration changes in Kubernetes Configuration files contain environment variables that can be changed and applied to the Sametime server. You can make configuration changes to the Sametime deployment server by modifying the helm/values.yaml file. Note: These settings are case sensitive and must be entered as shown. Edit the helm charts and make modifications. Go to the helm directory. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Configuring","title":"Applying configuration changes in Kubernetes {#apply_confichanges_kubernetes .task}"},{"location":"admin/apply_configchanges_kubernetes.html#apply_confichanges_kubernetes","text":"Configuration files contain environment variables that can be changed and applied to the Sametime server. You can make configuration changes to the Sametime deployment server by modifying the helm/values.yaml file. Note: These settings are case sensitive and must be entered as shown. Edit the helm charts and make modifications. Go to the helm directory. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Configuring","title":"Applying configuration changes in Kubernetes"},{"location":"admin/assign_user_policy.html","text":"Assigning users and groups to policies Policies can be assigned to users or groups. Policy configuration is done inside the policies.user.xml file. Open the policies.user.xml file with a text or XML editor. Ensure you are in the correct policy inside the file. Look for the line that begins with <policy id=\u201dYour Custom Policy\u201d . Where \u201cYour Custom Policy\u201d is the name of the policy you wish to modify. Inside the policy there is a tag called <policyAssignment> ending with <policyAssignment> . Enter your policy groups between these tags using: <assignment type=\u201d1\u201d id=\u201dv11TestGroup\u201d/> Note: When using Domino groups, they should be created as Multi-Purpose Groups. Where the \u201cv11TestGroup\u201d is the name of your group. Save and close the file when complete. Parent topic: Managing policies","title":"Assigning users and groups to policies {#assign_user_policy .task}"},{"location":"admin/assign_user_policy.html#assign_user_policy","text":"Policies can be assigned to users or groups. Policy configuration is done inside the policies.user.xml file. Open the policies.user.xml file with a text or XML editor. Ensure you are in the correct policy inside the file. Look for the line that begins with <policy id=\u201dYour Custom Policy\u201d . Where \u201cYour Custom Policy\u201d is the name of the policy you wish to modify. Inside the policy there is a tag called <policyAssignment> ending with <policyAssignment> . Enter your policy groups between these tags using: <assignment type=\u201d1\u201d id=\u201dv11TestGroup\u201d/> Note: When using Domino groups, they should be created as Multi-Purpose Groups. Where the \u201cv11TestGroup\u201d is the name of your group. Save and close the file when complete. Parent topic: Managing policies","title":"Assigning users and groups to policies"},{"location":"admin/c_file_transfer.html","text":"File transfer policies Sametime allows users to download files through links in the chat. Mobile support has also been added for this new functionality. Note: The old file transfer protocol is not supported by Sametime mobile. General file transfer policies General policies apply to all client settings. Edit the following policies to fit your business needs. Mobile file transfer policies By default, you can send files to other users and subsequently download the shared files. Edit the following policies to fit your business needs. Parent topic: Mobile client policies","title":"File transfer policies {#c_file_transfer .concept}"},{"location":"admin/c_file_transfer.html#c_file_transfer","text":"Sametime allows users to download files through links in the chat. Mobile support has also been added for this new functionality. Note: The old file transfer protocol is not supported by Sametime mobile. General file transfer policies General policies apply to all client settings. Edit the following policies to fit your business needs. Mobile file transfer policies By default, you can send files to other users and subsequently download the shared files. Edit the following policies to fit your business needs. Parent topic: Mobile client policies","title":"File transfer policies"},{"location":"admin/c_general_chat_policies.html","text":"General chat policies These policies control chat behavior. Edit the following policies to fit your business needs. Policy id = im.enableOfflineMessages, Default Setting: ON By default, you can send messages to offline users. Turn this setting off to disable offline messages. Note: Regardless of the setting, you need to be active on your mobile device to receive message notifications. Policy id = im.persistentChatEnabled, Default Setting: ON By default, chat history is stored in the server. Leave this setting on if you want the full chat transcript to be available to all clients using the same ID. When turned off, the chat history is maintained only at the clients and is deleted immediately when the user is logged out. Note: Regardless of the setting, chat history is no longer stored locally on mobile devices. Parent topic: General policies","title":"**General chat policies** {#c_general_chat_policies .concept}"},{"location":"admin/c_general_chat_policies.html#c_general_chat_policies","text":"These policies control chat behavior. Edit the following policies to fit your business needs.","title":"General chat policies"},{"location":"admin/c_general_chat_policies.html#section_sx5_cbg_htb","text":"By default, you can send messages to offline users. Turn this setting off to disable offline messages. Note: Regardless of the setting, you need to be active on your mobile device to receive message notifications.","title":"Policy id = im.enableOfflineMessages, Default Setting: ON"},{"location":"admin/c_general_chat_policies.html#section_r4c_fbg_htb","text":"By default, chat history is stored in the server. Leave this setting on if you want the full chat transcript to be available to all clients using the same ID. When turned off, the chat history is maintained only at the clients and is deleted immediately when the user is logged out. Note: Regardless of the setting, chat history is no longer stored locally on mobile devices. Parent topic: General policies","title":"Policy id = im.persistentChatEnabled, Default Setting: ON"},{"location":"admin/c_general_file_transfers.html","text":"General file transfer policies General policies apply to all client settings. Edit the following policies to fit your business needs. Policy id = 1, Default Setting: ON By default, you can share files with other users. Turn this setting off to restrict file sharing between users. Any configuration made to this policy is applied across all clients. This policy affects one-to-one chats and works in conjunction with Policy id = im.allowTransferringFilesToNwayParticipants. Note: To allow or restrict users from downloading files such as meeting recordings or reports, configure Policy id = im.mobile.allowReceiveFiles. For more information, refer to Mobile file transfer policies . Policy id = 2, Default Setting: 100000 By default, the maximum file size of your load file or compressed file is 100,000 KB. You can change the maximum file size. Any configuration made to this policy is applied across all clients. Policy id = im.allowTransferringFilesToNwayParticipants, Default Setting: ON By default, you can share files in group chats . To allow users to share files in a group chat, enable this policy and Policy id = 1. Parent topic: File transfer policies","title":"General file transfer policies {#c_general_file_transfers .concept}"},{"location":"admin/c_general_file_transfers.html#c_general_file_transfers","text":"General policies apply to all client settings. Edit the following policies to fit your business needs.","title":"General file transfer policies"},{"location":"admin/c_general_file_transfers.html#section_mkw_5cg_htb","text":"By default, you can share files with other users. Turn this setting off to restrict file sharing between users. Any configuration made to this policy is applied across all clients. This policy affects one-to-one chats and works in conjunction with Policy id = im.allowTransferringFilesToNwayParticipants. Note: To allow or restrict users from downloading files such as meeting recordings or reports, configure Policy id = im.mobile.allowReceiveFiles. For more information, refer to Mobile file transfer policies .","title":"Policy id = 1, Default Setting: ON"},{"location":"admin/c_general_file_transfers.html#section_xsg_ycg_htb","text":"By default, the maximum file size of your load file or compressed file is 100,000 KB. You can change the maximum file size. Any configuration made to this policy is applied across all clients.","title":"Policy id = 2, Default Setting: 100000"},{"location":"admin/c_general_file_transfers.html#section_ssp_1dg_htb","text":"By default, you can share files in group chats . To allow users to share files in a group chat, enable this policy and Policy id = 1. Parent topic: File transfer policies","title":"Policy id = im.allowTransferringFilesToNwayParticipants, Default Setting: ON"},{"location":"admin/c_general_meetings_policies.html","text":"General meeting policies These policies determine how third-party meetings and Sametime meetings are handled on Sametime mobile. Edit the following policies to fit your business needs. Policy id = im.thirdPartyMeetingEnabled, Default Setting: ON By default, you can add third-party meeting URLs to your favorites list. When turned off, users can only add Sametime meetings to the list. Policy id = im.meetingsEnabled Default Setting: ON By default, all users can create and start meetings. When turned on, the My Meetings list is displayed on the Meetings dialog. Turn this setting off to allow users to join Sametime meetings but restrict them from creating and starting their own. Parent topic: General policies","title":"**General meeting policies** {#c_general_meetings_policies .concept}"},{"location":"admin/c_general_meetings_policies.html#c_general_meetings_policies","text":"These policies determine how third-party meetings and Sametime meetings are handled on Sametime mobile. Edit the following policies to fit your business needs.","title":"General meeting policies"},{"location":"admin/c_general_meetings_policies.html#section_sd4_t1g_htb","text":"By default, you can add third-party meeting URLs to your favorites list. When turned off, users can only add Sametime meetings to the list.","title":"Policy id = im.thirdPartyMeetingEnabled, Default Setting: ON"},{"location":"admin/c_general_meetings_policies.html#section_uxf_xbg_htb","text":"By default, all users can create and start meetings. When turned on, the My Meetings list is displayed on the Meetings dialog. Turn this setting off to allow users to join Sametime meetings but restrict them from creating and starting their own. Parent topic: General policies","title":"Policy id = im.meetingsEnabled Default Setting: ON"},{"location":"admin/c_general_policies.html","text":"General policies General policies apply to all clients. This section describes the unique response of the mobile client to these policies. General chat policies These policies control chat behavior. Edit the following policies to fit your business needs. General meeting policies These policies determine how third-party meetings and Sametime meetings are handled on Sametime mobile. Edit the following policies to fit your business needs. Parent topic: Mobile client policies","title":"General policies {#c_general_policies .concept}"},{"location":"admin/c_general_policies.html#c_general_policies","text":"General policies apply to all clients. This section describes the unique response of the mobile client to these policies. General chat policies These policies control chat behavior. Edit the following policies to fit your business needs. General meeting policies These policies determine how third-party meetings and Sametime meetings are handled on Sametime mobile. Edit the following policies to fit your business needs. Parent topic: Mobile client policies","title":"General policies"},{"location":"admin/c_inline_previews.html","text":"Generating link previews on chat By default, Sametime automatically generates link previews for messages containing links to websites. Edit this policy to fit your business needs. Policy id = im.urlPreviewEnabled, Default Setting: ON By default, Sametime establishes a connection with the website to query the metadata and generate link previews on the chat. Turn this policy off to disable this feature. Parent topic: Security policies","title":"Generating link previews on chat {#c_inline_previews .concept}"},{"location":"admin/c_inline_previews.html#c_inline_previews","text":"By default, Sametime automatically generates link previews for messages containing links to websites. Edit this policy to fit your business needs.","title":"Generating link previews on chat"},{"location":"admin/c_inline_previews.html#section_x4z_cgg_htb","text":"By default, Sametime establishes a connection with the website to query the metadata and generate link previews on the chat. Turn this policy off to disable this feature. Parent topic: Security policies","title":"Policy id = im.urlPreviewEnabled, Default Setting: ON"},{"location":"admin/c_migration_planning.html","text":"Planning for migration to Sametime 12 This section describes the best practices for planning migration from an earlier Sametime release. If the older Sametime deployment is not configured for LDAP, then the contact lists must be converted using the Stnamechange utility before migrating. The Stnamechange utility is currently unavailable on Sametime 12. Run the utility on Sametime 9, 10, or 11 before migrating. Side-by-side migration Sametime 12 does not support upgrades from an existing community or proxy server to Sametime 12. Sametime 12 is now containerized, and you have to deploy the new images and then migrate your users. If the new server is part of the same community as your existing servers, block port 1516 between the new server and existing server to prevent confusion while testing and validating new features. Prior to migrating, make sure port 1516 is open. VPUSERINFO.NSF Note: Running the notes-migration tool moves your contact list to MongoDB. For more information on how to migrate your contacts, refer to Migrating from older Sametime versions . Prior to the migration, you must purge stale users from vpuserinfo.nsf. This step can be done manually with a Lotuscript agent, or by using the NameChange utility. Domino database maintenance should be performed after purging stale users. If the older Sametime deployment is not configured for LDAP, then the contact lists must be converted using the Stnamechange utility. The Stnamechange utility is currently unavailable on Sametime 12. Run the utility on Sametime 9, 10 or 11 before migrating. SAMETIME.INI You can migrate your tuning settings for LDAP from the old server to the new server. Note the setting in the sametime.ini and add them to the Sametime 12 environment. ST_COMMUNITY_ID should match the old server. This step ensures the clients show awareness properly after migrating. Policies Policies are configured in policies.user.xml. You must start your new server configuration with the policies.user.xml file that comes with the Sametime 12 install and manually configure, when needed. There are settings in the new server version that were not in the older versions of Sametime and in the deployment. If you are using managed-settings.xml or managed-community-conf.xml, be sure to include these files in the new Sametime 12 policies. Moving the users Once you are finished testing and are ready to migrate the users, there are a few different strategies to choose from. Using the DNS. The hostname is the same, and there are no additional configurations on the client side. In this scenario, the DNS would be changed to point to the new environment. DNS may take some time to propagate throughout your network. You may need to leave both old and new servers running simultaneously for a period of time. Be certain the vpuserinfo.nsf has been migrated to the Sametime 12 deployment to keep the contacts up to date. You can check the stlog.nsf or community logins by date to see how many users are still on the old server. Restarting the old servers periodically also forces users onto the new servers as soon as DNS is updated. Using a load balancer. If existing environment has a load balancer in front of it, then you can simply add the new servers behind the load balancer and shut down the old servers. Pushing a new hostname using Managed-Community-Configs.xml. You can create the managed-community-configs.xml file and push it to the users using a Sametime policy. The settings takes effect the next time a user restarts their client. It is configured for the new hostname. Have a back-out plan You must have a back-out plan in case your migration does not succeed. Parent topic: Migrating and Upgrading","title":"Planning for migration to Sametime 12 {#c_migration_planning .concept}"},{"location":"admin/c_migration_planning.html#c_migration_planning","text":"This section describes the best practices for planning migration from an earlier Sametime release. If the older Sametime deployment is not configured for LDAP, then the contact lists must be converted using the Stnamechange utility before migrating. The Stnamechange utility is currently unavailable on Sametime 12. Run the utility on Sametime 9, 10, or 11 before migrating.","title":"Planning for migration to Sametime 12"},{"location":"admin/c_migration_planning.html#section_wqy_grv_15b","text":"Sametime 12 does not support upgrades from an existing community or proxy server to Sametime 12. Sametime 12 is now containerized, and you have to deploy the new images and then migrate your users. If the new server is part of the same community as your existing servers, block port 1516 between the new server and existing server to prevent confusion while testing and validating new features. Prior to migrating, make sure port 1516 is open.","title":"Side-by-side migration"},{"location":"admin/c_migration_planning.html#section_ahy_55v_15b","text":"Note: Running the notes-migration tool moves your contact list to MongoDB. For more information on how to migrate your contacts, refer to Migrating from older Sametime versions . Prior to the migration, you must purge stale users from vpuserinfo.nsf. This step can be done manually with a Lotuscript agent, or by using the NameChange utility. Domino database maintenance should be performed after purging stale users. If the older Sametime deployment is not configured for LDAP, then the contact lists must be converted using the Stnamechange utility. The Stnamechange utility is currently unavailable on Sametime 12. Run the utility on Sametime 9, 10 or 11 before migrating.","title":"VPUSERINFO.NSF"},{"location":"admin/c_migration_planning.html#section_xvg_1xv_15b","text":"You can migrate your tuning settings for LDAP from the old server to the new server. Note the setting in the sametime.ini and add them to the Sametime 12 environment. ST_COMMUNITY_ID should match the old server. This step ensures the clients show awareness properly after migrating.","title":"SAMETIME.INI"},{"location":"admin/c_migration_planning.html#section_q5t_d1b_b5b","text":"Policies are configured in policies.user.xml. You must start your new server configuration with the policies.user.xml file that comes with the Sametime 12 install and manually configure, when needed. There are settings in the new server version that were not in the older versions of Sametime and in the deployment. If you are using managed-settings.xml or managed-community-conf.xml, be sure to include these files in the new Sametime 12 policies.","title":"Policies"},{"location":"admin/c_migration_planning.html#section_yl4_f1b_b5b","text":"Once you are finished testing and are ready to migrate the users, there are a few different strategies to choose from. Using the DNS. The hostname is the same, and there are no additional configurations on the client side. In this scenario, the DNS would be changed to point to the new environment. DNS may take some time to propagate throughout your network. You may need to leave both old and new servers running simultaneously for a period of time. Be certain the vpuserinfo.nsf has been migrated to the Sametime 12 deployment to keep the contacts up to date. You can check the stlog.nsf or community logins by date to see how many users are still on the old server. Restarting the old servers periodically also forces users onto the new servers as soon as DNS is updated. Using a load balancer. If existing environment has a load balancer in front of it, then you can simply add the new servers behind the load balancer and shut down the old servers. Pushing a new hostname using Managed-Community-Configs.xml. You can create the managed-community-configs.xml file and push it to the users using a Sametime policy. The settings takes effect the next time a user restarts their client. It is configured for the new hostname.","title":"Moving the users"},{"location":"admin/c_migration_planning.html#section_byy_31b_b5b","text":"You must have a back-out plan in case your migration does not succeed. Parent topic: Migrating and Upgrading","title":"Have a back-out plan"},{"location":"admin/c_mobile_file_transfer_policies.html","text":"Mobile file transfer policies By default, you can send files to other users and subsequently download the shared files. Edit the following policies to fit your business needs. Policy id = im.mobile.allowSendFiles, Default Setting: ON By default, you can upload files in a one-to-one chat. This policy only applies to the Choose from Files menu item in the chat window. Leave this setting on with Policy id = 1 to allow users to upload files in a one-to-one chat. Uploading files in a group chat will also require Policy id = im.allowTransferringFilesToNwayParticipants to be turned on. Note: Sending photos from either the camera or the photos app is controlled with Policy id = im.mobile.allowSendImages which is discussed below. Policy id = im.mobile.allowReceiveFiles, Default Setting: ON By default, downloaded files on mobile devices are stored outside of Sametime. Turn this setting off if you don't want files to be stored outside of the application. This policy covers the following download types. Files shared in a chat \u2014 Policy id = im.mobile.allowReceiveFiles must be turned on to allow files to be downloaded and subsequently saved outside of the application. Meeting recordings\u2014By default, you can stream the playback of a recording on Sametime. To allow the download and subsequent saving of a meeting recording. Policy id = im.mobile.allowReceiveFiles must be turned on. Meeting reports\u2014By default, reports can always be downloaded and viewed within Sametime. To allow reports to be saved outside of Sametime, Policy id = im.mobile.allowReceiveFiles must be turned on. Policy id = im.mobile.allowSendImages, Default Setting: ON This policy must be turned on to allow images from the device camera or photos app to be sent as inline images in a chat. It does not prevent image files such as PNG or JPG images from being sent through the Choose from Files menu. Note: Starting with Sametime 12.0, mobile clients no longer consider Policy 2009 when sending inline images. Policy id = im.mobile.allowShareChatImages, Default Setting: ON By default, you can share images from the chat. Turn this setting off to restrict users from sharing images from the chat. Parent topic: File transfer policies","title":"Mobile file transfer policies {#c_mobile_file_transfer_policies .concept}"},{"location":"admin/c_mobile_file_transfer_policies.html#c_mobile_file_transfer_policies","text":"By default, you can send files to other users and subsequently download the shared files. Edit the following policies to fit your business needs.","title":"Mobile file transfer policies"},{"location":"admin/c_mobile_file_transfer_policies.html#section_mpp_hdg_htb","text":"By default, you can upload files in a one-to-one chat. This policy only applies to the Choose from Files menu item in the chat window. Leave this setting on with Policy id = 1 to allow users to upload files in a one-to-one chat. Uploading files in a group chat will also require Policy id = im.allowTransferringFilesToNwayParticipants to be turned on. Note: Sending photos from either the camera or the photos app is controlled with Policy id = im.mobile.allowSendImages which is discussed below.","title":"Policy id = im.mobile.allowSendFiles, Default Setting: ON"},{"location":"admin/c_mobile_file_transfer_policies.html#section_ix3_jdg_htb","text":"By default, downloaded files on mobile devices are stored outside of Sametime. Turn this setting off if you don't want files to be stored outside of the application. This policy covers the following download types. Files shared in a chat \u2014 Policy id = im.mobile.allowReceiveFiles must be turned on to allow files to be downloaded and subsequently saved outside of the application. Meeting recordings\u2014By default, you can stream the playback of a recording on Sametime. To allow the download and subsequent saving of a meeting recording. Policy id = im.mobile.allowReceiveFiles must be turned on. Meeting reports\u2014By default, reports can always be downloaded and viewed within Sametime. To allow reports to be saved outside of Sametime, Policy id = im.mobile.allowReceiveFiles must be turned on.","title":"Policy id = im.mobile.allowReceiveFiles, Default Setting: ON"},{"location":"admin/c_mobile_file_transfer_policies.html#section_d4p_sdg_htb","text":"This policy must be turned on to allow images from the device camera or photos app to be sent as inline images in a chat. It does not prevent image files such as PNG or JPG images from being sent through the Choose from Files menu. Note: Starting with Sametime 12.0, mobile clients no longer consider Policy 2009 when sending inline images.","title":"Policy id = im.mobile.allowSendImages, Default Setting: ON"},{"location":"admin/c_mobile_file_transfer_policies.html#section_aks_wdg_htb","text":"By default, you can share images from the chat. Turn this setting off to restrict users from sharing images from the chat. Parent topic: File transfer policies","title":"Policy id = im.mobile.allowShareChatImages, Default Setting: ON"},{"location":"admin/c_mobile_self_certificates.html","text":"Enabling self-signed certificates By default, Sametime does not allow the use of self-signed certificates for mobile connections to the Sametime server. Due to security and compliance issues, users must first acknowledge the risks before being able to make any changes to this policy. Edit the following policy to fit your business needs. Policy id = im.mobile.disableUntrustedSsl, Default Setting: ON Turn this setting off to enable the use of self-signed certificates. This rule also applies to pre-production environments that use self-signed certificates. Parent topic: Security policies","title":"Enabling self-signed certificates {#c_mobile_self_certificates .concept}"},{"location":"admin/c_mobile_self_certificates.html#c_mobile_self_certificates","text":"By default, Sametime does not allow the use of self-signed certificates for mobile connections to the Sametime server. Due to security and compliance issues, users must first acknowledge the risks before being able to make any changes to this policy. Edit the following policy to fit your business needs.","title":"Enabling self-signed certificates"},{"location":"admin/c_mobile_self_certificates.html#section_end_lgg_htb","text":"Turn this setting off to enable the use of self-signed certificates. This rule also applies to pre-production environments that use self-signed certificates. Parent topic: Security policies","title":"Policy id = im.mobile.disableUntrustedSsl, Default Setting: ON"},{"location":"admin/c_mobileclient_policies.html","text":"Mobile client policies While many user policies are available in the Sametime ecosystem, only a subset of these policies apply to the mobile clients. This section describes the policies and configurations available to the said clients. General policies General policies apply to all clients. This section describes the unique response of the mobile client to these policies. File transfer policies Sametime allows users to download files through links in the chat. Mobile support has also been added for this new functionality. Security policies Every internet service that you use or provide poses risks to your system and the network to which it is connected. Your security policy defines what you protect. This section describes the security policies and configurations available to you. Parent topic: Managing policies","title":"Mobile client policies {#c_mobileclient_policies .concept}"},{"location":"admin/c_mobileclient_policies.html#c_mobileclient_policies","text":"While many user policies are available in the Sametime ecosystem, only a subset of these policies apply to the mobile clients. This section describes the policies and configurations available to the said clients. General policies General policies apply to all clients. This section describes the unique response of the mobile client to these policies. File transfer policies Sametime allows users to download files through links in the chat. Mobile support has also been added for this new functionality. Security policies Every internet service that you use or provide poses risks to your system and the network to which it is connected. Your security policy defines what you protect. This section describes the security policies and configurations available to you. Parent topic: Managing policies","title":"Mobile client policies"},{"location":"admin/c_planning_docker.html","text":"Planning for Docker Is Docker better than Kubernetes? Docker and Kubernetes have different goals and outcomes. The decision should depend on your end goal. Docker is about containerization; Kubernetes is about container orchestration. The Docker containers are the building blocks. A small deployment has the bare minimum number of containers to produce a solution that allows users to collaborate, but without scalability, load balancing, etc. If you are deploying for a small group and do not require scalability, Docker is a simple solution. Kubernetes builds on the base containers and allows them to auto scale; load balance across multiple physical or virtual hosts, even bringing up and tearing down new hosts to deal with load variance. Meetings are sized based on what is happening on the server at any given time. There are many variables including the CPU and memory size of the Docker instance. A large Docker instance can support up to 200 concurrent peak users, but that does not take into consideration how many of the meetings are being recorded. Meeting recordings are CPU intensive. A Docker instance is best suited for a small department or focused team than an enterprise size deployment. You can overcome these limitations through Kubernetes autoscaling. Autoscaling adds and removes nodes as needed based upon current usage and monitoring. Kubernetes is recommended if you are deploying Sametime meetings for your entire organization. For sizing and deployment related questions, contact HCL . Note: You can set up a basic, non-production Kubernetes cluster that can be used to host a non-production Sametime server. you can have a fixed number of recorders always running on that fixed number of nodes. What level of help does HCL technical support provide for Docker-related issues? Docker is a third-party products. HCL support is available to assist in configuration and support-related issues as it pertains to the Sametime product. If you require assistance with a full Docker deployment, reach out to HCL Services or one of our HCL Business Partners to inquire about professional services. How do I migrate from different versions of Docker when moving servers? When moving to a new server, redeploy Sametime Meetings as a new configuration. If the server hostname in the URL changes, you can push the new URL to the users using Managed Settings. Existing meeting URLs should work if the hostname remains the same. What is the maximum number of participants in a meeting? By default, there is a limit of 100 participants for every meeting. To reach a wider audience, you can start a live stream and share the link to all intended participants. How many concurrent users can Sametime support? This depends on the size of the deployment. For sizing and deployment related questions, contact HCL . What are the system requirements? The minimum requirements must be available to install the product successfully. For detail system requirements, see the System requirements article. Are the supported packages for Docker available on the HCL License and Delivery Portal? No, packages for Docker can be downloaded directly from your vendor. How do we backup and restore Docker? The backup and restore process is handled outside of Sametime. Consult with your Docker vendor for details. Parent topic: Platforms","title":"Planning for Docker {#c_planning_docker .concept}"},{"location":"admin/c_planning_docker.html#c_planning_docker","text":"","title":"Planning for Docker"},{"location":"admin/c_planning_docker.html#is-docker-better-than-kubernetes","text":"Docker and Kubernetes have different goals and outcomes. The decision should depend on your end goal. Docker is about containerization; Kubernetes is about container orchestration. The Docker containers are the building blocks. A small deployment has the bare minimum number of containers to produce a solution that allows users to collaborate, but without scalability, load balancing, etc. If you are deploying for a small group and do not require scalability, Docker is a simple solution. Kubernetes builds on the base containers and allows them to auto scale; load balance across multiple physical or virtual hosts, even bringing up and tearing down new hosts to deal with load variance. Meetings are sized based on what is happening on the server at any given time. There are many variables including the CPU and memory size of the Docker instance. A large Docker instance can support up to 200 concurrent peak users, but that does not take into consideration how many of the meetings are being recorded. Meeting recordings are CPU intensive. A Docker instance is best suited for a small department or focused team than an enterprise size deployment. You can overcome these limitations through Kubernetes autoscaling. Autoscaling adds and removes nodes as needed based upon current usage and monitoring. Kubernetes is recommended if you are deploying Sametime meetings for your entire organization. For sizing and deployment related questions, contact HCL . Note: You can set up a basic, non-production Kubernetes cluster that can be used to host a non-production Sametime server. you can have a fixed number of recorders always running on that fixed number of nodes.","title":"Is Docker better than Kubernetes?"},{"location":"admin/c_planning_docker.html#section_qbz_ysn_dtb","text":"Docker is a third-party products. HCL support is available to assist in configuration and support-related issues as it pertains to the Sametime product. If you require assistance with a full Docker deployment, reach out to HCL Services or one of our HCL Business Partners to inquire about professional services.","title":"What level of help does HCL technical support provide for Docker-related issues?"},{"location":"admin/c_planning_docker.html#how-do-i-migrate-from-different-versions-of-docker-when-moving-servers","text":"When moving to a new server, redeploy Sametime Meetings as a new configuration. If the server hostname in the URL changes, you can push the new URL to the users using Managed Settings. Existing meeting URLs should work if the hostname remains the same.","title":"How do I migrate from different versions of Docker when moving servers?"},{"location":"admin/c_planning_docker.html#what-is-the-maximum-number-of-participants-in-a-meeting","text":"By default, there is a limit of 100 participants for every meeting. To reach a wider audience, you can start a live stream and share the link to all intended participants.","title":"What is the maximum number of participants in a meeting?"},{"location":"admin/c_planning_docker.html#section_cx5_511_ftb","text":"This depends on the size of the deployment. For sizing and deployment related questions, contact HCL .","title":"How many concurrent users can Sametime support?"},{"location":"admin/c_planning_docker.html#section_fkj_yrr_2tb","text":"The minimum requirements must be available to install the product successfully. For detail system requirements, see the System requirements article.","title":"What are the system requirements?"},{"location":"admin/c_planning_docker.html#section_lr4_wb1_ftb","text":"No, packages for Docker can be downloaded directly from your vendor.","title":"Are the supported packages for Docker available on the HCL License and Delivery Portal?"},{"location":"admin/c_planning_docker.html#section_o5k_yb1_ftb","text":"The backup and restore process is handled outside of Sametime. Consult with your Docker vendor for details. Parent topic: Platforms","title":"How do we backup and restore Docker?"},{"location":"admin/c_planning_kubernetes.html","text":"Planning for Kubernetes If you are unfamiliar with these technologies, refer to Platforms . To learn more about Kubernetes, see An Overview of Kubernetes . Is Kubernetes better than Docker? Docker and Kubernetes have different goals and outcomes. The decision should depend on your end goal. Docker is about containerization; Kubernetes is about container orchestration. The Docker containers are the building blocks. A small deployment has the bare minimum number of containers to produce a solution that allows users to collaborate, but without scalability, load balancing, etc. If you are deploying for a small group and do not require scalability, Docker is a simple solution. Kubernetes builds on the base containers and allows them to auto scale; load balance across multiple physical or virtual hosts, even bringing up and tearing down new hosts to deal with load variance. Meetings are sized based on what is happening on the server at any given time. There are many variables including the size (CPU and Memory) of the Docker instance. A large Docker instance can support up to 200 concurrent peak users, but that does not take into consideration how many of the meetings are being recorded. Meeting recordings are CPU intensive. A Docker instance is best suited for a small department or focused team than an enterprise size deployment. You can overcome these limitations through Kubernetes autoscaling. Autoscaling adds and removes nodes as needed based upon current usage and monitoring. Kubernetes is recommended if you are deploying Sametime meetings for your entire organization. For sizing and deployment related questions, contact HCL . Can Sametime support high availability? High availability is supported for the front-end web traffic to the Kubernetes cluster. You can deploy multiple web front ends on different physical/virtual nodes pointing to the same back end in order to both distribute load and survive a node outage. High availability is not supported for active meetings. If a server hosting a meeting goes down, users in meetings on that server will be interrupted. There is a reconnection timer built into the client which will cause all the clients to re-connect and be distributed to another available node. In some circumstances, a server going down will result in the client thinking the meeting has ended. Users can quickly re-join the meeting from their \"recent meetings\" list and will be meeting again on an available server momentarily. What is the maximum number of participants in a meeting? By default, there is a limit of 100 participants for every meeting. To reach a wider audience, you can start a live stream and share the link to all intended participants. How many concurrent users can Sametime support? This depends on the size of the deployment. For sizing and deployment related questions, contact HCL . What level of help does HCL technical support provide for Kubernetes-related issues? Kubernetes is a third-party products. HCL support is available to assist in configuration and support-related issues as it pertains to the Sametime product. If you require assistance with a full Kubernetes deployment, reach out to HCL Services or one of our HCL Business Partners to inquire about professional services. Are the supported packages for Kubernetes available on the HCL License and Delivery Portal? No, packages for Kubernetes can be downloaded directly from your vendor. How do we backup and restore Kubernetes? The backup and restore process is handled outside of Sametime. Consult with your Docker vendor for details. Is clustering automatic for Kubernetes? Yes, but there is additional configuration required in a Kubernetes environment. Can I deploy Sametime Meetings in a Kubernetes Cloud? Yes. For more information, refer to deploying Sametime Meetings in Amazon's AWS Elastic Kubernetes Services . The examples in this knowledge article is based on version 11.5 guide and are not the exact steps for version 12. For version 12, the cluster.yaml file is found in the location of the Sametime 12 installation directory under /kubernetes/stack/eks/cluster.yaml. For additional information, see https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0099614 . Parent topic: Platforms","title":"Planning for Kubernetes {#c_planning_kubernetes .concept}"},{"location":"admin/c_planning_kubernetes.html#c_planning_kubernetes","text":"If you are unfamiliar with these technologies, refer to Platforms . To learn more about Kubernetes, see An Overview of Kubernetes .","title":"Planning for Kubernetes"},{"location":"admin/c_planning_kubernetes.html#section_erh_cgy_2tb","text":"Docker and Kubernetes have different goals and outcomes. The decision should depend on your end goal. Docker is about containerization; Kubernetes is about container orchestration. The Docker containers are the building blocks. A small deployment has the bare minimum number of containers to produce a solution that allows users to collaborate, but without scalability, load balancing, etc. If you are deploying for a small group and do not require scalability, Docker is a simple solution. Kubernetes builds on the base containers and allows them to auto scale; load balance across multiple physical or virtual hosts, even bringing up and tearing down new hosts to deal with load variance. Meetings are sized based on what is happening on the server at any given time. There are many variables including the size (CPU and Memory) of the Docker instance. A large Docker instance can support up to 200 concurrent peak users, but that does not take into consideration how many of the meetings are being recorded. Meeting recordings are CPU intensive. A Docker instance is best suited for a small department or focused team than an enterprise size deployment. You can overcome these limitations through Kubernetes autoscaling. Autoscaling adds and removes nodes as needed based upon current usage and monitoring. Kubernetes is recommended if you are deploying Sametime meetings for your entire organization. For sizing and deployment related questions, contact HCL .","title":"Is Kubernetes better than Docker?"},{"location":"admin/c_planning_kubernetes.html#section_hqt_xvz_2tb","text":"High availability is supported for the front-end web traffic to the Kubernetes cluster. You can deploy multiple web front ends on different physical/virtual nodes pointing to the same back end in order to both distribute load and survive a node outage. High availability is not supported for active meetings. If a server hosting a meeting goes down, users in meetings on that server will be interrupted. There is a reconnection timer built into the client which will cause all the clients to re-connect and be distributed to another available node. In some circumstances, a server going down will result in the client thinking the meeting has ended. Users can quickly re-join the meeting from their \"recent meetings\" list and will be meeting again on an available server momentarily.","title":"Can Sametime support high availability?"},{"location":"admin/c_planning_kubernetes.html#section_mf4_1wz_2tb","text":"By default, there is a limit of 100 participants for every meeting. To reach a wider audience, you can start a live stream and share the link to all intended participants.","title":"What is the maximum number of participants in a meeting?"},{"location":"admin/c_planning_kubernetes.html#section_cx5_511_ftb","text":"This depends on the size of the deployment. For sizing and deployment related questions, contact HCL .","title":"How many concurrent users can Sametime support?"},{"location":"admin/c_planning_kubernetes.html#what-level-of-help-does-hcl-technical-support-provide-for-kubernetes-related-issues","text":"Kubernetes is a third-party products. HCL support is available to assist in configuration and support-related issues as it pertains to the Sametime product. If you require assistance with a full Kubernetes deployment, reach out to HCL Services or one of our HCL Business Partners to inquire about professional services.","title":"What level of help does HCL technical support provide for Kubernetes-related issues?"},{"location":"admin/c_planning_kubernetes.html#section_jpf_y11_ftb","text":"No, packages for Kubernetes can be downloaded directly from your vendor.","title":"Are the supported packages for Kubernetes available on the HCL License and Delivery Portal?"},{"location":"admin/c_planning_kubernetes.html#section_rvv_hw1_ftb","text":"The backup and restore process is handled outside of Sametime. Consult with your Docker vendor for details.","title":"How do we backup and restore Kubernetes?"},{"location":"admin/c_planning_kubernetes.html#section_psr_4w1_ftb","text":"Yes, but there is additional configuration required in a Kubernetes environment.","title":"Is clustering automatic for Kubernetes?"},{"location":"admin/c_planning_kubernetes.html#section_azv_pw1_ftb","text":"Yes. For more information, refer to deploying Sametime Meetings in Amazon's AWS Elastic Kubernetes Services . The examples in this knowledge article is based on version 11.5 guide and are not the exact steps for version 12. For version 12, the cluster.yaml file is found in the location of the Sametime 12 installation directory under /kubernetes/stack/eks/cluster.yaml. For additional information, see https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0099614 . Parent topic: Platforms","title":"Can I deploy Sametime Meetings in a Kubernetes Cloud?"},{"location":"admin/c_planning_platforms.html","text":"Platforms Planning for Docker Planning for Kubernetes Parent topic: Planning","title":"Platforms {#c_planning_platforms .concept}"},{"location":"admin/c_planning_platforms.html#c_planning_platforms","text":"Planning for Docker Planning for Kubernetes Parent topic: Planning","title":"Platforms"},{"location":"admin/c_planning_prereqs.html","text":"Prerequistes Before you being the install process, ensure that your environment includes all prerequistes and system requirements. System requirements System requirements includes the minimum HCL Sametime and HCL Sametime Premimum requirements, such as: operating systems, hardware, software, and more. MongoDB MongoDB is used to store data for persistent chat, mobile push notifications, meetings and contact lists. LDAP An LDAP directory is needed for Sametime user authentication. The LDAP server must be running before deploying Sametime. Parent topic: Planning","title":"Prerequistes"},{"location":"admin/c_planning_prereqs.html#c_planning_prereqs","text":"Before you being the install process, ensure that your environment includes all prerequistes and system requirements. System requirements System requirements includes the minimum HCL Sametime and HCL Sametime Premimum requirements, such as: operating systems, hardware, software, and more. MongoDB MongoDB is used to store data for persistent chat, mobile push notifications, meetings and contact lists. LDAP An LDAP directory is needed for Sametime user authentication. The LDAP server must be running before deploying Sametime. Parent topic: Planning","title":"Prerequistes"},{"location":"admin/c_prohibit_mobile_client.html","text":"Managing mobile client connections As an administrator, you can manage the use of the mobile clients if the connection poses risks to your system and the network to which it is connected. Edit the following policy to fit your business needs. Policy id = im.2010 (allow mobile client), Default Setting: ON By default, you can access and use Sametime from any mobile device. Turn this setting off to disable this feature. Parent topic: Security policies","title":"Managing mobile client connections {#c_prohibit_mobile_client .concept}"},{"location":"admin/c_prohibit_mobile_client.html#c_prohibit_mobile_client","text":"As an administrator, you can manage the use of the mobile clients if the connection poses risks to your system and the network to which it is connected. Edit the following policy to fit your business needs.","title":"Managing mobile client connections"},{"location":"admin/c_prohibit_mobile_client.html#section_ksm_jvw_3tb","text":"By default, you can access and use Sametime from any mobile device. Turn this setting off to disable this feature. Parent topic: Security policies","title":"Policy id = im.2010 (allow mobile client), Default Setting: ON"},{"location":"admin/c_requiring_password_entry.html","text":"Requiring password entry at login As an administrator, you can select the type of authentication scheme employed on your environment. Edit the following policy to fit your business needs. Policy id = im.mobile.disablePasswordSave, Default Setting: OFF To save your password for the next login, retain the default setting of this policy and enable Remember Password from the community settings. Turn this setting on to require users to enter their password at every login. When turned on, the client removes the password regardless if Remember Password is enabled. This policy also applies to meeting passwords. For safety reasons, Apple restricts users from texting while driving. The ability to save meeting passwords allows CarPlay users to safely enter meeting rooms while driving. When turned off, the Save Password switch is displayed on the password entry dialog when joining password-protected meetings. When turned on, the Save Password switch is disabled. In the event that a password has been saved prior to changing the default settings, then the password is stored in a secure storage. Note: This policy does not apply to the login password for environments that use the SAML-based authentication scheme. However, this policy still applies to meeting passwords in these environments. Parent topic: Security policies","title":"Requiring password entry at login {#c_requiring_password_entry .concept}"},{"location":"admin/c_requiring_password_entry.html#c_requiring_password_entry","text":"As an administrator, you can select the type of authentication scheme employed on your environment. Edit the following policy to fit your business needs.","title":"Requiring password entry at login"},{"location":"admin/c_requiring_password_entry.html#section_bv3_jym_htb","text":"To save your password for the next login, retain the default setting of this policy and enable Remember Password from the community settings. Turn this setting on to require users to enter their password at every login. When turned on, the client removes the password regardless if Remember Password is enabled. This policy also applies to meeting passwords. For safety reasons, Apple restricts users from texting while driving. The ability to save meeting passwords allows CarPlay users to safely enter meeting rooms while driving. When turned off, the Save Password switch is displayed on the password entry dialog when joining password-protected meetings. When turned on, the Save Password switch is disabled. In the event that a password has been saved prior to changing the default settings, then the password is stored in a secure storage. Note: This policy does not apply to the login password for environments that use the SAML-based authentication scheme. However, this policy still applies to meeting passwords in these environments. Parent topic: Security policies","title":"Policy id = im.mobile.disablePasswordSave, Default Setting: OFF"},{"location":"admin/c_restrict_copy_paste.html","text":"Copying and pasting of chat content to external applications Depending on your organization's security policy, you can restrict users from copying chat content to the clipboard and sharing outside of the application. Edit the following policy to fit your business needs. Policy id = im.mobile.restrictClipboard, Default Setting: ON By default, Sametime restricts users from copying chat content to the clipboard and then sharing outside of the application. Meetings URLs and recording links are not affected by this policy. Users are always allowed to copy and paste chat content within Sametime. Turn this setting off to allow users to share chat content outside the application. Parent topic: Security policies","title":"Copying and pasting of chat content to external applications {#c_restrict_copy_paste .concept}"},{"location":"admin/c_restrict_copy_paste.html#c_restrict_copy_paste","text":"Depending on your organization's security policy, you can restrict users from copying chat content to the clipboard and sharing outside of the application. Edit the following policy to fit your business needs.","title":"Copying and pasting of chat content to external applications"},{"location":"admin/c_restrict_copy_paste.html#section_g5h_qym_htb","text":"By default, Sametime restricts users from copying chat content to the clipboard and then sharing outside of the application. Meetings URLs and recording links are not affected by this policy. Users are always allowed to copy and paste chat content within Sametime. Turn this setting off to allow users to share chat content outside the application. Parent topic: Security policies","title":"Policy id = im.mobile.restrictClipboard, Default Setting: ON"},{"location":"admin/c_save_contacts.html","text":"Exporting and saving contacts on your mobile device As an administrator, you can control how your contact list is managed. Edit the following policy to fit your business needs. Policy id = im.mobile.allowContactExport, Default Setting: ON By default, Sametime for Android users can export their contacts to their local contact database. Turn this setting off to disable the export feature. Note: This policy does not apply to Sametime for iOS. Due to security and compliance reasons, Sametime for iOS users can only save a contact's phone number or email address, and not the entire contact. Parent topic: Security policies","title":"Exporting and saving contacts on your mobile device {#c_save_contacts .concept}"},{"location":"admin/c_save_contacts.html#c_save_contacts","text":"As an administrator, you can control how your contact list is managed. Edit the following policy to fit your business needs.","title":"Exporting and saving contacts on your mobile device"},{"location":"admin/c_save_contacts.html#section_rrk_stw_3tb","text":"By default, Sametime for Android users can export their contacts to their local contact database. Turn this setting off to disable the export feature. Note: This policy does not apply to Sametime for iOS. Due to security and compliance reasons, Sametime for iOS users can only save a contact's phone number or email address, and not the entire contact. Parent topic: Security policies","title":"Policy id = im.mobile.allowContactExport, Default Setting: ON"},{"location":"admin/c_security_policies.html","text":"Security policies Every internet service that you use or provide poses risks to your system and the network to which it is connected. Your security policy defines what you protect. This section describes the security policies and configurations available to you. Generating link previews on chat By default, Sametime automatically generates link previews for messages containing links to websites. Edit this policy to fit your business needs. Enabling self-signed certificates By default, Sametime does not allow the use of self-signed certificates for mobile connections to the Sametime server. Due to security and compliance issues, users must first acknowledge the risks before being able to make any changes to this policy. Edit the following policy to fit your business needs. Requiring password entry at login As an administrator, you can select the type of authentication scheme employed on your environment. Edit the following policy to fit your business needs. Copying and pasting of chat content to external applications Depending on your organization's security policy, you can restrict users from copying chat content to the clipboard and sharing outside of the application. Edit the following policy to fit your business needs. Exporting and saving contacts on your mobile device As an administrator, you can control how your contact list is managed. Edit the following policy to fit your business needs. Managing mobile client connections As an administrator, you can manage the use of the mobile clients if the connection poses risks to your system and the network to which it is connected. Edit the following policy to fit your business needs. Parent topic: Mobile client policies","title":"Security policies {#c_security_policies .concept}"},{"location":"admin/c_security_policies.html#c_security_policies","text":"Every internet service that you use or provide poses risks to your system and the network to which it is connected. Your security policy defines what you protect. This section describes the security policies and configurations available to you. Generating link previews on chat By default, Sametime automatically generates link previews for messages containing links to websites. Edit this policy to fit your business needs. Enabling self-signed certificates By default, Sametime does not allow the use of self-signed certificates for mobile connections to the Sametime server. Due to security and compliance issues, users must first acknowledge the risks before being able to make any changes to this policy. Edit the following policy to fit your business needs. Requiring password entry at login As an administrator, you can select the type of authentication scheme employed on your environment. Edit the following policy to fit your business needs. Copying and pasting of chat content to external applications Depending on your organization's security policy, you can restrict users from copying chat content to the clipboard and sharing outside of the application. Edit the following policy to fit your business needs. Exporting and saving contacts on your mobile device As an administrator, you can control how your contact list is managed. Edit the following policy to fit your business needs. Managing mobile client connections As an administrator, you can manage the use of the mobile clients if the connection poses risks to your system and the network to which it is connected. Edit the following policy to fit your business needs. Parent topic: Mobile client policies","title":"Security policies"},{"location":"admin/changing_user_policy.html","text":"Changing a user policy\u2019s weight Each Sametime policy has a weight assigned to it. The weight should be unique. When assigning a weight to a policy, please ensure the weight is unique on each policy and not duplicated. By default, users will get the policy with the highest weight. For example, if no changes are made to the default configuration, the default policy has a weight of 1, and the anonymous policy has a weight of 0. If a user were to login, they would receive the default policy with weight of 1. For more information on how Sametime handles finding more than one policy for a user, please see the topic Policy Behaviors . Note: Do not change the weight on the default or anonymous policies. Open the policies.user.xml file with a text or XML editor. Ensure you are in the correct policy inside the file. Look for the line that begins with policy id=\u201dYourCustomPolicy\u201d . Where \u201cYourCustomPolicy\u201d is the name of the policy you wish to modify. Change the weight to the desired weight number. The higher the weight, the higher the precedence. For example, if you have created a new Instant Messaging policy called \u201cMarketing\u201d and want to assign a policy weight, of 2, then the syntax is: <policy id=\"im.Marketing.policy\" weight=\"2\"> Parent topic: Managing policies","title":"Changing a user policy\u2019s weight {#changing_user_policy .task}"},{"location":"admin/changing_user_policy.html#changing_user_policy","text":"Each Sametime policy has a weight assigned to it. The weight should be unique. When assigning a weight to a policy, please ensure the weight is unique on each policy and not duplicated. By default, users will get the policy with the highest weight. For example, if no changes are made to the default configuration, the default policy has a weight of 1, and the anonymous policy has a weight of 0. If a user were to login, they would receive the default policy with weight of 1. For more information on how Sametime handles finding more than one policy for a user, please see the topic Policy Behaviors . Note: Do not change the weight on the default or anonymous policies. Open the policies.user.xml file with a text or XML editor. Ensure you are in the correct policy inside the file. Look for the line that begins with policy id=\u201dYourCustomPolicy\u201d . Where \u201cYourCustomPolicy\u201d is the name of the policy you wish to modify. Change the weight to the desired weight number. The higher the weight, the higher the precedence. For example, if you have created a new Instant Messaging policy called \u201cMarketing\u201d and want to assign a policy weight, of 2, then the syntax is: <policy id=\"im.Marketing.policy\" weight=\"2\"> Parent topic: Managing policies","title":"Changing a user policy\u2019s weight"},{"location":"admin/chat_configuring.html","text":"Chat This section contains Chat configuration considerations. Configuring the sametime.ini file There are many configuration options in Sametime to override the default behaviors. Server configuration options are in the sametime.ini file. Parent topic: Configuring","title":"Chat {#chat_configuring .concept}"},{"location":"admin/chat_configuring.html#chat_configuring","text":"This section contains Chat configuration considerations. Configuring the sametime.ini file There are many configuration options in Sametime to override the default behaviors. Server configuration options are in the sametime.ini file. Parent topic: Configuring","title":"Chat"},{"location":"admin/chat_configuring_sametimeini.html","text":"Configuring the sametime.ini file There are many configuration options in Sametime to override the default behaviors. Server configuration options are in the sametime.ini file. The sametime.ini file is part of the community pod. Most of the parameters within the file pertain to community related services such as interactions with LDAP, SAML, authentication, Connect client, chat, security, and more. Care must be taken if you change this file. In previous Sametime versions, updating the file was not Note that in Sametime 12, the defaults for many parameters changed, and overriding them should be done with caution. If you have any questions about previous server tuning from an older release, contact HCL Support for guidance. The setting prefix STI followed by two underscores, followed by the section name, then a two underscores, then the parameter and the value. For example, to add a setting called ST_COMMUNITY_ID to the [Config] section, the new parameter format is STI__Config__ST_COMMUNITY_ID. The value is different with Kubernetes and Docker. For Docker, simply use the = sign and set the value. For example: STI__Config__ST_COMMUNITY_ID=sametime For Kubernetes, the value is a keypair in the values.yaml and the value is set in quotes. For example: STI__Config__ST_COMMUNITY_ID: \"sametime\" If you need to modify a sametime.ini setting, follow the guidance in the topic for your deployment on Docker or Kubernetes. Format The sametime.ini file is a sectioned configuration file. Sections are noted with square brackets, for example: [Config] . The parameters used in the sametime.ini file are valid only when placed within the correct section. Other considerations when working with the file include: Do not duplicate section names or parameters. Use only characters allowed within an XML file. Parameters are specified as a parameter and value pair. The format is different for Docker and Kubernetes. Docker : parameter=value Kubernetes : parameter:value These settings are documented throughout the help center as well as in the HCL support portal in knowledge articles. The various documentation may have the older (before Sametime 12) notation of the sametime.ini settings with the section name listed separately. Configuring the sametime.ini file on Docker Configuring the sametime.ini file on Kubernetes Parent topic: Chat","title":"Configuring the sametime.ini file {#chat_config_sametimeini .concept}"},{"location":"admin/chat_configuring_sametimeini.html#chat_config_sametimeini","text":"There are many configuration options in Sametime to override the default behaviors. Server configuration options are in the sametime.ini file. The sametime.ini file is part of the community pod. Most of the parameters within the file pertain to community related services such as interactions with LDAP, SAML, authentication, Connect client, chat, security, and more. Care must be taken if you change this file. In previous Sametime versions, updating the file was not Note that in Sametime 12, the defaults for many parameters changed, and overriding them should be done with caution. If you have any questions about previous server tuning from an older release, contact HCL Support for guidance. The setting prefix STI followed by two underscores, followed by the section name, then a two underscores, then the parameter and the value. For example, to add a setting called ST_COMMUNITY_ID to the [Config] section, the new parameter format is STI__Config__ST_COMMUNITY_ID. The value is different with Kubernetes and Docker. For Docker, simply use the = sign and set the value. For example: STI__Config__ST_COMMUNITY_ID=sametime For Kubernetes, the value is a keypair in the values.yaml and the value is set in quotes. For example: STI__Config__ST_COMMUNITY_ID: \"sametime\" If you need to modify a sametime.ini setting, follow the guidance in the topic for your deployment on Docker or Kubernetes.","title":"Configuring the sametime.ini file"},{"location":"admin/chat_configuring_sametimeini.html#format","text":"The sametime.ini file is a sectioned configuration file. Sections are noted with square brackets, for example: [Config] . The parameters used in the sametime.ini file are valid only when placed within the correct section. Other considerations when working with the file include: Do not duplicate section names or parameters. Use only characters allowed within an XML file. Parameters are specified as a parameter and value pair. The format is different for Docker and Kubernetes. Docker : parameter=value Kubernetes : parameter:value These settings are documented throughout the help center as well as in the HCL support portal in knowledge articles. The various documentation may have the older (before Sametime 12) notation of the sametime.ini settings with the section name listed separately. Configuring the sametime.ini file on Docker Configuring the sametime.ini file on Kubernetes Parent topic: Chat","title":"Format"},{"location":"admin/chat_configuring_sametimeini_docker.html","text":"Configuring the sametime.ini file on Docker Determine the setting format by reviewing the topic \u201cConfiguring the sametime.ini file\u201d Open the custom.env file for editing. Insert the sametime.ini parameters. Save and close the custom.env file. Follow the steps in Applying configuration changes in Docker Parent topic: Configuring the sametime.ini file","title":"Configuring the sametime.ini file on Docker {#chat_config_sametimeini_docker .task}"},{"location":"admin/chat_configuring_sametimeini_docker.html#chat_config_sametimeini_docker","text":"Determine the setting format by reviewing the topic \u201cConfiguring the sametime.ini file\u201d Open the custom.env file for editing. Insert the sametime.ini parameters. Save and close the custom.env file. Follow the steps in Applying configuration changes in Docker Parent topic: Configuring the sametime.ini file","title":"Configuring the sametime.ini file on Docker"},{"location":"admin/chat_configuring_sametimeini_kubernetes.html","text":"Configuring the sametime.ini file on Kubernetes Determine the setting format by reviewing the topic \u201cConfiguring the sametime.ini file\u201d If enabling community server debug, do not use this procedure. Follow the procedure documented in Enabling Community trace in Kubernetes . Note: Use caution when modifying the values.yaml file, indentation is important and should be done using spaces only. Change directories to helm. Open the values.yaml file for editing. Locate the setting \u201csametimeIni: {}\u201d.. Remove the hashtag comment on the example and use it as a guide for indentation on your settings. When setting the value, the parameter should end with a : and the value should be defined in double-quotes. After adding the desired changes you can comment out the example setting or remove i After adding desired parameters, save and close the values.yaml. Complete the steps Applying configuration changes in Kubernetes for the changes to take effect. Parent topic: Configuring the sametime.ini file","title":"Configuring the sametime.ini file on Kubernetes {#chat_config_sametimeini_kubernetes .task}"},{"location":"admin/chat_configuring_sametimeini_kubernetes.html#chat_config_sametimeini_kubernetes","text":"Determine the setting format by reviewing the topic \u201cConfiguring the sametime.ini file\u201d If enabling community server debug, do not use this procedure. Follow the procedure documented in Enabling Community trace in Kubernetes . Note: Use caution when modifying the values.yaml file, indentation is important and should be done using spaces only. Change directories to helm. Open the values.yaml file for editing. Locate the setting \u201csametimeIni: {}\u201d.. Remove the hashtag comment on the example and use it as a guide for indentation on your settings. When setting the value, the parameter should end with a : and the value should be defined in double-quotes. After adding the desired changes you can comment out the example setting or remove i After adding desired parameters, save and close the values.yaml. Complete the steps Applying configuration changes in Kubernetes for the changes to take effect. Parent topic: Configuring the sametime.ini file","title":"Configuring the sametime.ini file on Kubernetes"},{"location":"admin/cluster_highavailability.html","text":"Clustering and high availability High availability and high capacity configuration for Sametime is achieved in different ways depending on which component is being configured for HA. See the topics below to learn more about chat, meetings and MongoDB. Configure high capacity for chat Configure high capacity for meetings High availability is supported for the front-end web traffic to the Kubernetes cluster. You can deploy multiple front-ends on different physical and virtual nodes pointing to the same back-end in order to distribute load and survive a node outage. Configuring MongoDB for high availability Parent topic: Planning","title":"Clustering and high availability {#cluster_highavailability .concept}"},{"location":"admin/cluster_highavailability.html#cluster_highavailability","text":"High availability and high capacity configuration for Sametime is achieved in different ways depending on which component is being configured for HA. See the topics below to learn more about chat, meetings and MongoDB. Configure high capacity for chat Configure high capacity for meetings High availability is supported for the front-end web traffic to the Kubernetes cluster. You can deploy multiple front-ends on different physical and virtual nodes pointing to the same back-end in order to distribute load and survive a node outage. Configuring MongoDB for high availability Parent topic: Planning","title":"Clustering and high availability"},{"location":"admin/community_provisioning.html","text":"Creating a community provisioning URL for mobile users This section describes how to create a provisioning URL that automatically creates an HCL Sametime\u00ae community definition on mobile devices running Google Android or Apple iOS, so users can easily connect to Sametime. A mobile user cannot connect to the Sametime Proxy Server without a special mobile community definition that provides details needed for the connection. Creating the mobile community is often frustrating for users because they do not have ready access to required information such as the Sametime Proxy Server's hostname and port. A provisioning URL for the mobile community makes it easy for users to connect to Sametime from their mobile devices after installing the client. To connect to Sametime, the user simply taps the provisioning link or scans the associated QR code, and then: If the user is logged in to Sametime, an alert explains that the user must log out of Sametime to use the link, and then resumes the previous session so the user can log out and try again. If the user already belongs to a community with the same configurations (server, port, and user name) an alert prompts the user to confirm that the existing community definition should be updated. When the user confirms the update, the new settings are applied. If the user does not already belong to the community associated with the configuration, Sametime displays the Add Community panel with fields filled in with information from the URL. The user verifies and saves the information. You can format the URL as a link or as a QR code, and distribute it in email or post it on a website. The provisioned URL is supported on the following mobile operating systems: Google Android 6 or later. Apple iOS 13 or later. Note: Starting with HCL Sametime version 11, the browser client will display a QR code that can be used to configure the HCL Sametime client for Android or iOS. Once logged into the browser client, open Settings and then Configure Mobile Client. The QR code displayed will represent a secure community configuration for the Sametime proxy server and port that the browser is connected to. The QR code will also include the users\u2019 ID and a default community name of Sametime. The user will only need to follow the instructions to scan the code and enter their password before connecting with a mobile device. If you wish to use a different community name or perhaps the mobile clients need to connect through an authenticating proxy, the administrator can create a custom provisioning URL using the information contained in this article and then configure the Sametime proxy to display the QR code for the custom provisioning URL rather than the default one mentioned above. Procedure to create the custom provisioning URL Create and distribute a custom provisioning URL by completing the following steps: Create the URL by defining its components: The URL is formatted as shown: hclsametime://st_user@stproxy_host:port/?action=AddCommunity&communityName=community_name where: hclsametime:// is a required prefix to ensure that the URL is recognized and processed correctly. st_user the user name, or login ID, of a particular Sametime user; for example, myid@mycompany.com If you are sending or posting a URL for use by multiple people, you will probably not want to code a specific user's ID into the URL because other users may find that confusing. Instead, you can supply a variable or a partial user name and instruct users to modify the URL with the completed user name on their own devices, or you can omit the user name entirely so that each user is prompted for credentials when logging in to Sametime. If you want users to be able to simply click a link or QR code to use the URL, you should omit the user name and allow the user to provide credentials at login. Note: In addition, you can optionally instruct users to include the associated password in the URL with the following syntax: st_user:st_password ; however, this is not a good practice because the password could potentially be consumed by an untrusted app. stproxy_host is the fully qualified host name of the Sametime Proxy Server; for example: stproxy.example.com . port is the port that the Sametime Proxy Server is listening on. If omitted, 443 will be used. ?action=AddCommunity is a required parameter that ensures the information within the URL is added to the mobile client as a community definition. &communityName=*community\\_name* is an optional URL-encoded string that provides a name for the new community. If you do not specify a name with this parameter, a default name will be created based on the Sametime Proxy Server's host name. The table below provides the complete list of parameters that you can include in the URL and indicates whether each parameter is required. Name Value Description action AddCommunity Required. This string identifies the URL as an auto-provisioning operation. communityName URL-encoded string Optional: A user-friendly nickname for the newly created community. If you do not specify a name with this parameter, a default name will be created based on the Sametime Proxy Server's host name. savePassword true or false Optional: Indicates whether passwords are remembered for this connection. Applies to both Sametime and authenticating proxy passwords. The default value is false. authProxyEnabled true or false Optional: Indicates whether the connection requires authentication with a reverse-proxy server. The default value is false. If this parameter is omitted but authenticating proxy credentials are supplied, Sametime behaves if this parameter is set to true. authProxyReuseCredentials true Optional, but if you include this parameter, you must set it to true. Indicates whether reverse-proxy authentication will use the Sametime user ID and password provided earlier in the URL authProxyUser URL-encoded user ID value Optional: User ID value to use for reverse proxy authentication. If present, proxy authentication is assumed to be enabled. Users can input proxy passwords separately before login. allowUntrustedSSL true or false Optional: Determines whether untrusted SSL is allowed for this connection. The default and recommended values are false . When this option is enabled, Sametime allows connections over untrusted channels and you risk exposure of your data to attackers attempting to steal your information. Examples: Encrypted (SSL) direct connection to server stproxyserver.example.com on default port 443 with no user-specified but the community name is specified as \"Sametime Server\" : hclsametime://stproxyserver.example.com/?action=AddCommunity&communityName=Sametime%20Server To preserve correct URL syntax, the space in \"Sametime Server\" is represented with %20 . Encrypted (SSL) direct connection to server stproxyserver.example.com on port 9080 for user dmisawa: hclsametime://dmisawa@stproxyserver.example.com:9080/?action=AddCommunity If the user name itself contains the @ symbol you will need to format it as the URL-encoded character %40 to preserve correct syntax, as in dmisawa%40auto_sales@stproxyserver.example.com:9080 Encrypted (SSL) authenticating proxy connection to safelinx.example.com on default port 443 reusing authenticating proxy credentials and supplying a variable for the user name, which each user must replace with their own ID: hclsametime://Your_Sametime_ID@safelinx.example.com/?action=AddCommunity&authProxyReuseCredentials=true In this case both the auth proxy user ID and the sametime user ID would be set to Your_Sametime_ID. Encrypted (SSL) authenticating proxy connection to safelinx.example.com on port 8881 reusing credentials, with no credentials specified so that each user will be prompted for credentials when logging into Sametime: hclsametime://safelinx.example.com:8881/?action=AddCommunity&authProxyEnabled=true Distribute the URL to mobile users: Format the URL as a link or use a third-party application to generate a scannable QR code. Post the link or QR code to a website, or distribute to users it by email. Configure the Sametime proxy to display the QR code for your custom provisioning URL using the browser clients Configure Mobile Client feature. Configuring the Sametime Proxy server to use the custom provisioning URL Before updating the stproxyconfig.xml, examine the URL. URL encode any ampersands or spaces. For example, if the URL. hclsametime://stproxyserver.example.com/?action=AddCommunity&communityName=Sametime%20Server The ampersand character is replaced with %26. hclsametime://stproxyserver.example.com/?action=AddCommunity%26communityName=Sametime%20Server Use a text or XML editor to open the stproxyconfig.xml file, located in the sametimeproxy\\conf\\stproxyconfig.xml directory. Add a <mobile> section if it doesn't exist with <configUrl> providing the provisioning URL as shown in the following example. <mobile> <configUrl>CUSTOM_PROVISIONING_URL</configUrl> </mobile> Save and close the file Restart the Sametime Proxy server to enable. Parent topic: Sametime client configuration options","title":"Creating a community provisioning URL for mobile users {#community_provisioning .task}"},{"location":"admin/community_provisioning.html#community_provisioning","text":"This section describes how to create a provisioning URL that automatically creates an HCL Sametime\u00ae community definition on mobile devices running Google Android or Apple iOS, so users can easily connect to Sametime. A mobile user cannot connect to the Sametime Proxy Server without a special mobile community definition that provides details needed for the connection. Creating the mobile community is often frustrating for users because they do not have ready access to required information such as the Sametime Proxy Server's hostname and port. A provisioning URL for the mobile community makes it easy for users to connect to Sametime from their mobile devices after installing the client. To connect to Sametime, the user simply taps the provisioning link or scans the associated QR code, and then: If the user is logged in to Sametime, an alert explains that the user must log out of Sametime to use the link, and then resumes the previous session so the user can log out and try again. If the user already belongs to a community with the same configurations (server, port, and user name) an alert prompts the user to confirm that the existing community definition should be updated. When the user confirms the update, the new settings are applied. If the user does not already belong to the community associated with the configuration, Sametime displays the Add Community panel with fields filled in with information from the URL. The user verifies and saves the information. You can format the URL as a link or as a QR code, and distribute it in email or post it on a website. The provisioned URL is supported on the following mobile operating systems: Google Android 6 or later. Apple iOS 13 or later. Note: Starting with HCL Sametime version 11, the browser client will display a QR code that can be used to configure the HCL Sametime client for Android or iOS. Once logged into the browser client, open Settings and then Configure Mobile Client. The QR code displayed will represent a secure community configuration for the Sametime proxy server and port that the browser is connected to. The QR code will also include the users\u2019 ID and a default community name of Sametime. The user will only need to follow the instructions to scan the code and enter their password before connecting with a mobile device. If you wish to use a different community name or perhaps the mobile clients need to connect through an authenticating proxy, the administrator can create a custom provisioning URL using the information contained in this article and then configure the Sametime proxy to display the QR code for the custom provisioning URL rather than the default one mentioned above. Procedure to create the custom provisioning URL Create and distribute a custom provisioning URL by completing the following steps: Create the URL by defining its components: The URL is formatted as shown: hclsametime://st_user@stproxy_host:port/?action=AddCommunity&communityName=community_name where: hclsametime:// is a required prefix to ensure that the URL is recognized and processed correctly. st_user the user name, or login ID, of a particular Sametime user; for example, myid@mycompany.com If you are sending or posting a URL for use by multiple people, you will probably not want to code a specific user's ID into the URL because other users may find that confusing. Instead, you can supply a variable or a partial user name and instruct users to modify the URL with the completed user name on their own devices, or you can omit the user name entirely so that each user is prompted for credentials when logging in to Sametime. If you want users to be able to simply click a link or QR code to use the URL, you should omit the user name and allow the user to provide credentials at login. Note: In addition, you can optionally instruct users to include the associated password in the URL with the following syntax: st_user:st_password ; however, this is not a good practice because the password could potentially be consumed by an untrusted app. stproxy_host is the fully qualified host name of the Sametime Proxy Server; for example: stproxy.example.com . port is the port that the Sametime Proxy Server is listening on. If omitted, 443 will be used. ?action=AddCommunity is a required parameter that ensures the information within the URL is added to the mobile client as a community definition. &communityName=*community\\_name* is an optional URL-encoded string that provides a name for the new community. If you do not specify a name with this parameter, a default name will be created based on the Sametime Proxy Server's host name. The table below provides the complete list of parameters that you can include in the URL and indicates whether each parameter is required. Name Value Description action AddCommunity Required. This string identifies the URL as an auto-provisioning operation. communityName URL-encoded string Optional: A user-friendly nickname for the newly created community. If you do not specify a name with this parameter, a default name will be created based on the Sametime Proxy Server's host name. savePassword true or false Optional: Indicates whether passwords are remembered for this connection. Applies to both Sametime and authenticating proxy passwords. The default value is false. authProxyEnabled true or false Optional: Indicates whether the connection requires authentication with a reverse-proxy server. The default value is false. If this parameter is omitted but authenticating proxy credentials are supplied, Sametime behaves if this parameter is set to true. authProxyReuseCredentials true Optional, but if you include this parameter, you must set it to true. Indicates whether reverse-proxy authentication will use the Sametime user ID and password provided earlier in the URL authProxyUser URL-encoded user ID value Optional: User ID value to use for reverse proxy authentication. If present, proxy authentication is assumed to be enabled. Users can input proxy passwords separately before login. allowUntrustedSSL true or false Optional: Determines whether untrusted SSL is allowed for this connection. The default and recommended values are false . When this option is enabled, Sametime allows connections over untrusted channels and you risk exposure of your data to attackers attempting to steal your information. Examples: Encrypted (SSL) direct connection to server stproxyserver.example.com on default port 443 with no user-specified but the community name is specified as \"Sametime Server\" : hclsametime://stproxyserver.example.com/?action=AddCommunity&communityName=Sametime%20Server To preserve correct URL syntax, the space in \"Sametime Server\" is represented with %20 . Encrypted (SSL) direct connection to server stproxyserver.example.com on port 9080 for user dmisawa: hclsametime://dmisawa@stproxyserver.example.com:9080/?action=AddCommunity If the user name itself contains the @ symbol you will need to format it as the URL-encoded character %40 to preserve correct syntax, as in dmisawa%40auto_sales@stproxyserver.example.com:9080 Encrypted (SSL) authenticating proxy connection to safelinx.example.com on default port 443 reusing authenticating proxy credentials and supplying a variable for the user name, which each user must replace with their own ID: hclsametime://Your_Sametime_ID@safelinx.example.com/?action=AddCommunity&authProxyReuseCredentials=true In this case both the auth proxy user ID and the sametime user ID would be set to Your_Sametime_ID. Encrypted (SSL) authenticating proxy connection to safelinx.example.com on port 8881 reusing credentials, with no credentials specified so that each user will be prompted for credentials when logging into Sametime: hclsametime://safelinx.example.com:8881/?action=AddCommunity&authProxyEnabled=true Distribute the URL to mobile users: Format the URL as a link or use a third-party application to generate a scannable QR code. Post the link or QR code to a website, or distribute to users it by email. Configure the Sametime proxy to display the QR code for your custom provisioning URL using the browser clients Configure Mobile Client feature. Configuring the Sametime Proxy server to use the custom provisioning URL Before updating the stproxyconfig.xml, examine the URL. URL encode any ampersands or spaces. For example, if the URL. hclsametime://stproxyserver.example.com/?action=AddCommunity&communityName=Sametime%20Server The ampersand character is replaced with %26. hclsametime://stproxyserver.example.com/?action=AddCommunity%26communityName=Sametime%20Server Use a text or XML editor to open the stproxyconfig.xml file, located in the sametimeproxy\\conf\\stproxyconfig.xml directory. Add a <mobile> section if it doesn't exist with <configUrl> providing the provisioning URL as shown in the following example. <mobile> <configUrl>CUSTOM_PROVISIONING_URL</configUrl> </mobile> Save and close the file Restart the Sametime Proxy server to enable. Parent topic: Sametime client configuration options","title":"Creating a community provisioning URL for mobile users"},{"location":"admin/config_buscard.html","text":"Configuring business cards using an LDAP directory Configuring business cards is done in the UserInfoConfig.xml file in the community pod. Before you start setting up your business cards, ensure the following: The LDAP server is running and accessible by the Sametime server. All LDAP attributes needed by the business card are accessible for query through an anonymous connection or by using a specific bind account and password. If using an Domino LDAP, edit the server configuration settings to allow anonymous users to access required user details. In the Domino Administrator or Notes Client, click Configuration > All Server Documents > Configurations to access the All Servers document. Click Edit Configurations . Under the LDAP tab, you can view and add LDAP attributes that can be retrieved by anonymous users to the Anonymous users can query list. Configuration settings for business cards are in the UserInfoConfig.xml file in the community container or pod. For most environments, the UserInfoConfig.xml file works with default settings. You can override the default configuration settings by modifying the UserInfoConfig.xml file. The procedure to update the UserInfoConfig.xml file is different on Kubernetes and Docker. When modifying the XML file be sure to check the formatting using a browser. If there is an error with the formatting of the XML file, a business failure can occur. When using multiple LDAP servers, each LDAP server requires its own settings. By default, only the first server is configured during setup. To add additional LDAP servers, use the existing settings as a template. Locate the <StorageType=\u201dLDAP\u201d> section and copy everything between the <StorageType=\u201dLDAP\u201d> and </Storage> statements. Paste the statements at the end of the section below the </Storage> statement. This creates a new LDAP section. See Configuring additional LDAP servers on Kubernetes for information on configuring LDAP. Configure an authenticated bind. In some environments, not all the attributes are available to an anonymous bind, and an authenticated bind must be used. During the Sametime installation, anonymous binds to LDAP is configured by default. When a custom UserInfoConfig.xml file is being used, the LDAP bind credentials are being overridden. Bind credentials are located in the .env file for Docker and the sametime-global-secret in Kubernetes. Use the echo command to find the base64 encoded value for the user name and password. Specify the user name and password separated by a colon. For example, if the Bind user name is CN=stbind,O=example and the password is securePassword , enter the following command in a Linux shell: echo -n \u2018CN=stbind,O=example:securePassword\u2019 | base64 The results from the command is the value of a new argument called UserEncodedAuth. Replace the user name and password parameters with UserEncodedAuth=\"value\" . For example: <StorageDetails HostName=\"ldap2.example.com\" Port=\"1389\" UserEncodedAuth=\u201d 4oCYQ049c3RiaW5kLE89ZXhhbXBsZTpzZWN1cmVQYXNzd29yZOKAmQ==\u201d SslEnabled=\"true\" SslPort=\"636\" BaseDN=\"\" Scope=\"2\" SearchFilter=\"(&amp;(objectclass=organizationalPerson)(|(cn=%s)(givenname=%s)(sn=%s)(displayName=%s)(mail=%s)))\"/> By default, the LDAP operations are not encoded, and all communications are sent over clear text. To enable encryption, first follow the instructions in Securing connections between Sametime servers and LDAP . After the keystore has been created, update the SSL properties to include the path to the keystore and its password. For example: <SslProperties KeyStorePath=\"keys.p12\" KeyStorePassword=\"securePassword\"/> Verify the port number on the SslPort property. The default LDAP port number is 636. SslPort=\"port\\_number\" Change the setting for SslEnabled to true. SslEnabled=\"true\" Review the default search filter and make changes to fit your LDAP server\u2019s schema. The BaseDN field specifies where to start searching in the directory. For example, if all users are located in cn=users,dc=example,dc=com , you could set your BaseDN=\u201dcn=users,dc=example,dc=com\u201c so that the rest of the directory is not searched. A BaseDN is required if using Microsoft Active Directory and is not required for Domino LDAP. Scope specifies how deep the search is done, enter one of the following. 0 = Base : A lookup operation. Only a single entry described by the base DN is matched. 1 = One level : Searching is performed one level below the base DN and no further. This is like opening a folder in a file system and looking only at the direct elements inside the folder. 2 = Subtree : All child entries of the base DN are searched, whether direct or not, including the base DN itself. The host name of the LDAP server is set during setup. Review the HostName setting and confirm that it is the fully qualified host name of the LDAP service, which might be a load balancer in front of a cluster of LDAP servers. If the host name is not correct, update it in the helm/values.yaml file for Kubernetes or the .env file for Docker. Map the business card fields to LDAP attributes For each type of data, there is an Id and FieldName . The Id is the internal name used to identify each area of the business card. The FieldName value is set to the LDAP attribute that contains the data to display inside the business card. Modify any values that do not match your LDAP schema. These settings are in the <Details> section. Description Id name (do not change) Example The name of the attribute that holds the email address MailAddress mail The name of the attribute that has the user\u2019s Common Name. Name cn The name of the attribute that contains the user\u2019s title. Title title The name of the attribute that contains the user\u2019s physical address. Location postalAddress The name of the attribute that contains the user\u2019s phone number. Telephone telephoneNumber The name of the attribute that has the Company, organization or department name. Company ou The attribute containing the photo.** Photo jpegPhoto Note: ** If images are stored in a URL, see the step 8. If you would like to map additional detail to these fields it is possible with additional configuration modify the appropriate line in the <Details> section. For example, if there is both a desk phone number and a mobile phone number that you wish to include in the business card, you can use a separator between the two phone numbers when the information is displayed. Locate the <Detail> line with the telephone attributes. For desk phone number the attribute is telephoneNumber, and for mobile phone it is mobile. In the field name, include both attributes separated by a comma. FieldName=\u201dtelephoneNumber,mobile\u201d Add DisplaySeparator=\"separator\" to the statement identifying the separator. In the example, the forward slash is used as the separator. You can choose other characters as a separator. <Detail Type=\"text/plain\" Id=\"Telephone\" FieldName=\"telephoneNumber,mobile\" DisplaySeparator=\u201d / \u201c/> If photos are stored in a URL on a web server, the LDAP server must have an attribute that contains the URL. The attribute can be an existing attribute that has been repurposed or a new attribute can be created. Note: If you are using HCL Connections Profiles for the photos, see the topic Configuring Business Cards on HCL Connections . When using Connection Profile URLs, the photo name must be the email extension of .jpg. For example, if a user\u2019s email address is jane@example.com, the file name must be jane@example.com.jpg. Locate the <Details> section. Create a new <Details> line for the ImagePath to be used by desktop clients. In the FieldName setting, enter the attribute that contains the URL. For example,if the attribute that contains the photo URL is description the new line is: <Detail Type=\"text/plain\" Id=\"ImagePath\" FieldName=\"description\"/> If you have mobile clients, add an additional <DetailType> for PhotoURL. For example: <Detail Type=\"text/plain\" Id=\"PhotoURL\" FieldName=\"description\"/> In the Set params settings, select the Id names for the fields that you want to display as part of the business card. And remove any Ids that you do not want to include. For example, if you do not want to include the company name, remove \u201cCompany\u201d from the list of attributes. If you have added ImagePath, PhotoURL, or both, add these to the <Set params> and remove Photo. There are two lines that begin with <Set params> , each one has a unique SetID=. The one listed for SetId=\u201d0\u201d is for anonymous users. The one for SetId=\u201d1\u201d is for authenticated users. In the LDAP configuration, if the \"\ufeffThe attribute of the person entry that defines the internal ID of a Sametime user\" setting is not blank or set to anything other than the DN, the UserInfoConfig.xml file must be updated. Locate the StorageDetails tag of the relevant LDAP directory and add the following flags: UserIdAttribute= attribute_name Where attribute_name is the name of the attribute configured as the internal ID. PersonObjectClass= object_class_name Where object_class_name is the name of the person object class, for example: organizationalPerson. When all updates are complete, save and close the UserInfoConfig.xml file. Verify that there are not formatting errors by opening the file in a browser. If no mistakes are found, update the Docker or Kubernetes deployment for the settings to take effect. See Customizing business cards in Docker or Customizing business cards in Kubernetes . Parent topic: Setting up business cards","title":"Configuring business cards using an LDAP directory {#config_buscard .task}"},{"location":"admin/config_buscard.html#config_buscard","text":"Configuring business cards is done in the UserInfoConfig.xml file in the community pod. Before you start setting up your business cards, ensure the following: The LDAP server is running and accessible by the Sametime server. All LDAP attributes needed by the business card are accessible for query through an anonymous connection or by using a specific bind account and password. If using an Domino LDAP, edit the server configuration settings to allow anonymous users to access required user details. In the Domino Administrator or Notes Client, click Configuration > All Server Documents > Configurations to access the All Servers document. Click Edit Configurations . Under the LDAP tab, you can view and add LDAP attributes that can be retrieved by anonymous users to the Anonymous users can query list. Configuration settings for business cards are in the UserInfoConfig.xml file in the community container or pod. For most environments, the UserInfoConfig.xml file works with default settings. You can override the default configuration settings by modifying the UserInfoConfig.xml file. The procedure to update the UserInfoConfig.xml file is different on Kubernetes and Docker. When modifying the XML file be sure to check the formatting using a browser. If there is an error with the formatting of the XML file, a business failure can occur. When using multiple LDAP servers, each LDAP server requires its own settings. By default, only the first server is configured during setup. To add additional LDAP servers, use the existing settings as a template. Locate the <StorageType=\u201dLDAP\u201d> section and copy everything between the <StorageType=\u201dLDAP\u201d> and </Storage> statements. Paste the statements at the end of the section below the </Storage> statement. This creates a new LDAP section. See Configuring additional LDAP servers on Kubernetes for information on configuring LDAP. Configure an authenticated bind. In some environments, not all the attributes are available to an anonymous bind, and an authenticated bind must be used. During the Sametime installation, anonymous binds to LDAP is configured by default. When a custom UserInfoConfig.xml file is being used, the LDAP bind credentials are being overridden. Bind credentials are located in the .env file for Docker and the sametime-global-secret in Kubernetes. Use the echo command to find the base64 encoded value for the user name and password. Specify the user name and password separated by a colon. For example, if the Bind user name is CN=stbind,O=example and the password is securePassword , enter the following command in a Linux shell: echo -n \u2018CN=stbind,O=example:securePassword\u2019 | base64 The results from the command is the value of a new argument called UserEncodedAuth. Replace the user name and password parameters with UserEncodedAuth=\"value\" . For example: <StorageDetails HostName=\"ldap2.example.com\" Port=\"1389\" UserEncodedAuth=\u201d 4oCYQ049c3RiaW5kLE89ZXhhbXBsZTpzZWN1cmVQYXNzd29yZOKAmQ==\u201d SslEnabled=\"true\" SslPort=\"636\" BaseDN=\"\" Scope=\"2\" SearchFilter=\"(&amp;(objectclass=organizationalPerson)(|(cn=%s)(givenname=%s)(sn=%s)(displayName=%s)(mail=%s)))\"/> By default, the LDAP operations are not encoded, and all communications are sent over clear text. To enable encryption, first follow the instructions in Securing connections between Sametime servers and LDAP . After the keystore has been created, update the SSL properties to include the path to the keystore and its password. For example: <SslProperties KeyStorePath=\"keys.p12\" KeyStorePassword=\"securePassword\"/> Verify the port number on the SslPort property. The default LDAP port number is 636. SslPort=\"port\\_number\" Change the setting for SslEnabled to true. SslEnabled=\"true\" Review the default search filter and make changes to fit your LDAP server\u2019s schema. The BaseDN field specifies where to start searching in the directory. For example, if all users are located in cn=users,dc=example,dc=com , you could set your BaseDN=\u201dcn=users,dc=example,dc=com\u201c so that the rest of the directory is not searched. A BaseDN is required if using Microsoft Active Directory and is not required for Domino LDAP. Scope specifies how deep the search is done, enter one of the following. 0 = Base : A lookup operation. Only a single entry described by the base DN is matched. 1 = One level : Searching is performed one level below the base DN and no further. This is like opening a folder in a file system and looking only at the direct elements inside the folder. 2 = Subtree : All child entries of the base DN are searched, whether direct or not, including the base DN itself. The host name of the LDAP server is set during setup. Review the HostName setting and confirm that it is the fully qualified host name of the LDAP service, which might be a load balancer in front of a cluster of LDAP servers. If the host name is not correct, update it in the helm/values.yaml file for Kubernetes or the .env file for Docker. Map the business card fields to LDAP attributes For each type of data, there is an Id and FieldName . The Id is the internal name used to identify each area of the business card. The FieldName value is set to the LDAP attribute that contains the data to display inside the business card. Modify any values that do not match your LDAP schema. These settings are in the <Details> section. Description Id name (do not change) Example The name of the attribute that holds the email address MailAddress mail The name of the attribute that has the user\u2019s Common Name. Name cn The name of the attribute that contains the user\u2019s title. Title title The name of the attribute that contains the user\u2019s physical address. Location postalAddress The name of the attribute that contains the user\u2019s phone number. Telephone telephoneNumber The name of the attribute that has the Company, organization or department name. Company ou The attribute containing the photo.** Photo jpegPhoto Note: ** If images are stored in a URL, see the step 8. If you would like to map additional detail to these fields it is possible with additional configuration modify the appropriate line in the <Details> section. For example, if there is both a desk phone number and a mobile phone number that you wish to include in the business card, you can use a separator between the two phone numbers when the information is displayed. Locate the <Detail> line with the telephone attributes. For desk phone number the attribute is telephoneNumber, and for mobile phone it is mobile. In the field name, include both attributes separated by a comma. FieldName=\u201dtelephoneNumber,mobile\u201d Add DisplaySeparator=\"separator\" to the statement identifying the separator. In the example, the forward slash is used as the separator. You can choose other characters as a separator. <Detail Type=\"text/plain\" Id=\"Telephone\" FieldName=\"telephoneNumber,mobile\" DisplaySeparator=\u201d / \u201c/> If photos are stored in a URL on a web server, the LDAP server must have an attribute that contains the URL. The attribute can be an existing attribute that has been repurposed or a new attribute can be created. Note: If you are using HCL Connections Profiles for the photos, see the topic Configuring Business Cards on HCL Connections . When using Connection Profile URLs, the photo name must be the email extension of .jpg. For example, if a user\u2019s email address is jane@example.com, the file name must be jane@example.com.jpg. Locate the <Details> section. Create a new <Details> line for the ImagePath to be used by desktop clients. In the FieldName setting, enter the attribute that contains the URL. For example,if the attribute that contains the photo URL is description the new line is: <Detail Type=\"text/plain\" Id=\"ImagePath\" FieldName=\"description\"/> If you have mobile clients, add an additional <DetailType> for PhotoURL. For example: <Detail Type=\"text/plain\" Id=\"PhotoURL\" FieldName=\"description\"/> In the Set params settings, select the Id names for the fields that you want to display as part of the business card. And remove any Ids that you do not want to include. For example, if you do not want to include the company name, remove \u201cCompany\u201d from the list of attributes. If you have added ImagePath, PhotoURL, or both, add these to the <Set params> and remove Photo. There are two lines that begin with <Set params> , each one has a unique SetID=. The one listed for SetId=\u201d0\u201d is for anonymous users. The one for SetId=\u201d1\u201d is for authenticated users. In the LDAP configuration, if the \"\ufeffThe attribute of the person entry that defines the internal ID of a Sametime user\" setting is not blank or set to anything other than the DN, the UserInfoConfig.xml file must be updated. Locate the StorageDetails tag of the relevant LDAP directory and add the following flags: UserIdAttribute= attribute_name Where attribute_name is the name of the attribute configured as the internal ID. PersonObjectClass= object_class_name Where object_class_name is the name of the person object class, for example: organizationalPerson. When all updates are complete, save and close the UserInfoConfig.xml file. Verify that there are not formatting errors by opening the file in a browser. If no mistakes are found, update the Docker or Kubernetes deployment for the settings to take effect. See Customizing business cards in Docker or Customizing business cards in Kubernetes . Parent topic: Setting up business cards","title":"Configuring business cards using an LDAP directory"},{"location":"admin/config_buscard_custom_docker.html","text":"Customizing business cards in Docker You can override the default business cards configuration by editing a UserInfoConfig.xml file and adding it as a volume in the docker-compose.yml. Copy the existing file out of the community container and place it in the current Sametime installation directory. docker cp <container_name>:/local/notesdata/UserInfoConfig.xml . To identify the community container ID, run the command docker container ls and look for the chat-server IMAGE. The NAME is the container name, as an example: sametime-community-1 . Make needed changes, then update docker-compose.yaml by adding: volumes: - ./StCommunityConfig.xml:/local/notesdata/StCommunityConfig.xml - ./UserInfoConfig.xml:/local/notesdata/UserInfoConfig.xml networks: - sametime.test Update and save docker-compose.yml by adding: volumes: - ./UserInfoConfig.xml:/local/notesdata/UserInfoConfig.xml Restart the server to apply the changes. docker-compose down docker-compose up -d Parent topic: Setting up business cards","title":"Customizing business cards in Docker {#config_buscard_custom_docker .task}"},{"location":"admin/config_buscard_custom_docker.html#config_buscard_custom_docker","text":"You can override the default business cards configuration by editing a UserInfoConfig.xml file and adding it as a volume in the docker-compose.yml. Copy the existing file out of the community container and place it in the current Sametime installation directory. docker cp <container_name>:/local/notesdata/UserInfoConfig.xml . To identify the community container ID, run the command docker container ls and look for the chat-server IMAGE. The NAME is the container name, as an example: sametime-community-1 . Make needed changes, then update docker-compose.yaml by adding: volumes: - ./StCommunityConfig.xml:/local/notesdata/StCommunityConfig.xml - ./UserInfoConfig.xml:/local/notesdata/UserInfoConfig.xml networks: - sametime.test Update and save docker-compose.yml by adding: volumes: - ./UserInfoConfig.xml:/local/notesdata/UserInfoConfig.xml Restart the server to apply the changes. docker-compose down docker-compose up -d Parent topic: Setting up business cards","title":"Customizing business cards in Docker"},{"location":"admin/config_buscard_custom_kubernetes.html","text":"Customizing business cards in Kubernetes You can override the default business cards configuration by creating an extra-community-configs secret to hold the configuration files. Kubectl commands are used to pull the existing file from the community pod to your local machine. You modify these files locally with the required settings, then create the secret containing the files. The following procedures describes the steps to create a new secret. The example used in the steps shows creating a secret called extra-community-configs which overrides the values.yaml settings for LDAP. The extra-community-configs secret contains a copy of the configuration files used by the Community pod. For more information on secrets, see Managing secrets in Kubernetes . Create a directory on your machine called extra-community-config at the root of where the Sametime installation package was decompressed. mkdir extra-community-config Use the cd command to change to the extra-community-config directory. cd extra-community-config Find the community pod name by running the get pods command. The pod name has some hashes in it, for example: community-77d4695988-2bzrx): kubectl get pods . Run the following command to pull a copy of the StCommunityConfig.xml file from the community pod specifying the name of the pod. kubectl exec -it pod\\_name --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml This file must be available. No changes to it are needed at this time. Run the following command to pull a copy of the UserInfoConfig.xml file from the community pod specifying the name of the pod. kubectl exec -it pod\\_name --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml Using a text editor, open the local copy of the UserInfoConfig.xml file in edit mode. Modify the file as needed. When finish, save and close the file. Ensure that you are in the extra-community-config directory that was created earlier. Run the following command to create the secret. If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure it is created in the correct namespace. kubectl\u202fcreate secret generic extra-community-config --from-file=./ Use the cd command to change to the helm directory where the Sametime installation package was decompressed. cd helm Open the values.yaml file and put in edit mode. Add the following line to the values.yaml file. overrideCommunityConfigSecret: extra-community-config When finished save and close the file.. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Setting up business cards","title":"Customizing business cards in Kubernetes {#config_buscard_custom_kubernetes .task}"},{"location":"admin/config_buscard_custom_kubernetes.html#config_buscard_custom_kubernetes","text":"You can override the default business cards configuration by creating an extra-community-configs secret to hold the configuration files. Kubectl commands are used to pull the existing file from the community pod to your local machine. You modify these files locally with the required settings, then create the secret containing the files. The following procedures describes the steps to create a new secret. The example used in the steps shows creating a secret called extra-community-configs which overrides the values.yaml settings for LDAP. The extra-community-configs secret contains a copy of the configuration files used by the Community pod. For more information on secrets, see Managing secrets in Kubernetes . Create a directory on your machine called extra-community-config at the root of where the Sametime installation package was decompressed. mkdir extra-community-config Use the cd command to change to the extra-community-config directory. cd extra-community-config Find the community pod name by running the get pods command. The pod name has some hashes in it, for example: community-77d4695988-2bzrx): kubectl get pods . Run the following command to pull a copy of the StCommunityConfig.xml file from the community pod specifying the name of the pod. kubectl exec -it pod\\_name --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml This file must be available. No changes to it are needed at this time. Run the following command to pull a copy of the UserInfoConfig.xml file from the community pod specifying the name of the pod. kubectl exec -it pod\\_name --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml Using a text editor, open the local copy of the UserInfoConfig.xml file in edit mode. Modify the file as needed. When finish, save and close the file. Ensure that you are in the extra-community-config directory that was created earlier. Run the following command to create the secret. If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure it is created in the correct namespace. kubectl\u202fcreate secret generic extra-community-config --from-file=./ Use the cd command to change to the helm directory where the Sametime installation package was decompressed. cd helm Open the values.yaml file and put in edit mode. Add the following line to the values.yaml file. overrideCommunityConfigSecret: extra-community-config When finished save and close the file.. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Setting up business cards","title":"Customizing business cards in Kubernetes"},{"location":"admin/config_chat_ldap_java_format.html","text":"Example: Writing a Java class to format names returned in a search To return a user name in a format that is not available in an LDAP directory entry attribute, you can write a Java\u2122 class that manipulates existing information in the LDAP directory to produce the user name in the desired format. In most environments, the value of the The attribute of the person entry that defines the user's name setting can specify a common LDAP directory attribute, such as cn (common name) or mail (email address). When configured in this way, the search returns the value assigned to a user's cn or mail directory attribute and displays this value in the HCL\u00ae Sametime\u00ae client user interface. To return names in a format different from the LDAP directory attributes, create a custom Java class. For example, you might create a Java class that does the following: Combines the values of two LDAP directory attributes to produce the user name in a desired format. Edits the information in a single LDAP directory attribute to produce the user name in a format that is different than the value specified by the attribute. The sample code that follows shows how to combines the values of the sn and givenName attributes to return a user name with the surname shown first, assuming the following requirements: LDAP searches must return a user name in the format surname, given name (for example: Smith, John) None of the LDAP directory attributes specify the user name in the surname, given name format. The LDAP directory attribute sn specifies each user's surname. The LDAP directory attribute givenName specifies each user's given name. Sample code This example takes values from the sn and givenName directory attributes and combines these values into a single display name in the format of surname, given name. public class StLdapCustomizedAttributes { public static String displayName (String givenName, String sn) { String result = sn + \", \" + givenName; return result; } } After writing your Java class, complete the tasks in this section to implement it in either Docker or Kubernetes. Parent topic: Creating custom Java classes for searching LDAP","title":"Example: Writing a Java class to format names returned in a search {#config_chat_ldap_java_format .task}"},{"location":"admin/config_chat_ldap_java_format.html#config_chat_ldap_java_format","text":"To return a user name in a format that is not available in an LDAP directory entry attribute, you can write a Java\u2122 class that manipulates existing information in the LDAP directory to produce the user name in the desired format. In most environments, the value of the The attribute of the person entry that defines the user's name setting can specify a common LDAP directory attribute, such as cn (common name) or mail (email address). When configured in this way, the search returns the value assigned to a user's cn or mail directory attribute and displays this value in the HCL\u00ae Sametime\u00ae client user interface. To return names in a format different from the LDAP directory attributes, create a custom Java class. For example, you might create a Java class that does the following: Combines the values of two LDAP directory attributes to produce the user name in a desired format. Edits the information in a single LDAP directory attribute to produce the user name in a format that is different than the value specified by the attribute. The sample code that follows shows how to combines the values of the sn and givenName attributes to return a user name with the surname shown first, assuming the following requirements: LDAP searches must return a user name in the format surname, given name (for example: Smith, John) None of the LDAP directory attributes specify the user name in the surname, given name format. The LDAP directory attribute sn specifies each user's surname. The LDAP directory attribute givenName specifies each user's given name. Sample code This example takes values from the sn and givenName directory attributes and combines these values into a single display name in the format of surname, given name. public class StLdapCustomizedAttributes { public static String displayName (String givenName, String sn) { String result = sn + \", \" + givenName; return result; } } After writing your Java class, complete the tasks in this section to implement it in either Docker or Kubernetes. Parent topic: Creating custom Java classes for searching LDAP","title":"Example: Writing a Java class to format names returned in a search"},{"location":"admin/config_chat_ldap_java_people.html","text":"Example: Writing a Java class to filter searches for people and groups If a single search filter is not adequate to resolve user or group name searches, you can write a Java\u2122 class containing a method that specifies exactly how directory searches are conducted. The class can invoke different LDAP search filters depending on search criteria entered by users. The Search filter for resolving person names and the Search filter for resolving group names settings in the LDAP directory settings of the Sametime\u00ae Administration Tool define the LDAP directory search filters responsible for selecting user and group names from the LDAP directory. Note: You do not have to write Java classes to control the search behavior for both users and groups. You can use a Java class to control the search behavior for users while using a single LDAP search filter to control the search behavior for groups, or vice versa. The specific source code that you write to support customized LDAP searches is entirely dependent on your environment. This section provides a code sample to help you understand how to write the Java class appropriate for your environment. Note: The searched name must be escaped according to LDAP RFC2254 before adding it to the created LDAP filter. Use the escape and the isHex methods as is from the following example. The following example invokes different LDAP directory search filters based on the text string that is entered into the Sametime user interface by a user. The search filters invoked by the method are dependent on the directory schema and the search behavior needed for the environment. Assume that three different users want to add the user Victor Lazlow to their Sametime Connect Client buddy lists. Each of the three users searches for Victor Lazlow in a different way. The logic of the Java class dictates the results of these three user searches: User 1 Input: User 1 enters Victor L* into the Sametime client user interface to add Victor Lazlow to the Contacts list. Results: This search attempt returns an error because the Java class is programmed to return an error when the user enters a text string that includes an asterisk. User 2 Input: User 2 enters Victor_Lazlow@example.com into the Sametime client interface. Results: This search attempt succeeds and returns the value \"Victor_Lazlow@example.com\" (Victor Lazlow's email address) from the LDAP directory. The search attempt succeeds in this way because the Java class is programmed to return an LDAP search filter that can resolve an LDAP directory search to a user's email address. The Java class returns this email address search filter if the search text string entered by the end user includes the \"at\" character (@). User 3 Input: User 3 enters \"Victor L\" into the Sametime client interface. This search attempt succeeds and returns the common name (cn) directory attribute of \"Victor Lazlow.\" Results: The search attempt succeeds in this way because the Java class is programmed to return an LDAP search filter that can resolve an LDAP directory search to a user's common name (cn). The Java class returns this common name search filter if the search text string entered by the end user does not include either an asterisk or \"at\" (@) character. Sample code The code sample that follows shows the Java source code that produces this search behavior. This code creates a Java class named StLdapCustomized that includes the peopleResolveFilter method. The if statements in the peopleResolveFilter method examine the text string entered by the user in the Sametime client user interface and return the appropriate LDAP search filter based on this text string. The comments in the source code explain the purpose of each if statement. public class StLdapCustomized { /** * String representing an escaped forward slash sign '\\' */ private final static String SLASH_SIGN_CONVERTED = \"\\\\5c\"; /** * String representing an escaped * sign '*' */ private final static String STAR_SIGN_CONVERTED = \"\\\\2a\"; /** * String representing an escaped opening bracket sign '(' */ private final static String OPENING_BRACKET_SIGN_CONVERTED = \"\\\\28\"; /** * String representing an escaped closing bracket sign ')' */ private final static String CLOSING_BRACKET_SIGN_CONVERTED = \"\\\\29\"; /** * Escape problematic characters in the name to match the LDAP filter escaping * criteria according to RFC2254 * rfc2254 - The String Representation of LDAP Search * @param name the name to escape * @return an escaped string */ private static String escape(String name) { StringBuffer escapedName = new StringBuffer(); for (int i=0; i< name.length(); ){ switch(name.charAt(i)){ case '\\\\': // if the next 2 chars are hex we don't need to escape if((i< name.length()-2) && isHex(name.charAt(i+1)) && isHex(name.charAt(i+2))){ escapedName.append('\\\\'); escapedName.append(name.charAt(++i)); escapedName.append(name.charAt(++i)); } else{ escapedName.append(SLASH_SIGN_CONVERTED); } i++; break; case '*': escapedName.append(STAR_SIGN_CONVERTED); i++; break; case '(': escapedName.append(OPENING_BRACKET_SIGN_CONVERTED); i++; break; case ')': escapedName.append(CLOSING_BRACKET_SIGN_CONVERTED); i++; break; default: escapedName.append(name.charAt(i)); i++; } } return escapedName.toString(); } /** * Verifies whether this char is a hex char * @param c * @return */ private static boolean isHex(char c){ boolean hex = true; hex = !( Character.digit(c, 16) == -1); return hex; } /** * Generates a search filter for finding a user, given the user's * name. * The searched name is escaped according to LDAP filters escaping rules. * The checks on the searched name format should be done before escaping the value. * @param name The user's name as provided by the Sametime client. * @return The search filter, or null if the name is invalid. * */ public static String peopleResolveFilter (String name) { String escapedName; // prevent users from adding their own wildcards if (name.indexOf('*') != -1) return null; // if name looks like email, do not search with wildcards, and only search in mail attribute if (name.indexOf('@') != -1) { escapedName = escape(name); return \"(&(objectclass=person)(mail=\" + escapedName + \")) \"; } // otherwise, search as CN with wildcard escapedName = escape(name); return \"(&(objectclass=person) (cn=\" + escapedName + \"*))\"; } } After writing your Java class, complete the tasks in this section to implement it in either Docker or Kubernetes. Parent topic: Creating custom Java classes for searching LDAP","title":"Example: Writing a Java class to filter searches for people and groups {#config_chat_ldap_java_people .task}"},{"location":"admin/config_chat_ldap_java_people.html#config_chat_ldap_java_people","text":"If a single search filter is not adequate to resolve user or group name searches, you can write a Java\u2122 class containing a method that specifies exactly how directory searches are conducted. The class can invoke different LDAP search filters depending on search criteria entered by users. The Search filter for resolving person names and the Search filter for resolving group names settings in the LDAP directory settings of the Sametime\u00ae Administration Tool define the LDAP directory search filters responsible for selecting user and group names from the LDAP directory. Note: You do not have to write Java classes to control the search behavior for both users and groups. You can use a Java class to control the search behavior for users while using a single LDAP search filter to control the search behavior for groups, or vice versa. The specific source code that you write to support customized LDAP searches is entirely dependent on your environment. This section provides a code sample to help you understand how to write the Java class appropriate for your environment. Note: The searched name must be escaped according to LDAP RFC2254 before adding it to the created LDAP filter. Use the escape and the isHex methods as is from the following example. The following example invokes different LDAP directory search filters based on the text string that is entered into the Sametime user interface by a user. The search filters invoked by the method are dependent on the directory schema and the search behavior needed for the environment. Assume that three different users want to add the user Victor Lazlow to their Sametime Connect Client buddy lists. Each of the three users searches for Victor Lazlow in a different way. The logic of the Java class dictates the results of these three user searches: User 1 Input: User 1 enters Victor L* into the Sametime client user interface to add Victor Lazlow to the Contacts list. Results: This search attempt returns an error because the Java class is programmed to return an error when the user enters a text string that includes an asterisk. User 2 Input: User 2 enters Victor_Lazlow@example.com into the Sametime client interface. Results: This search attempt succeeds and returns the value \"Victor_Lazlow@example.com\" (Victor Lazlow's email address) from the LDAP directory. The search attempt succeeds in this way because the Java class is programmed to return an LDAP search filter that can resolve an LDAP directory search to a user's email address. The Java class returns this email address search filter if the search text string entered by the end user includes the \"at\" character (@). User 3 Input: User 3 enters \"Victor L\" into the Sametime client interface. This search attempt succeeds and returns the common name (cn) directory attribute of \"Victor Lazlow.\" Results: The search attempt succeeds in this way because the Java class is programmed to return an LDAP search filter that can resolve an LDAP directory search to a user's common name (cn). The Java class returns this common name search filter if the search text string entered by the end user does not include either an asterisk or \"at\" (@) character. Sample code The code sample that follows shows the Java source code that produces this search behavior. This code creates a Java class named StLdapCustomized that includes the peopleResolveFilter method. The if statements in the peopleResolveFilter method examine the text string entered by the user in the Sametime client user interface and return the appropriate LDAP search filter based on this text string. The comments in the source code explain the purpose of each if statement. public class StLdapCustomized { /** * String representing an escaped forward slash sign '\\' */ private final static String SLASH_SIGN_CONVERTED = \"\\\\5c\"; /** * String representing an escaped * sign '*' */ private final static String STAR_SIGN_CONVERTED = \"\\\\2a\"; /** * String representing an escaped opening bracket sign '(' */ private final static String OPENING_BRACKET_SIGN_CONVERTED = \"\\\\28\"; /** * String representing an escaped closing bracket sign ')' */ private final static String CLOSING_BRACKET_SIGN_CONVERTED = \"\\\\29\"; /** * Escape problematic characters in the name to match the LDAP filter escaping * criteria according to RFC2254 * rfc2254 - The String Representation of LDAP Search * @param name the name to escape * @return an escaped string */ private static String escape(String name) { StringBuffer escapedName = new StringBuffer(); for (int i=0; i< name.length(); ){ switch(name.charAt(i)){ case '\\\\': // if the next 2 chars are hex we don't need to escape if((i< name.length()-2) && isHex(name.charAt(i+1)) && isHex(name.charAt(i+2))){ escapedName.append('\\\\'); escapedName.append(name.charAt(++i)); escapedName.append(name.charAt(++i)); } else{ escapedName.append(SLASH_SIGN_CONVERTED); } i++; break; case '*': escapedName.append(STAR_SIGN_CONVERTED); i++; break; case '(': escapedName.append(OPENING_BRACKET_SIGN_CONVERTED); i++; break; case ')': escapedName.append(CLOSING_BRACKET_SIGN_CONVERTED); i++; break; default: escapedName.append(name.charAt(i)); i++; } } return escapedName.toString(); } /** * Verifies whether this char is a hex char * @param c * @return */ private static boolean isHex(char c){ boolean hex = true; hex = !( Character.digit(c, 16) == -1); return hex; } /** * Generates a search filter for finding a user, given the user's * name. * The searched name is escaped according to LDAP filters escaping rules. * The checks on the searched name format should be done before escaping the value. * @param name The user's name as provided by the Sametime client. * @return The search filter, or null if the name is invalid. * */ public static String peopleResolveFilter (String name) { String escapedName; // prevent users from adding their own wildcards if (name.indexOf('*') != -1) return null; // if name looks like email, do not search with wildcards, and only search in mail attribute if (name.indexOf('@') != -1) { escapedName = escape(name); return \"(&(objectclass=person)(mail=\" + escapedName + \")) \"; } // otherwise, search as CN with wildcard escapedName = escape(name); return \"(&(objectclass=person) (cn=\" + escapedName + \"*))\"; } } After writing your Java class, complete the tasks in this section to implement it in either Docker or Kubernetes. Parent topic: Creating custom Java classes for searching LDAP","title":"Example: Writing a Java class to filter searches for people and groups"},{"location":"admin/config_class_file_docker.html","text":"Configuring the class file on Docker Use a custom Java class file to transform your searches for LDAP for the community pod. You must have already created and compiled the class file using Java 1.8. To configure a custom Java class file to transform your searches for LDAP for the Sametime server on Docker you need to complete the following tasks. Override the default LDAP settings to use the class file Name the compiled class file StLdapCustomizedAttributes.classfile. Place the StLdapCustomizedAttributes.classfile into the Sametime installation directory or a sub directory, example: ldap-custom-filter. Identify the chat-server container ID by running the docker container ls command and finding the chat-server IMAGE. The NAME is the container name. For example: sametime-community-1. Pull a copy of the StCommunityConfig.xml from the chat-servercontainer by running the following command, where containerid is the container name for the chat server identified in step 2. If the StCommunityConfig.xml has already been copied and edited previously for a different setting, skip this step and edit the existingStCommunityConfig.xml. docker cp <container_name>:/local/notesdata/StCommunityConfig.xml . Update the configuration that pertains to your custom Java class. Open theStCommunityConfig.xml file that was copied from the chat-server contain and edit the <LDAP> section as it pertains to your configuration. The changes depend on what you are modifying, refer to the following table for guidance. Type of change Parameter name What to specify Example Search filter for resolving person names PersonResolveFilter classname.methodname() for your custom code StLdapCustomized.peopleResolveFilter() Search filter for resolving group names GroupResolveFilter Class name and method name for a group filter, using the following format: Classname.methodname() StLdapCustomized.groupsResolveFilter() . Attribute of the person entry that defines the person's name DescAttribute Class name and method name for the formatting, with the name of the attribute inside, for example: Classname.methodname(attribute_name) StLdapCustomizedAttributes.displayName(cn) Save and close the StCommunityConfig.xmlfile. Edit the docker-compose.yaml file and add the following under the community section: volumes: - ./ StLdapCustomizedAttributes.class:/local/notesdata/java/ StLdapCustomizedAttributes.class If the class files is placed in a sub-directory, it must be specified in the above volume path. Save and Restart the server to apply the changes. docker-compose down docker-compose up -d Parent topic: Creating custom Java classes for searching LDAP","title":"Configuring the class file on Docker {#config_class_file_docker .task}"},{"location":"admin/config_class_file_docker.html#config_class_file_docker","text":"Use a custom Java class file to transform your searches for LDAP for the community pod. You must have already created and compiled the class file using Java 1.8. To configure a custom Java class file to transform your searches for LDAP for the Sametime server on Docker you need to complete the following tasks. Override the default LDAP settings to use the class file Name the compiled class file StLdapCustomizedAttributes.classfile. Place the StLdapCustomizedAttributes.classfile into the Sametime installation directory or a sub directory, example: ldap-custom-filter. Identify the chat-server container ID by running the docker container ls command and finding the chat-server IMAGE. The NAME is the container name. For example: sametime-community-1. Pull a copy of the StCommunityConfig.xml from the chat-servercontainer by running the following command, where containerid is the container name for the chat server identified in step 2. If the StCommunityConfig.xml has already been copied and edited previously for a different setting, skip this step and edit the existingStCommunityConfig.xml. docker cp <container_name>:/local/notesdata/StCommunityConfig.xml . Update the configuration that pertains to your custom Java class. Open theStCommunityConfig.xml file that was copied from the chat-server contain and edit the <LDAP> section as it pertains to your configuration. The changes depend on what you are modifying, refer to the following table for guidance. Type of change Parameter name What to specify Example Search filter for resolving person names PersonResolveFilter classname.methodname() for your custom code StLdapCustomized.peopleResolveFilter() Search filter for resolving group names GroupResolveFilter Class name and method name for a group filter, using the following format: Classname.methodname() StLdapCustomized.groupsResolveFilter() . Attribute of the person entry that defines the person's name DescAttribute Class name and method name for the formatting, with the name of the attribute inside, for example: Classname.methodname(attribute_name) StLdapCustomizedAttributes.displayName(cn) Save and close the StCommunityConfig.xmlfile. Edit the docker-compose.yaml file and add the following under the community section: volumes: - ./ StLdapCustomizedAttributes.class:/local/notesdata/java/ StLdapCustomizedAttributes.class If the class files is placed in a sub-directory, it must be specified in the above volume path. Save and Restart the server to apply the changes. docker-compose down docker-compose up -d Parent topic: Creating custom Java classes for searching LDAP","title":"Configuring the class file on Docker"},{"location":"admin/config_class_file_kubernetes.html","text":"Configuring the class file on Kubernetes You can use a custom Java class file to transform your searches for LDAP for the community pod. You must have already created and compiled the class file using Java 1.8. To configure a custom Java class file to transform your searches for LDAP for the community pod in Kubernetes you need to complete the following tasks. Create a ConfigMap with your compiled class file Modify the community pod.yaml file to load the ConfigMap Override the default LDAP settings to use the class file The changes in this task affect the following pods: community Create a configmap with your compiled class file. Name the compiled class file StLdapCustomizedAttributes.class. Create a folder on the machine where you run the kubectl commands called ldap-custom-filter. Place the StLdapCustomizedAttributes.class file into the ldap-custom-filter folder. Change directories to the ldap-custom-filter folder. Run the following command to create a ConfigMap with the StLdapCustomizedAttributes.class within it. kubectl create configmap ldap-custom-filter --from-file=./ Note: If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure it is created in the correct namespace. Modify the pod.yaml file for the community pod to load the ConfigMap. Use a text editor to open the file pod.yaml in the helm/charts/community/templates/ directory. Locate the volumeMounts: section and under the first mountPath, statement create a new line and add the following stanza. - name: ldap-custom-filter configMap: ldap-custom-filter name: Correct the indentation using only spaces so that the alignment of the new lines is the same as the lines above it. When finished it should look like the following: Save and close the pod.yaml file. Override the default LDAP settings to use the class file. Make a directory on your machine called extra-community-config at the root of where the Sametime installation package was decompressed. Change to the extra-community-config directory. Find the community pod name by running the get pods command. The pod name has some hashes in it, for example: community-77d4695988-2bzrx): . kubectl get pods Run the following command to pull a copy of the StCommunityConfig.xml file, specifying the name of the pod. kubectl exec -it pod\\_name --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml Update the configuration that pertains to your custom Java class. Open the StCommunityConfig.xml file that was just copied to your machine. Then edit the <LDAP> section as it pertains to your configuration. The changes depend on what you are modifying, refer to the following table for guidance. Type of change Parameter name What to specify Example Search filter for resolving person names PersonResolveFilter classname.methodname() for your custom code StLdapCustomized.peopleResolveFilter() Search filter for resolving group names GroupResolveFilter Class name and method name for a group filter, using the following format: Classname.methodname() StLdapCustomized.groupsResolveFilter() . Attribute of the person entry that defines the person's name DescAttribute Class name and method name for the formatting, with the name of the attribute inside, for example: Classname.methodname(attribute_name) StLdapCustomizedAttributes.displayName(cn) Save and close the StCommunityConfig.xml file. Ensure you are in the extra-community-config directory that was created earlier then run the following command to create the secret. kubectl\u202fcreate secret generic extra-community-config --from-file=./ Note: If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure it is created in the correct namespace. Change to the helm directory where the Sametime installation package was decompressed. Open thevalues.yaml file and place in edit mode. Add the following line. overrideCommunityConfigSecret: extra-community-config Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Creating custom Java classes for searching LDAP","title":"Configuring the class file on Kubernetes {#config_class_file_kubernetes .task}"},{"location":"admin/config_class_file_kubernetes.html#config_class_file_kubernetes","text":"You can use a custom Java class file to transform your searches for LDAP for the community pod. You must have already created and compiled the class file using Java 1.8. To configure a custom Java class file to transform your searches for LDAP for the community pod in Kubernetes you need to complete the following tasks. Create a ConfigMap with your compiled class file Modify the community pod.yaml file to load the ConfigMap Override the default LDAP settings to use the class file The changes in this task affect the following pods: community Create a configmap with your compiled class file. Name the compiled class file StLdapCustomizedAttributes.class. Create a folder on the machine where you run the kubectl commands called ldap-custom-filter. Place the StLdapCustomizedAttributes.class file into the ldap-custom-filter folder. Change directories to the ldap-custom-filter folder. Run the following command to create a ConfigMap with the StLdapCustomizedAttributes.class within it. kubectl create configmap ldap-custom-filter --from-file=./ Note: If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure it is created in the correct namespace. Modify the pod.yaml file for the community pod to load the ConfigMap. Use a text editor to open the file pod.yaml in the helm/charts/community/templates/ directory. Locate the volumeMounts: section and under the first mountPath, statement create a new line and add the following stanza. - name: ldap-custom-filter configMap: ldap-custom-filter name: Correct the indentation using only spaces so that the alignment of the new lines is the same as the lines above it. When finished it should look like the following: Save and close the pod.yaml file. Override the default LDAP settings to use the class file. Make a directory on your machine called extra-community-config at the root of where the Sametime installation package was decompressed. Change to the extra-community-config directory. Find the community pod name by running the get pods command. The pod name has some hashes in it, for example: community-77d4695988-2bzrx): . kubectl get pods Run the following command to pull a copy of the StCommunityConfig.xml file, specifying the name of the pod. kubectl exec -it pod\\_name --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml Update the configuration that pertains to your custom Java class. Open the StCommunityConfig.xml file that was just copied to your machine. Then edit the <LDAP> section as it pertains to your configuration. The changes depend on what you are modifying, refer to the following table for guidance. Type of change Parameter name What to specify Example Search filter for resolving person names PersonResolveFilter classname.methodname() for your custom code StLdapCustomized.peopleResolveFilter() Search filter for resolving group names GroupResolveFilter Class name and method name for a group filter, using the following format: Classname.methodname() StLdapCustomized.groupsResolveFilter() . Attribute of the person entry that defines the person's name DescAttribute Class name and method name for the formatting, with the name of the attribute inside, for example: Classname.methodname(attribute_name) StLdapCustomizedAttributes.displayName(cn) Save and close the StCommunityConfig.xml file. Ensure you are in the extra-community-config directory that was created earlier then run the following command to create the secret. kubectl\u202fcreate secret generic extra-community-config --from-file=./ Note: If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure it is created in the correct namespace. Change to the helm directory where the Sametime installation package was decompressed. Open thevalues.yaml file and place in edit mode. Add the following line. overrideCommunityConfigSecret: extra-community-config Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Creating custom Java classes for searching LDAP","title":"Configuring the class file on Kubernetes"},{"location":"admin/config_client_access_pref.html","text":"Accessibility preferences The following table lists the accessibility preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release useAcc Boolean. Default is false. Specifies whether or not to optimize chat transcript for screen readers (will replace the transcript with a different format). 7.5.1 and later optimizeAlerts Boolean. Default is false. Specifies whether or not to optimize notification settings for screen readers (will turn off bring to front, flash window, turn on sounds). 7.5.1 and later useLessVerbose Boolean. Default is false. Specifies whether or not to set less verbose messages for screen readers (less verbose will not read status change events and typing events in the chat window). 7.5.1 and later useArrowKeyForQuickfind Boolean. Default is false. Specifies whether to use the arrow key for quick find. 8.5.1 and later Parent topic: Sametime client preferences","title":"Accessibility preferences {#config_client_access_pref .concept}"},{"location":"admin/config_client_access_pref.html#config_client_access_pref","text":"The following table lists the accessibility preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release useAcc Boolean. Default is false. Specifies whether or not to optimize chat transcript for screen readers (will replace the transcript with a different format). 7.5.1 and later optimizeAlerts Boolean. Default is false. Specifies whether or not to optimize notification settings for screen readers (will turn off bring to front, flash window, turn on sounds). 7.5.1 and later useLessVerbose Boolean. Default is false. Specifies whether or not to set less verbose messages for screen readers (less verbose will not read status change events and typing events in the chat window). 7.5.1 and later useArrowKeyForQuickfind Boolean. Default is false. Specifies whether to use the arrow key for quick find. 8.5.1 and later Parent topic: Sametime client preferences","title":"Accessibility preferences"},{"location":"admin/config_client_cal_pref.html","text":"Calendar preferences The following table lists the calendar preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release alertMeWhenMeetingStarts Boolean In Auto-Status Changes for Meetings scheduled in my calendar, specify whether to alert user when user has a meeting scheduled in the calendar. 8.5.1.1 and later enabled Boolean Specify wether or not to enable auto status change for meetings scheduled in user's calendar. 8.0 and later promptMe Boolean In Auto-Status Changes for meetings scheduled in my calendar, specify whether to prompt user before changing the status when user have a meeting scheduled in the calendar. 8.0 and later statusMsg String In Auto-Status Changes for meetings scheduled in my calendar, specify the status message when user select \"Automatically change my status.\" 8.0 and later setback Boolean In Auto-Status Changes for meetings scheduled in my calendar, specify whether to return to user's previous status when the meeting is over. 8.0 and later outlook_enabled Boolean In Calendar Service page, specify whether to check Outlook calendar for meetings to allow auto status changes. It's valid only if the Outlook service is available. 8.0 and later notes_enabled Boolean In Calendar Service page, specify whether to check Notes calendar for meetings to allow auto status changes. It's valid only if the Notes service is available. 8.0 and later interval Positive integer value, unit is minutes. 10 minutes is the default. In Calendar Service page, specify the interval that Sametime retrieves calendar information for an auto-status change. This value is not for the interval to update auto-status. 8.0 and later Parent topic: Sametime client preferences","title":"Calendar preferences {#config_client_cal_pref .concept}"},{"location":"admin/config_client_cal_pref.html#config_client_cal_pref","text":"The following table lists the calendar preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release alertMeWhenMeetingStarts Boolean In Auto-Status Changes for Meetings scheduled in my calendar, specify whether to alert user when user has a meeting scheduled in the calendar. 8.5.1.1 and later enabled Boolean Specify wether or not to enable auto status change for meetings scheduled in user's calendar. 8.0 and later promptMe Boolean In Auto-Status Changes for meetings scheduled in my calendar, specify whether to prompt user before changing the status when user have a meeting scheduled in the calendar. 8.0 and later statusMsg String In Auto-Status Changes for meetings scheduled in my calendar, specify the status message when user select \"Automatically change my status.\" 8.0 and later setback Boolean In Auto-Status Changes for meetings scheduled in my calendar, specify whether to return to user's previous status when the meeting is over. 8.0 and later outlook_enabled Boolean In Calendar Service page, specify whether to check Outlook calendar for meetings to allow auto status changes. It's valid only if the Outlook service is available. 8.0 and later notes_enabled Boolean In Calendar Service page, specify whether to check Notes calendar for meetings to allow auto status changes. It's valid only if the Notes service is available. 8.0 and later interval Positive integer value, unit is minutes. 10 minutes is the default. In Calendar Service page, specify the interval that Sametime retrieves calendar information for an auto-status change. This value is not for the interval to update auto-status. 8.0 and later Parent topic: Sametime client preferences","title":"Calendar preferences"},{"location":"admin/config_client_chat_history_pref.html","text":"Chat preferences The following tables list the chat preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release enableNwayRichText Boolean. Default is false. Specifies whether or not to enable the client to support rich text in a multi-user chat. Rich text is enabled in a multi-user chat session only if all clients participating in the chat session have this setting enabled. 8.5.1.1 and later Attribute Variable type Description Release days.storage.max A positive number. Delete saved transcripts after this number of days. This setting will be overwritten by the value set on the server policy. 7.5.1 and later delete.old A positive number. The default is false. Delete saved transcripts. This setting will be overwritten by the value set on the server policy. If the policy allows transcripts to be deleted, set this value to true initially. 7.5.1 and later logging.default 0 = Automatically save chats, 1 = Do not automatically save chats, 2 = Prompt me to save chats Default chat logging action. 7.5.1 and later logging.enabled Boolean. Default is false. Specify whether or not to save a local copy of the chat history. This attribute works in conjunction with the Sametime policy IDs . Edit the policies as necessary. If the server policy is not configured to allow save chat, this setting is ignored. Attention: Local chat history is unencrypted. To disable and restrict users from saving a local copy, refer to Updating client preferences with the managed-settings.xml file . |7.5.1 and later| |logging.service|service.notes = Notes logging, service.file = File system logging|Type of chat logging service.| | |display.context|True = Display, false = Do not display|Display the saved transcript between two users for the current day in the chat window.|7.5.1 and later| |display.context.background|True = Display, false = Do not display|Display background highlighting when displaying saved transcripts in chats.|7.5.1 and later| |root.location|A string of a valid path on the computer.|Location for automatically saved chats Directory path. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. Example using absolute path: ``` com.ibm.collaboration. realtime.chat.logging/ root.location= C:\\Documents\\user\\ SametimeTranscripts Releases 8.0.2 and later support the use of a relative path. Example using a path relative to the user profile folder for Windows\u2122 and Mac: ``` com.ibm.collaboration. realtime.chat.logging /root.location= \\\\SametimeTranscripts For Linux\u2122, ``` com.ibm.collaboration. realtime.chat.logging/ root.location= SametimeTranscripts |7.5.1 and later| |save.file.location|A string of a valid path on the computer.|Default location for manually saved chats. Do not use '\\\\' as the file separator. Use '\\\\\\\\' or '/' instead. Example using absolute path: ``` com.ibm.collaboration.realtime.chat.logging/ave.file.location=C:\\\\Documents\\\\user\\\\SavedChats Releases 8.0.2 and later support the use of a relative path. Example using a path relative to the user profile folder for Windows and Mac: ``` com.ibm.collaboration. realtime.chat.logging/ root.location= \\SametimeTranscripts For Linux, ``` com.ibm.collaboration. realtime.chat.logging/ root.location= SametimeTranscripts |7.5.1 and later| |prompt.save|Boolean|If using mail service for logging, specify whether to display a confirmation after manually saving chats to the mail file.|7.5.1 and later| |reset.user.resets.logging.prefs|Boolean. Default is false.|Specify whether to prompt user to reset logging preferences after resetting user.|7.5.1 and later| |firsttime.askprefs|Boolean. Default is true.|Specify whether to prompt user to set logging preferences when Sametime\u00ae launched for the first time. When the value is set to true, loggging.enabled should also be set to define the default enablement state for saving chat transcripts.|7.5.1 and later| |schedule.delete.old|Boolean. Default is false.|Specify whether or not to start the scheduled file-based chat history deletion task. The task is scheduled at a 12-hour interval, starting from the login time. The local chat history is deleted automatically only if the corresponding server policy is enabled for it.|8.5.2 IFR1 and later| Attribute Variable type Description Release allowSaveOverride Boolean. Default is true. Specifies whether to show menu item \"Prevent Transcript save\" in chat window Tools menu 7.5.1 and later noPersonListLiveNames Boolean. Default is false. Specifies whether to use Live Names in the chat history viewer person list. 8.5.2 and later Attribute Variable type Description Release showuserinfo Boolean. Default is true. Specifies whether or not to display the business card in the chat window. 7.5.1 and later showtimestamp Boolean. Default is true. Specifies whether or not to display timestamps in the chat transcript area. 7.5.1 and later showdatestamp Boolean. Specifies whether or not to display date stamps in the chat transcript area. 7.5.1 and later showemoticons Boolean. Default is true. Specifies whether or not to display emoticons in the chat transcript. 7.5.1 and later usemyfont Boolean. Default is false. Specifies whether or not to override chat partner's font settings with my own. 7.5.1 and later entersend Boolean. Default is true. Specifies whether or not Enter is used to send a message or Shift+Enter. Enter sends, Shift+Enter newline 7.5.1 and later showstatusupdates Boolean. Default is false. Specifies whether or not to display status updates for my chat partner in the transcript. 7.5.1 and later esccloses Boolean. Default is true. Specifies whether or not ESC closes the chat window. 7.5.1 and later showuserleft Boolean. Default is false. Specifies whether or not to display a message when my chat partner closes their chat window. 7.5.1 and later warnWhenInMtg Boolean. Default is true. Specifies whether or not to pop a warning message when I try to open a chat window when a person is in a meeting. 7.5.1 and later warnWhenAway Boolean. Default is true. Specifies whether or not to pop a warning message when I try to open a chat window when a person is away. 7.5.1 and later dontPopWhenMin Boolean. Default is true. Specifies whether or not the chat window pops to the front when I manually minimize the window. 7.5.1 and later showActionBar Boolean. Default is true. Specifies whether or not to show the actions toolbar. 7.5.1 and later showStatusBar Boolean. Default is true. Specifies whether or not to show the status message bar at the bottom. 7.5.1 and later showToolsBar Boolean. Default is true. Specifies whether or not to show the message tools bar. 7.5.1 and later showSendButton Boolean. Specifies whether or not to show send button in the chat window. 7.5.1 and later showQuickFind Boolean. Specifies whether or not to show quick find in the tabbed chat window. 7.5.1 and later useTabs Boolean. Default is false. Specifies whether or not to use a single tabbed window for all chats. 7.5.1 and later horizontalTabs Boolean. Default is false (vertical). Specifies whether to use horizontal or vertical tabs. Does not apply unless useTabs is true. 7.5.1 and later warnNewMessageArrived Boolean. Default is true. Specifies whether or not to pop a message dialog when I try to close the window at the same time I am receiving a message. 7.5.1 and later warnNewMessageArrived Threshhold |Long. Default is 450.|It is used in conjunction with the warnNewMessageArrived preference. When warnNewMessageArrived is true, if set this to 10000 (10 seconds) and try to close chat window 5 seconds after the last message, the warning dialog will pop up. It is not recommended to change the default value.|7.5.1 and later| |useDefaultGO|Boolean. Default is true.|Specifies whether or not to use the system's default orientation for typing or to manually set one.|7.5.1 and later| |sendAreaGO|Integer.|Specifies which orientation to use in the typing area if useDefaultGO is false. Not set by default because useDefaultGO is true. Only accepts two values, 67108864 (SWT.RIGHT_TO_LEFT) or 33554432 (SWT.LEFT_TO_RIGHT)|7.5.1 and later| |timeformat|Integer. Default is 12.|Specifies the default time format to use (12 or 24 hour clock).|7.5.1 and later| |maxChatsShowWarn|Boolean|If using tabbed window, specifies whether or not to show a warning dialog when current chat count exceeds the predefined value.|7.5.1 and later| |maxChats|Integer. Default is 50.|Specifies a predefined value for maxChatsShowWarn|7.5.1 and later| |saveChats|Boolean|Specifies whether or not to save opened chats across sessions.|7.5.1 and later| |transcript.view.limit|Integer. Default is 0.|Specifies a limit to the number of text/graphics lines that are maintained in the chat window. Setting to 0 means no limit.|8.5 and later| |ProvideTabbedBrowser Cache |Boolean. Default is true.|Specifies whether when using tabbed chats if the browser window can be cached to improve memory when the chat is not active.|8.5.1 and later| |persistPosition|Boolean|Specify whether to remember the position of chat windows. If it is set, the chat window position is remembered each time on window close action and used as the default location for next chat window open action.|8.5 and later| |xpos|Integer|Specify the X value of chat window position.|7.5.1 and later| |ypos|Integer|Specify the Y value of chat window position.|7.5.1 and later| |windowWidth|Integer|Specify the width of chat window.|7.5.1 and later| |windowHeight|Integer|Specify the height of chat window.|7.5.1 and later| |sendAreaHeight|Integer|Specify the height of the input box of chat window.|7.5.1 and later| |replyWithOfflineMessageContent|Boolean. Default is true.|Specify whether or not to include the received message when replying to an offline message.|8.5.2 IFR1 and later| |disableInlineIME|Boolean. Default is false.|Specify whether or not to disable inline mode for an input method in the chat input area of a chat window. Apply this setting if there is problem with a specific input method, such as a Traditional Chinese Input Method Editor (IME).|8.5.2 IFR1 and later| |participantsViewPosition|String.|Specifies the location of the n-way chat participant list panel on either the side of the chat transcript area.|9.0 and later| |sortTabs|Boolean. Default is false.|Specifies whether or not to sort the chat tabs in a tabbed chat window.|9.0 and later| |sortOrder|String. Default is two_way:n_way:chat_room|Specifies the order of chat tab types, if the setting is true for sortTabs. The user can change the sort of if desired.|9.0 and later| |autoAcceptInvitation|Boolean. Default is true.|Allows invitee to automatically join a multi-person chat without clicking Accept when invited to join the chat.|9.0 and later| |allowOthersToSeeTranscript|Boolean. Default is true.|Allows new chat invitees to see the previous chat transcript when they join the chat.|9.0 and later| Attribute Variable type Description Release disableRichText Boolean. Default is false. Specifies whether or not to disable rich text for all chats. 8.5.2 and later disableRichTextWithAnon Boolean. Default is false. Specifies whether or not to disable rich text for chats with anonymous users. 8.5.2 and later Parent topic: Sametime client preferences","title":"Chat preferences {#config_client_chat_history_pref .concept}"},{"location":"admin/config_client_chat_history_pref.html#config_client_chat_history_pref","text":"The following tables list the chat preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release enableNwayRichText Boolean. Default is false. Specifies whether or not to enable the client to support rich text in a multi-user chat. Rich text is enabled in a multi-user chat session only if all clients participating in the chat session have this setting enabled. 8.5.1.1 and later Attribute Variable type Description Release days.storage.max A positive number. Delete saved transcripts after this number of days. This setting will be overwritten by the value set on the server policy. 7.5.1 and later delete.old A positive number. The default is false. Delete saved transcripts. This setting will be overwritten by the value set on the server policy. If the policy allows transcripts to be deleted, set this value to true initially. 7.5.1 and later logging.default 0 = Automatically save chats, 1 = Do not automatically save chats, 2 = Prompt me to save chats Default chat logging action. 7.5.1 and later logging.enabled Boolean. Default is false. Specify whether or not to save a local copy of the chat history. This attribute works in conjunction with the Sametime policy IDs . Edit the policies as necessary. If the server policy is not configured to allow save chat, this setting is ignored. Attention: Local chat history is unencrypted. To disable and restrict users from saving a local copy, refer to Updating client preferences with the managed-settings.xml file . |7.5.1 and later| |logging.service|service.notes = Notes logging, service.file = File system logging|Type of chat logging service.| | |display.context|True = Display, false = Do not display|Display the saved transcript between two users for the current day in the chat window.|7.5.1 and later| |display.context.background|True = Display, false = Do not display|Display background highlighting when displaying saved transcripts in chats.|7.5.1 and later| |root.location|A string of a valid path on the computer.|Location for automatically saved chats Directory path. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. Example using absolute path: ``` com.ibm.collaboration. realtime.chat.logging/ root.location= C:\\Documents\\user\\ SametimeTranscripts Releases 8.0.2 and later support the use of a relative path. Example using a path relative to the user profile folder for Windows\u2122 and Mac: ``` com.ibm.collaboration. realtime.chat.logging /root.location= \\\\SametimeTranscripts For Linux\u2122, ``` com.ibm.collaboration. realtime.chat.logging/ root.location= SametimeTranscripts |7.5.1 and later| |save.file.location|A string of a valid path on the computer.|Default location for manually saved chats. Do not use '\\\\' as the file separator. Use '\\\\\\\\' or '/' instead. Example using absolute path: ``` com.ibm.collaboration.realtime.chat.logging/ave.file.location=C:\\\\Documents\\\\user\\\\SavedChats Releases 8.0.2 and later support the use of a relative path. Example using a path relative to the user profile folder for Windows and Mac: ``` com.ibm.collaboration. realtime.chat.logging/ root.location= \\SametimeTranscripts For Linux, ``` com.ibm.collaboration. realtime.chat.logging/ root.location= SametimeTranscripts |7.5.1 and later| |prompt.save|Boolean|If using mail service for logging, specify whether to display a confirmation after manually saving chats to the mail file.|7.5.1 and later| |reset.user.resets.logging.prefs|Boolean. Default is false.|Specify whether to prompt user to reset logging preferences after resetting user.|7.5.1 and later| |firsttime.askprefs|Boolean. Default is true.|Specify whether to prompt user to set logging preferences when Sametime\u00ae launched for the first time. When the value is set to true, loggging.enabled should also be set to define the default enablement state for saving chat transcripts.|7.5.1 and later| |schedule.delete.old|Boolean. Default is false.|Specify whether or not to start the scheduled file-based chat history deletion task. The task is scheduled at a 12-hour interval, starting from the login time. The local chat history is deleted automatically only if the corresponding server policy is enabled for it.|8.5.2 IFR1 and later| Attribute Variable type Description Release allowSaveOverride Boolean. Default is true. Specifies whether to show menu item \"Prevent Transcript save\" in chat window Tools menu 7.5.1 and later noPersonListLiveNames Boolean. Default is false. Specifies whether to use Live Names in the chat history viewer person list. 8.5.2 and later Attribute Variable type Description Release showuserinfo Boolean. Default is true. Specifies whether or not to display the business card in the chat window. 7.5.1 and later showtimestamp Boolean. Default is true. Specifies whether or not to display timestamps in the chat transcript area. 7.5.1 and later showdatestamp Boolean. Specifies whether or not to display date stamps in the chat transcript area. 7.5.1 and later showemoticons Boolean. Default is true. Specifies whether or not to display emoticons in the chat transcript. 7.5.1 and later usemyfont Boolean. Default is false. Specifies whether or not to override chat partner's font settings with my own. 7.5.1 and later entersend Boolean. Default is true. Specifies whether or not Enter is used to send a message or Shift+Enter. Enter sends, Shift+Enter newline 7.5.1 and later showstatusupdates Boolean. Default is false. Specifies whether or not to display status updates for my chat partner in the transcript. 7.5.1 and later esccloses Boolean. Default is true. Specifies whether or not ESC closes the chat window. 7.5.1 and later showuserleft Boolean. Default is false. Specifies whether or not to display a message when my chat partner closes their chat window. 7.5.1 and later warnWhenInMtg Boolean. Default is true. Specifies whether or not to pop a warning message when I try to open a chat window when a person is in a meeting. 7.5.1 and later warnWhenAway Boolean. Default is true. Specifies whether or not to pop a warning message when I try to open a chat window when a person is away. 7.5.1 and later dontPopWhenMin Boolean. Default is true. Specifies whether or not the chat window pops to the front when I manually minimize the window. 7.5.1 and later showActionBar Boolean. Default is true. Specifies whether or not to show the actions toolbar. 7.5.1 and later showStatusBar Boolean. Default is true. Specifies whether or not to show the status message bar at the bottom. 7.5.1 and later showToolsBar Boolean. Default is true. Specifies whether or not to show the message tools bar. 7.5.1 and later showSendButton Boolean. Specifies whether or not to show send button in the chat window. 7.5.1 and later showQuickFind Boolean. Specifies whether or not to show quick find in the tabbed chat window. 7.5.1 and later useTabs Boolean. Default is false. Specifies whether or not to use a single tabbed window for all chats. 7.5.1 and later horizontalTabs Boolean. Default is false (vertical). Specifies whether to use horizontal or vertical tabs. Does not apply unless useTabs is true. 7.5.1 and later warnNewMessageArrived Boolean. Default is true. Specifies whether or not to pop a message dialog when I try to close the window at the same time I am receiving a message. 7.5.1 and later warnNewMessageArrived Threshhold |Long. Default is 450.|It is used in conjunction with the warnNewMessageArrived preference. When warnNewMessageArrived is true, if set this to 10000 (10 seconds) and try to close chat window 5 seconds after the last message, the warning dialog will pop up. It is not recommended to change the default value.|7.5.1 and later| |useDefaultGO|Boolean. Default is true.|Specifies whether or not to use the system's default orientation for typing or to manually set one.|7.5.1 and later| |sendAreaGO|Integer.|Specifies which orientation to use in the typing area if useDefaultGO is false. Not set by default because useDefaultGO is true. Only accepts two values, 67108864 (SWT.RIGHT_TO_LEFT) or 33554432 (SWT.LEFT_TO_RIGHT)|7.5.1 and later| |timeformat|Integer. Default is 12.|Specifies the default time format to use (12 or 24 hour clock).|7.5.1 and later| |maxChatsShowWarn|Boolean|If using tabbed window, specifies whether or not to show a warning dialog when current chat count exceeds the predefined value.|7.5.1 and later| |maxChats|Integer. Default is 50.|Specifies a predefined value for maxChatsShowWarn|7.5.1 and later| |saveChats|Boolean|Specifies whether or not to save opened chats across sessions.|7.5.1 and later| |transcript.view.limit|Integer. Default is 0.|Specifies a limit to the number of text/graphics lines that are maintained in the chat window. Setting to 0 means no limit.|8.5 and later| |ProvideTabbedBrowser Cache |Boolean. Default is true.|Specifies whether when using tabbed chats if the browser window can be cached to improve memory when the chat is not active.|8.5.1 and later| |persistPosition|Boolean|Specify whether to remember the position of chat windows. If it is set, the chat window position is remembered each time on window close action and used as the default location for next chat window open action.|8.5 and later| |xpos|Integer|Specify the X value of chat window position.|7.5.1 and later| |ypos|Integer|Specify the Y value of chat window position.|7.5.1 and later| |windowWidth|Integer|Specify the width of chat window.|7.5.1 and later| |windowHeight|Integer|Specify the height of chat window.|7.5.1 and later| |sendAreaHeight|Integer|Specify the height of the input box of chat window.|7.5.1 and later| |replyWithOfflineMessageContent|Boolean. Default is true.|Specify whether or not to include the received message when replying to an offline message.|8.5.2 IFR1 and later| |disableInlineIME|Boolean. Default is false.|Specify whether or not to disable inline mode for an input method in the chat input area of a chat window. Apply this setting if there is problem with a specific input method, such as a Traditional Chinese Input Method Editor (IME).|8.5.2 IFR1 and later| |participantsViewPosition|String.|Specifies the location of the n-way chat participant list panel on either the side of the chat transcript area.|9.0 and later| |sortTabs|Boolean. Default is false.|Specifies whether or not to sort the chat tabs in a tabbed chat window.|9.0 and later| |sortOrder|String. Default is two_way:n_way:chat_room|Specifies the order of chat tab types, if the setting is true for sortTabs. The user can change the sort of if desired.|9.0 and later| |autoAcceptInvitation|Boolean. Default is true.|Allows invitee to automatically join a multi-person chat without clicking Accept when invited to join the chat.|9.0 and later| |allowOthersToSeeTranscript|Boolean. Default is true.|Allows new chat invitees to see the previous chat transcript when they join the chat.|9.0 and later| Attribute Variable type Description Release disableRichText Boolean. Default is false. Specifies whether or not to disable rich text for all chats. 8.5.2 and later disableRichTextWithAnon Boolean. Default is false. Specifies whether or not to disable rich text for chats with anonymous users. 8.5.2 and later Parent topic: Sametime client preferences","title":"Chat preferences"},{"location":"admin/config_client_comm_pref.html","text":"Community preferences The following tables list the default community preferences and alternate community preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description kioskMode Boolean Kiosk mode allows multiple users to share the same client on the same computer. If set to true, the client deletes personal information after each user logs out. When this setting is enabled, the automatic login, password saving, and locally stored contacts list features are not available because they require the use of personal information. logoutWhenIdle Boolean Specifies whether the client should disconnect from the server (and log out the user) when idle. logoutWhenIdleOverride Boolean Provides a mechanism to override the user's logoutWhenIdle setting. If set to true, then the client will always logout when idle, and the user will not be able to change the value the Preferences settings. logoutWhenLocked Boolean Sets the initial value of whether or not the Embedded client logs out when Notes is locked (disconnected from the server). This preference only applies to new users. logoutWhenLockedOverride Boolean Provides a mechanism to override the user's logoutWhenLocked setting. If set to true, then the client will always logout when locked, and the user will not be able to change the value in the Preferences settings. tokenLoginOnly Boolean Specifies the whether to force login by token for the default community. Takes effect the next time that the client connects to the Community Server. host String Specifies the initial community host value. Takes effect the next time that the client connects to the Community Server. authServerUrl String Specifies the initial authentication server URL value for the default community. Takes effect the next time that the client connects to the Community Server. defaultAuthType String Specifies the authentication type for the default community. For user name and password authentication, this setting should be left empty. For Domino\u00ae Single Sign-On in the Embedded client, the value should be set to ST-DOMINO-SSO. For a SAML authentication community, the value should be set to SAML. keepAlive Boolean. Default is true. The keepAlive feature allows the client remain connected to the Sametime Community Server even when the user is inactive, so that the user remains logged in to Sametime. In the client, use the Server tab of the Preferences > Server Communities > community page to specify how often a keep-alive signal should be sent to the server. keepAliveInterval Integer. Default is 60. Specifies the initial keep alive interval value for the default community. Takes effect the next time that the client connects to the Community Server. loginByToken Boolean If set to true, the client will log in to the community using a token other than user name and password pair. For example, the Embedded client can use Domino Single Sign-On with the LTPA token, and the Connect client uses can use the SAML token. Takes effect the next time that the client connects to the Community Server. name String Specifies the initial name for the default community. Takes effect the next time that the client connects to the Community Server. port Integer. Default is 1533. Specifies the initial community port value. Takes effect the next time that the client connects to the Community Server. savePassword Boolean. Default is false. Specifies whether the user's password is saved for the default community. Takes effect the next time that the client connects to the Community Server. connectionType String. Valid values include direct, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, https-proxy, reverse-proxy, useBrowserSettings. Specifies the connection protocol that is used when the client connects to the default community. Takes effect the next time that the client connects to the Community Server. proxyHost String Specifies the host name for the Sametime Proxy Server that browser clients connect to before accessing the Community server where the default community is hosted. Takes effect the next time that the client connects to the Community Server. proxyPort Integer Specifies the port number that listens for browser client connections on the Sametime Proxy Server used with the Community server where the default community is hosted. Takes effect the next time that the client connects to the Community Server proxyUserName String Specifies the initial proxy user name for the default community. Takes effect the next time that the client connects to the Community Server. proxyPassword String Specifies the initial proxy password for the default community. Takes effect the next time that the client connects to the Community Server. proxyResolvesLocally Boolean Specifies the initial proxyResolvesLocally value for the default community. Takes effect the next the time that the client connects to the Community Server. loginTokenRefreshInterval Integer. Default is 900000. Specifies the login token refresh interval in milliseconds. The default is 900000, or 15 minutes. samlTrustedSites String Specifies the URL of a trusted site for use with SAML authentication. Example: samlTrustedSites=url1,url2 . Attribute Variable type Description altCommunityConfig.managedIds String Required. A comma-delimited set of IDs that represents each alternate community. For example, altCommunityConfig.managedIDs=altHost1,altHost2 defines two alternate communities named altHost1 and altHost 2. altCommunityConfig.altHost.altHostID.targetCommunityHost String Required. The host name of the alternate community. altHostID represents the ID you defined for the alternate community in the managedIds preference, such as altHost1. altCommunityConfig.altHost.altHostID.enabled Boolean. Default is true. Enables the alternate community configuration. altCommunityConfig.altHost.altHostID.weight Integer. Default is 0. The weight of the alternate community configuration relative to other alternate communities. The higher the value, the greater the weight. For example, a connection to an alternate community with a weight of 2 is tried before one with a weight of 0. Regardless of the assigned weight, the client attempts a connection to the last successful alternate community first. altCommunityConfig.altHost.altHostID.type String. The default is postDefaultConfig. Determines if the alternate community connection is tried before the default community or after. A value of postDefaultConfig attempts the connection after trying to connect to the default community. A value of preDefaultConfig attempts to connect to the alternate community first. altCommunityConfig.altHost.altHostID.attemptCount Integer. The default is 1. Sets the number of times the client attempts to connect to the alternate community before trying another community. altCommunityConfig.altHost.altHostID.fallbackOnly String By default, this preference is not set and the client attempts a connection to the last successful alternate community first. If you set the preference fallbackOnly for a specific alternate community, it will never be retried first, even if it was the last successful connection. altCommunityConfig.altHost.altHostID.host String Defines a secondary alternate community host to connect to if the host defined in the targetCommunityHost preference cannot be reached. For example, if the targetCommunityHost is im1.example.com, the host could point to im2.example.com. altCommunityConfig.altHost.altHostID.authServerUrl String Specifies the server URL for Single Sign-on authentication. altCommunityConfig.altHost.altHostID.authType String Defines the method used for Single sign-on authentication. Use TAM-SPNEGO for SPNEGO authentication or ST-DOMINO-SSO for Domino authentication within Notes. altCommunityConfig.altHost.altHostID.port Integer The port to use if other than the default 1533. altCommunityConfig.altHost.altHostID.connectionType String. Valid values include direct, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, https-proxy, reverse-proxy. Determines how the client connects to the alternate community. The default is direct . altCommunityConfig.altHost.altHostID.proxyHost String Specifies the initial proxy host value for the alternate community. altCommunityConfig.altHost.altHostID.proxyPort Integer The port of the proxy. altCommunityConfig.altHost.altHostID.loginByToken Boolean Determines if the client logs in by token. If the token login fails and the password is available, the client attempts password-based authentication instead. tryLastSuccesfulConfigFirst Boolean. Default is true. Determines if the client first tries the alternate community it last connected to successfully. If you change the value to false, the client always attempts Connections to the alternate communities in the default priority order set in the managedIDs list, regardless of which alternate community connection was successful last. Parent topic: Sametime client preferences","title":"Community preferences {#config_client_comm_pref .concept}"},{"location":"admin/config_client_comm_pref.html#config_client_comm_pref","text":"The following tables list the default community preferences and alternate community preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description kioskMode Boolean Kiosk mode allows multiple users to share the same client on the same computer. If set to true, the client deletes personal information after each user logs out. When this setting is enabled, the automatic login, password saving, and locally stored contacts list features are not available because they require the use of personal information. logoutWhenIdle Boolean Specifies whether the client should disconnect from the server (and log out the user) when idle. logoutWhenIdleOverride Boolean Provides a mechanism to override the user's logoutWhenIdle setting. If set to true, then the client will always logout when idle, and the user will not be able to change the value the Preferences settings. logoutWhenLocked Boolean Sets the initial value of whether or not the Embedded client logs out when Notes is locked (disconnected from the server). This preference only applies to new users. logoutWhenLockedOverride Boolean Provides a mechanism to override the user's logoutWhenLocked setting. If set to true, then the client will always logout when locked, and the user will not be able to change the value in the Preferences settings. tokenLoginOnly Boolean Specifies the whether to force login by token for the default community. Takes effect the next time that the client connects to the Community Server. host String Specifies the initial community host value. Takes effect the next time that the client connects to the Community Server. authServerUrl String Specifies the initial authentication server URL value for the default community. Takes effect the next time that the client connects to the Community Server. defaultAuthType String Specifies the authentication type for the default community. For user name and password authentication, this setting should be left empty. For Domino\u00ae Single Sign-On in the Embedded client, the value should be set to ST-DOMINO-SSO. For a SAML authentication community, the value should be set to SAML. keepAlive Boolean. Default is true. The keepAlive feature allows the client remain connected to the Sametime Community Server even when the user is inactive, so that the user remains logged in to Sametime. In the client, use the Server tab of the Preferences > Server Communities > community page to specify how often a keep-alive signal should be sent to the server. keepAliveInterval Integer. Default is 60. Specifies the initial keep alive interval value for the default community. Takes effect the next time that the client connects to the Community Server. loginByToken Boolean If set to true, the client will log in to the community using a token other than user name and password pair. For example, the Embedded client can use Domino Single Sign-On with the LTPA token, and the Connect client uses can use the SAML token. Takes effect the next time that the client connects to the Community Server. name String Specifies the initial name for the default community. Takes effect the next time that the client connects to the Community Server. port Integer. Default is 1533. Specifies the initial community port value. Takes effect the next time that the client connects to the Community Server. savePassword Boolean. Default is false. Specifies whether the user's password is saved for the default community. Takes effect the next time that the client connects to the Community Server. connectionType String. Valid values include direct, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, https-proxy, reverse-proxy, useBrowserSettings. Specifies the connection protocol that is used when the client connects to the default community. Takes effect the next time that the client connects to the Community Server. proxyHost String Specifies the host name for the Sametime Proxy Server that browser clients connect to before accessing the Community server where the default community is hosted. Takes effect the next time that the client connects to the Community Server. proxyPort Integer Specifies the port number that listens for browser client connections on the Sametime Proxy Server used with the Community server where the default community is hosted. Takes effect the next time that the client connects to the Community Server proxyUserName String Specifies the initial proxy user name for the default community. Takes effect the next time that the client connects to the Community Server. proxyPassword String Specifies the initial proxy password for the default community. Takes effect the next time that the client connects to the Community Server. proxyResolvesLocally Boolean Specifies the initial proxyResolvesLocally value for the default community. Takes effect the next the time that the client connects to the Community Server. loginTokenRefreshInterval Integer. Default is 900000. Specifies the login token refresh interval in milliseconds. The default is 900000, or 15 minutes. samlTrustedSites String Specifies the URL of a trusted site for use with SAML authentication. Example: samlTrustedSites=url1,url2 . Attribute Variable type Description altCommunityConfig.managedIds String Required. A comma-delimited set of IDs that represents each alternate community. For example, altCommunityConfig.managedIDs=altHost1,altHost2 defines two alternate communities named altHost1 and altHost 2. altCommunityConfig.altHost.altHostID.targetCommunityHost String Required. The host name of the alternate community. altHostID represents the ID you defined for the alternate community in the managedIds preference, such as altHost1. altCommunityConfig.altHost.altHostID.enabled Boolean. Default is true. Enables the alternate community configuration. altCommunityConfig.altHost.altHostID.weight Integer. Default is 0. The weight of the alternate community configuration relative to other alternate communities. The higher the value, the greater the weight. For example, a connection to an alternate community with a weight of 2 is tried before one with a weight of 0. Regardless of the assigned weight, the client attempts a connection to the last successful alternate community first. altCommunityConfig.altHost.altHostID.type String. The default is postDefaultConfig. Determines if the alternate community connection is tried before the default community or after. A value of postDefaultConfig attempts the connection after trying to connect to the default community. A value of preDefaultConfig attempts to connect to the alternate community first. altCommunityConfig.altHost.altHostID.attemptCount Integer. The default is 1. Sets the number of times the client attempts to connect to the alternate community before trying another community. altCommunityConfig.altHost.altHostID.fallbackOnly String By default, this preference is not set and the client attempts a connection to the last successful alternate community first. If you set the preference fallbackOnly for a specific alternate community, it will never be retried first, even if it was the last successful connection. altCommunityConfig.altHost.altHostID.host String Defines a secondary alternate community host to connect to if the host defined in the targetCommunityHost preference cannot be reached. For example, if the targetCommunityHost is im1.example.com, the host could point to im2.example.com. altCommunityConfig.altHost.altHostID.authServerUrl String Specifies the server URL for Single Sign-on authentication. altCommunityConfig.altHost.altHostID.authType String Defines the method used for Single sign-on authentication. Use TAM-SPNEGO for SPNEGO authentication or ST-DOMINO-SSO for Domino authentication within Notes. altCommunityConfig.altHost.altHostID.port Integer The port to use if other than the default 1533. altCommunityConfig.altHost.altHostID.connectionType String. Valid values include direct, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, https-proxy, reverse-proxy. Determines how the client connects to the alternate community. The default is direct . altCommunityConfig.altHost.altHostID.proxyHost String Specifies the initial proxy host value for the alternate community. altCommunityConfig.altHost.altHostID.proxyPort Integer The port of the proxy. altCommunityConfig.altHost.altHostID.loginByToken Boolean Determines if the client logs in by token. If the token login fails and the password is available, the client attempts password-based authentication instead. tryLastSuccesfulConfigFirst Boolean. Default is true. Determines if the client first tries the alternate community it last connected to successfully. If you change the value to false, the client always attempts Connections to the alternate communities in the default priority order set in the managedIDs list, regardless of which alternate community connection was successful last. Parent topic: Sametime client preferences","title":"Community preferences"},{"location":"admin/config_client_conn_alt.html","text":"Configuring alternate communities for clients Configuring alternate communities gives users more options for logging in from their Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. For example, you can have a default community that allows users to connect using a direct connection when they are in the office and you can add an alternate community that allows them to connect to the same community through a reverse proxy server connection from home. Alternate communities are defined using preferences. Before clients install, you can define preferences with a plugin_customization.ini file that goes into effect when the client logs in after installation. You can also define preferences after installation and distribute them through the policy-based managed-settings.xml file. Follow these steps to define an alternate community. These steps assume that you have already installed and set up the servers that host the community. First define the managed IDs for each alternate community using the \"com.ibm.collaboration.realtime.community/altCommunityConfig.managedIds\" preference. This is a comma-delimited set of IDs you define. Then for each ID, add the Community preferences reserved for alternate communities. For example: com.ibm.collaboration.realtime.community/altCommunityConfig.managedIds=altHost1,altHost2 com.ibm.collaboration.realtime.community/altCommunityConfig.altHost1.<attribute>=<attribute value> com.ibm.collaboration.realtime.community/altCommunityConfig.altHost2.<attribute>=<attribute value> After you configure alternate communities and distribute them through preferences, they become available when users attempt to log in to the default community. If the default community is not available, the client then tries the alternate communities that you have defined. The client continues through the list of alternate communities until it connects successfully or all attempts fail. Parent topic: Connecting the Sametime Connect client to the Sametime server","title":"Configuring alternate communities for clients {#config_client_conn_alt .task}"},{"location":"admin/config_client_conn_alt.html#config_client_conn_alt","text":"Configuring alternate communities gives users more options for logging in from their Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. For example, you can have a default community that allows users to connect using a direct connection when they are in the office and you can add an alternate community that allows them to connect to the same community through a reverse proxy server connection from home. Alternate communities are defined using preferences. Before clients install, you can define preferences with a plugin_customization.ini file that goes into effect when the client logs in after installation. You can also define preferences after installation and distribute them through the policy-based managed-settings.xml file. Follow these steps to define an alternate community. These steps assume that you have already installed and set up the servers that host the community. First define the managed IDs for each alternate community using the \"com.ibm.collaboration.realtime.community/altCommunityConfig.managedIds\" preference. This is a comma-delimited set of IDs you define. Then for each ID, add the Community preferences reserved for alternate communities. For example: com.ibm.collaboration.realtime.community/altCommunityConfig.managedIds=altHost1,altHost2 com.ibm.collaboration.realtime.community/altCommunityConfig.altHost1.<attribute>=<attribute value> com.ibm.collaboration.realtime.community/altCommunityConfig.altHost2.<attribute>=<attribute value> After you configure alternate communities and distribute them through preferences, they become available when users attempt to log in to the default community. If the default community is not available, the client then tries the alternate communities that you have defined. The client continues through the list of alternate communities until it connects successfully or all attempts fail. Parent topic: Connecting the Sametime Connect client to the Sametime server","title":"Configuring alternate communities for clients"},{"location":"admin/config_client_conn_direct.html","text":"Connecting the client through a direct connection over TCP/IP When a user starts the Sametime\u00ae Connect Client with a Direct connection preference, the client connects to the Sametime Community server using a unique Sametime protocol over TCP/IP. By default, the Community Server listens for this connection on port 1533. Use this preference when the connection does not need to occur through a proxy server, and the network does not block TCP/IP connections on the port used by the client. A successful connection depends on these prerequisites. The client's preferences for the server community must contain a valid Host server and Server community port for a TCP/IP connection. The Sametime Community Server Connection Settings for Client Connections , as defined in the Sametime configuration database, must match the Host server and Server community port specified in the client. The default port is 1533. The connection can fail if it must pass through a proxy server or network that prevents direct TCP/IP Connections on the specified port. Follow these steps to select the Direct connection method for the client. From the Sametime Connect client, click File > Preferences . Do one of the following: To select this connection method for all server communities, click Server Communities . In the \"Global connection settings\" section, click Direct connection and click OK . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Deselect Use global connection settings , then click Direct connection and click OK . Click OK to close the Preferences window. Parent topic: Choosing a method for connecting to the Sametime Community Server","title":"Connecting the client through a direct connection over TCP/IP {#config_client_conn_direct .task}"},{"location":"admin/config_client_conn_direct.html#config_client_conn_direct","text":"When a user starts the Sametime\u00ae Connect Client with a Direct connection preference, the client connects to the Sametime Community server using a unique Sametime protocol over TCP/IP. By default, the Community Server listens for this connection on port 1533. Use this preference when the connection does not need to occur through a proxy server, and the network does not block TCP/IP connections on the port used by the client. A successful connection depends on these prerequisites. The client's preferences for the server community must contain a valid Host server and Server community port for a TCP/IP connection. The Sametime Community Server Connection Settings for Client Connections , as defined in the Sametime configuration database, must match the Host server and Server community port specified in the client. The default port is 1533. The connection can fail if it must pass through a proxy server or network that prevents direct TCP/IP Connections on the specified port. Follow these steps to select the Direct connection method for the client. From the Sametime Connect client, click File > Preferences . Do one of the following: To select this connection method for all server communities, click Server Communities . In the \"Global connection settings\" section, click Direct connection and click OK . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Deselect Use global connection settings , then click Direct connection and click OK . Click OK to close the Preferences window. Parent topic: Choosing a method for connecting to the Sametime Community Server","title":"Connecting the client through a direct connection over TCP/IP"},{"location":"admin/config_client_conn_host.html","text":"Defining the host server and port for connecting to a Sametime server The Sametime Connect client uses the Host and Server community port preferences to determine the host name and port it should use when attempting a connection to the Sametime server. This section also includes optional steps for configuring client with the Sametime Mux. Verify the Connectivity settings for client Connections set for the Sametime server. The client's successful connection depends on defining the correct host name , port , and connection method for the server. In the Client Connections section, type the fully qualified host name and port from which services listen for direct TCP/IP Connections and HTTP-tunneled Connections from the services clients. In the HTTP Tunneled Client Connections section, type the fully qualified Host Name and Port from which Community Services clients can make HTTP-tunneled Connections to the services multiplexer. Services clients can make HTTP-tunneled connections on both ports 80 and 8082 by default. In the HTTPS Tunneled Client Connections section, type the fully qualified Host Name and Port from which the Community Services clients attempt HTTPS Connections when accessing the Sametime server through an HTTPS proxy server. Follow these instructions to define the host server and port for a server community. Follow these instructions to define the host server and port for a server community. From the Sametime Connect client, click File > Preferences . Select Server Communities . Do one of the following: To add a new server connection, click Add New Server Community . To change an existing server connection, expand the Server Community list and select the community name. For an existing community, proceed to the next step. For a new community, provide a community name and log in information. Click the Connection tab . Provide a host server and port. The method chosen for connecting to the server may also affect the Host server and port you use here. Host server The client connects most efficiently when the Host server matches the home Sametime server defined in the user's Person document. If you have set up a rotating DNS system for load balancing, specify the DNS name ( for example, sametime.cscluster.com ) of the rotating DNS system in this field. If you have configured the environment to support load balancing, users must enter the fully qualified host name of the Load Balancer Server in this field. Server community port The method you choose for connecting to the server also affects the port setting. For example, if you choose Direct connection using HTTP protocol and the client that operates behind a firewall that only allows outbound Connections on port 80, you must change the default port from 1533 to port 80. For an existing community, click OK to close the Preferences window. For a new community, click OK to save and then OK to close the Preferences window. Configuring client connectivity to the Sametime Community Mux After you have configured the stand-alone HCL\u00ae Sametime\u00ae Community Mux, give users the fully qualified host name of the server and instruct them to set up their Sametime Connect Client preferences to connect to the multiplexer instead of directly to the Sametime Community Server. Each user must update the Sametime Connect Client with the DNS name of the Sametime Community Mux server. If you have deployed multiple Sametime Community Mux servers, distribute users evenly among the servers. For example, with two multiplexers, direct half of your users to use multiplexer 1 and the other half to use multiplexer 2. Procedure Open Sametime Connect Client. Choose File > Preferences > Server Communities . In the Server Community field, type the fully qualified host name of the Sametime Community Mux server, such as messaging.example.com, as instructed by the administrator. Parent topic: Connecting the Sametime Connect client to the Sametime server","title":"Defining the host server and port for connecting to a Sametime server {#config_client_conn_host .task}"},{"location":"admin/config_client_conn_host.html#config_client_conn_host","text":"The Sametime Connect client uses the Host and Server community port preferences to determine the host name and port it should use when attempting a connection to the Sametime server. This section also includes optional steps for configuring client with the Sametime Mux. Verify the Connectivity settings for client Connections set for the Sametime server. The client's successful connection depends on defining the correct host name , port , and connection method for the server. In the Client Connections section, type the fully qualified host name and port from which services listen for direct TCP/IP Connections and HTTP-tunneled Connections from the services clients. In the HTTP Tunneled Client Connections section, type the fully qualified Host Name and Port from which Community Services clients can make HTTP-tunneled Connections to the services multiplexer. Services clients can make HTTP-tunneled connections on both ports 80 and 8082 by default. In the HTTPS Tunneled Client Connections section, type the fully qualified Host Name and Port from which the Community Services clients attempt HTTPS Connections when accessing the Sametime server through an HTTPS proxy server. Follow these instructions to define the host server and port for a server community. Follow these instructions to define the host server and port for a server community. From the Sametime Connect client, click File > Preferences . Select Server Communities . Do one of the following: To add a new server connection, click Add New Server Community . To change an existing server connection, expand the Server Community list and select the community name. For an existing community, proceed to the next step. For a new community, provide a community name and log in information. Click the Connection tab . Provide a host server and port. The method chosen for connecting to the server may also affect the Host server and port you use here. Host server The client connects most efficiently when the Host server matches the home Sametime server defined in the user's Person document. If you have set up a rotating DNS system for load balancing, specify the DNS name ( for example, sametime.cscluster.com ) of the rotating DNS system in this field. If you have configured the environment to support load balancing, users must enter the fully qualified host name of the Load Balancer Server in this field. Server community port The method you choose for connecting to the server also affects the port setting. For example, if you choose Direct connection using HTTP protocol and the client that operates behind a firewall that only allows outbound Connections on port 80, you must change the default port from 1533 to port 80. For an existing community, click OK to close the Preferences window. For a new community, click OK to save and then OK to close the Preferences window. Configuring client connectivity to the Sametime Community Mux After you have configured the stand-alone HCL\u00ae Sametime\u00ae Community Mux, give users the fully qualified host name of the server and instruct them to set up their Sametime Connect Client preferences to connect to the multiplexer instead of directly to the Sametime Community Server. Each user must update the Sametime Connect Client with the DNS name of the Sametime Community Mux server. If you have deployed multiple Sametime Community Mux servers, distribute users evenly among the servers. For example, with two multiplexers, direct half of your users to use multiplexer 1 and the other half to use multiplexer 2. Procedure Open Sametime Connect Client. Choose File > Preferences > Server Communities . In the Server Community field, type the fully qualified host name of the Sametime Community Mux server, such as messaging.example.com, as instructed by the administrator. Parent topic: Connecting the Sametime Connect client to the Sametime server","title":"Defining the host server and port for connecting to a Sametime server"},{"location":"admin/config_client_conn_meth_ov.html","text":"Choosing a method for connecting to the Sametime Community Server The Sametime\u00ae Connect Client uses the connection method specified in Server Communities preferences. The Global connection settings apply to all Connections unless a specific server community uses an alternate connection method as defined on its Connection tab in the Preferences window. This section explains how to configure the different types of connections. Connecting the client through a direct connection over TCP/IP When a user starts the Sametime Connect Client with a Direct connection preference, the client connects to the Sametime Community server using a unique Sametime protocol over TCP/IP. By default, the Community Server listens for this connection on port 1533. Use this preference when the connection does not need to occur through a proxy server, and the network does not block TCP/IP connections on the port used by the client. Connecting the client through a TLS connection When a user starts the Sametime Connect Client with a Direct connection using TLS preference, the client connects to the Sametime Community server using the Transport Layer Security (TLS) protocol. Use this preference for clients that must connect through a FIPS proxy server. Connecting the client through a proxy connection When a user starts the Sametime Connect Client with a Use proxy preference, the client connects to the HCL\u00ae Sametime Community server through a SOCKS, HTTP, or HTTPS proxy server. Parent topic: Connecting the Sametime Connect client to the Sametime server","title":"Choosing a method for connecting to the Sametime Community Server {#config_client_conn_meth_ov .concept}"},{"location":"admin/config_client_conn_meth_ov.html#config_client_conn_meth_ov","text":"The Sametime\u00ae Connect Client uses the connection method specified in Server Communities preferences. The Global connection settings apply to all Connections unless a specific server community uses an alternate connection method as defined on its Connection tab in the Preferences window. This section explains how to configure the different types of connections. Connecting the client through a direct connection over TCP/IP When a user starts the Sametime Connect Client with a Direct connection preference, the client connects to the Sametime Community server using a unique Sametime protocol over TCP/IP. By default, the Community Server listens for this connection on port 1533. Use this preference when the connection does not need to occur through a proxy server, and the network does not block TCP/IP connections on the port used by the client. Connecting the client through a TLS connection When a user starts the Sametime Connect Client with a Direct connection using TLS preference, the client connects to the Sametime Community server using the Transport Layer Security (TLS) protocol. Use this preference for clients that must connect through a FIPS proxy server. Connecting the client through a proxy connection When a user starts the Sametime Connect Client with a Use proxy preference, the client connects to the HCL\u00ae Sametime Community server through a SOCKS, HTTP, or HTTPS proxy server. Parent topic: Connecting the Sametime Connect client to the Sametime server","title":"Choosing a method for connecting to the Sametime Community Server"},{"location":"admin/config_client_conn_ov.html","text":"Connecting the Sametime Connect client to the Sametime server The Sametime Connect client uses Server Communities preferences to connect to the Sametime server for presence and chat features. The client finds a Sametime server using the server community's host server and server community ports specified in Preferences > Server Communities . The client connects most efficiently when the host server matches the home Sametime server defined in the user's Person document, if the Home Sametime server field is being used. The corresponding Connectivity settings for the Sametime\u00ae Community Server must contain the correct IP addresses or DNS names and ports for clients to connect successfully. The client uses the connection method selected in the Global connection settings for all Server Communities unless the server community's Connection tab specifies an alternate method. This section explains how to configure the different types of connections. Defining the host server and port for connecting to a Sametime server The Sametime Connect client uses the Host and Server community port preferences to determine the host name and port it should use when attempting a connection to the Sametime server. This section also includes optional steps for configuring client with the Sametime Mux. Choosing a method for connecting to the Sametime Community Server The Sametime Connect Client uses the connection method specified in Server Communities preferences. The Global connection settings apply to all Connections unless a specific server community uses an alternate connection method as defined on its Connection tab in the Preferences window. Configuring alternate communities for clients Configuring alternate communities gives users more options for logging in from their Sametime Connect Client and Sametime Embedded Client for Notes\u00ae. For example, you can have a default community that allows users to connect using a direct connection when they are in the office and you can add an alternate community that allows them to connect to the same community through a reverse proxy server connection from home. Parent topic: Managing Sametime clients","title":"Connecting the Sametime Connect client to the Sametime server {#config_client_conn_ov .concept}"},{"location":"admin/config_client_conn_ov.html#config_client_conn_ov","text":"The Sametime Connect client uses Server Communities preferences to connect to the Sametime server for presence and chat features. The client finds a Sametime server using the server community's host server and server community ports specified in Preferences > Server Communities . The client connects most efficiently when the host server matches the home Sametime server defined in the user's Person document, if the Home Sametime server field is being used. The corresponding Connectivity settings for the Sametime\u00ae Community Server must contain the correct IP addresses or DNS names and ports for clients to connect successfully. The client uses the connection method selected in the Global connection settings for all Server Communities unless the server community's Connection tab specifies an alternate method. This section explains how to configure the different types of connections. Defining the host server and port for connecting to a Sametime server The Sametime Connect client uses the Host and Server community port preferences to determine the host name and port it should use when attempting a connection to the Sametime server. This section also includes optional steps for configuring client with the Sametime Mux. Choosing a method for connecting to the Sametime Community Server The Sametime Connect Client uses the connection method specified in Server Communities preferences. The Global connection settings apply to all Connections unless a specific server community uses an alternate connection method as defined on its Connection tab in the Preferences window. Configuring alternate communities for clients Configuring alternate communities gives users more options for logging in from their Sametime Connect Client and Sametime Embedded Client for Notes\u00ae. For example, you can have a default community that allows users to connect using a direct connection when they are in the office and you can add an alternate community that allows them to connect to the same community through a reverse proxy server connection from home. Parent topic: Managing Sametime clients","title":"Connecting the Sametime Connect client to the Sametime server"},{"location":"admin/config_client_conn_prox.html","text":"Connecting the client through a proxy connection When a user starts the Sametime\u00ae Connect Client with a Use proxy preference, the client connects to the HCL\u00ae Sametime Community server through a SOCKS, HTTP, or HTTPS proxy server. For this connection to succeed, the port specified as the Community port setting in the Sametime Connect Client client's Sametime Connectivity settings must match a port number specified in one of these settings in the Sametime configuration database. In the Client Connections section, type the fully qualified Host Name and Port from which Community Services listen for direct TCP/IP Connections and HTTP-tunneled Connections from the Community Services clients. A direct TCP/IP connection occurs when the Sametime client uses a unique Sametime protocol over TCP/IP to establish a connection with the Community Services. In the HTTP Tunneled Client Connections section, type the fully qualified Host Name and Port from which Community Services clients can make HTTP-tunneled Connections to the Community Services multiplexer. Community Services clients can make HTTP-tunneled Connections on both ports 80 and 8082 by default. Port 8082 ensures compatibility with previous Sametime releases. In previous releases, Sametime clients made HTTP-tunneled connections to the Community Services only on port 8082. If a Sametime Connect Client from a previous Sametime release attempts an HTTP-tunneled connection to a Sametime server, the client might attempt this connection on port 8082. Note: If the administrator manually configures HTTP tunneling on port 80, the Community Services > Client connections > Port number setting default to port 1533, and the Community Services > HTTP tunneled client Connections > Port number settings are ports 80 and 8082. In this configuration, the Sametime Connect Client can complete an HTTP-tunneled connection to the Community Services multiplexer using either port 1533, 80, or 8082. In the HTTPS Tunneled Client Connections section, type the fully qualified Host Name and Port from which the Community Services clients attempt HTTPS Connections when accessing the Sametime Community Server through an HTTPS proxy server. If a Community Services client connects to the Sametime Community server using HTTPS, the HTTPS connection method is used, but the data passed on this connection is not encrypted. The connection methods for the Use proxy option differ in the types of proxy servers they use for connecting. SOCKS4 or SOCKS5 proxy The client uses the Standard Sametime protocol over TCP/IP for this connection. The connection from the SOCKS proxy to the Community Services occurs on the \"Community port\" (default 1533) specified in the Sametime Connect Client Sametime Connectivity settings. This connection is the same as the Use my Internet Explorer HTTP settings preference for a user who has a SOCKS proxy server selected in Internet Explorer. Reverse proxy This selection allows the Sametime Connect Client to connect to a Sametime server over the Internet through a reverse proxy server. The reverse proxy server protects internal HTTP servers by providing a single point of access to the internal network. HTTP Proxy The client encases the standard Sametime protocol connection information within an HTTP request. Sametime Connect Client connects to the HTTP proxy, and the HTTP proxy server connects to the Community Services multiplexer on the Sametime server on behalf of the Sametime Connect Client. The HTTP connection to the Community Services multiplexer occurs on the \"Community port\" (default 1533) specified in the Sametime Connect Client Sametime Connectivity settings. The Community Services multiplexer on the Sametime server listens for HTTP Connections on all ports specified in the Port number field in the Client Connections section within the Community Services settings of the Sametime configuration database. Follow these steps to select the Use proxy method for the client. From the Sametime Connect Client, click File > Preferences . Do one of the following: To select this connection method for all server communities, click Server Communities . In the \"Global connection settings\" section, click Use proxy . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Clear Use global connection settings , then click Use proxy . Select the appropriate Proxy type . Use SOCKS4 proxy Use SOCKS5 proxy Use reverse proxy Use HTTP proxy Specify the additional values for the proxy type you selected. Use SOCKS4 proxy Provide the Host name (DNS name or IP address) of the SOCKS proxy server and the port required to connect to the SOCKS proxy server. Use SOCKS5 proxy Provide the Host name (DNS name or IP address) of the SOCKS proxy server and the port required to connect to the SOCKS proxy server. Specify the user name and password required for SOCKS5 authentication. Select the Resolve server name locally option to have the client resolve the Sametime Community server name by calling a local DNS server and passing the IP address to the SOCKS proxy server. If your organization, for security reasons, prohibits internal DNS servers from resolving the names of external servers, do not select the Resolve server name locally option. The SOCKS proxy resolves the external server name by calling a different DNS server instead, one that is not available on the internal network. Use reverse proxy Specify the URL of the reverse proxy server. The clients uses this URL to access the reverse proxy server. The reverse proxy server handles requests from the client and redirects the request to the Sametime server Specify the User name and Password for authenticating with the reverse proxy server. Use HTTP proxy Specify the Host name (DNS name or IP address) of the HTTP proxy server and the port required to connect to the HTTP proxy server Specify the user name and password required for authentication to the HTTP proxy server if they are required. Click OK to close the Preferences window. Parent topic: Choosing a method for connecting to the Sametime Community Server","title":"Connecting the client through a proxy connection {#config_client_conn_prox .task}"},{"location":"admin/config_client_conn_prox.html#config_client_conn_prox","text":"When a user starts the Sametime\u00ae Connect Client with a Use proxy preference, the client connects to the HCL\u00ae Sametime Community server through a SOCKS, HTTP, or HTTPS proxy server. For this connection to succeed, the port specified as the Community port setting in the Sametime Connect Client client's Sametime Connectivity settings must match a port number specified in one of these settings in the Sametime configuration database. In the Client Connections section, type the fully qualified Host Name and Port from which Community Services listen for direct TCP/IP Connections and HTTP-tunneled Connections from the Community Services clients. A direct TCP/IP connection occurs when the Sametime client uses a unique Sametime protocol over TCP/IP to establish a connection with the Community Services. In the HTTP Tunneled Client Connections section, type the fully qualified Host Name and Port from which Community Services clients can make HTTP-tunneled Connections to the Community Services multiplexer. Community Services clients can make HTTP-tunneled Connections on both ports 80 and 8082 by default. Port 8082 ensures compatibility with previous Sametime releases. In previous releases, Sametime clients made HTTP-tunneled connections to the Community Services only on port 8082. If a Sametime Connect Client from a previous Sametime release attempts an HTTP-tunneled connection to a Sametime server, the client might attempt this connection on port 8082. Note: If the administrator manually configures HTTP tunneling on port 80, the Community Services > Client connections > Port number setting default to port 1533, and the Community Services > HTTP tunneled client Connections > Port number settings are ports 80 and 8082. In this configuration, the Sametime Connect Client can complete an HTTP-tunneled connection to the Community Services multiplexer using either port 1533, 80, or 8082. In the HTTPS Tunneled Client Connections section, type the fully qualified Host Name and Port from which the Community Services clients attempt HTTPS Connections when accessing the Sametime Community Server through an HTTPS proxy server. If a Community Services client connects to the Sametime Community server using HTTPS, the HTTPS connection method is used, but the data passed on this connection is not encrypted. The connection methods for the Use proxy option differ in the types of proxy servers they use for connecting. SOCKS4 or SOCKS5 proxy The client uses the Standard Sametime protocol over TCP/IP for this connection. The connection from the SOCKS proxy to the Community Services occurs on the \"Community port\" (default 1533) specified in the Sametime Connect Client Sametime Connectivity settings. This connection is the same as the Use my Internet Explorer HTTP settings preference for a user who has a SOCKS proxy server selected in Internet Explorer. Reverse proxy This selection allows the Sametime Connect Client to connect to a Sametime server over the Internet through a reverse proxy server. The reverse proxy server protects internal HTTP servers by providing a single point of access to the internal network. HTTP Proxy The client encases the standard Sametime protocol connection information within an HTTP request. Sametime Connect Client connects to the HTTP proxy, and the HTTP proxy server connects to the Community Services multiplexer on the Sametime server on behalf of the Sametime Connect Client. The HTTP connection to the Community Services multiplexer occurs on the \"Community port\" (default 1533) specified in the Sametime Connect Client Sametime Connectivity settings. The Community Services multiplexer on the Sametime server listens for HTTP Connections on all ports specified in the Port number field in the Client Connections section within the Community Services settings of the Sametime configuration database. Follow these steps to select the Use proxy method for the client. From the Sametime Connect Client, click File > Preferences . Do one of the following: To select this connection method for all server communities, click Server Communities . In the \"Global connection settings\" section, click Use proxy . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Clear Use global connection settings , then click Use proxy . Select the appropriate Proxy type . Use SOCKS4 proxy Use SOCKS5 proxy Use reverse proxy Use HTTP proxy Specify the additional values for the proxy type you selected. Use SOCKS4 proxy Provide the Host name (DNS name or IP address) of the SOCKS proxy server and the port required to connect to the SOCKS proxy server. Use SOCKS5 proxy Provide the Host name (DNS name or IP address) of the SOCKS proxy server and the port required to connect to the SOCKS proxy server. Specify the user name and password required for SOCKS5 authentication. Select the Resolve server name locally option to have the client resolve the Sametime Community server name by calling a local DNS server and passing the IP address to the SOCKS proxy server. If your organization, for security reasons, prohibits internal DNS servers from resolving the names of external servers, do not select the Resolve server name locally option. The SOCKS proxy resolves the external server name by calling a different DNS server instead, one that is not available on the internal network. Use reverse proxy Specify the URL of the reverse proxy server. The clients uses this URL to access the reverse proxy server. The reverse proxy server handles requests from the client and redirects the request to the Sametime server Specify the User name and Password for authenticating with the reverse proxy server. Use HTTP proxy Specify the Host name (DNS name or IP address) of the HTTP proxy server and the port required to connect to the HTTP proxy server Specify the user name and password required for authentication to the HTTP proxy server if they are required. Click OK to close the Preferences window. Parent topic: Choosing a method for connecting to the Sametime Community Server","title":"Connecting the client through a proxy connection"},{"location":"admin/config_client_conn_tls.html","text":"Connecting the client through a TLS connection When a user starts the Sametime\u00ae Connect Client with a Direct connection using TLS preference, the client connects to the Sametime Community server using the Transport Layer Security (TLS) protocol. Use this preference for clients that must connect through a FIPS proxy server. A successful connection depends on these prerequisites. The client's preferences for the server community must contain a valid Host server and Server community port for a TLS connection. The server must be configured to allow TLS connections from clients, see the topic: Securing connections between Sametime Community and Sametime clients . Follow these steps to select the Direct connection using TLS method for the client. From the Sametime Connect client client, click File > Preferences . Do one of the following: To select this connection method for all server communities, click Server Communities . In the \"Global connection settings\" section, click Direct connection using TLS and click OK . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Uncheck Use global connection settings , then click Direct connection using TLS and click OK . Click OK to close the Preferences window. Parent topic: Choosing a method for connecting to the Sametime Community Server","title":"Connecting the client through a TLS connection {#config_client_conn_tls .task}"},{"location":"admin/config_client_conn_tls.html#config_client_conn_tls","text":"When a user starts the Sametime\u00ae Connect Client with a Direct connection using TLS preference, the client connects to the Sametime Community server using the Transport Layer Security (TLS) protocol. Use this preference for clients that must connect through a FIPS proxy server. A successful connection depends on these prerequisites. The client's preferences for the server community must contain a valid Host server and Server community port for a TLS connection. The server must be configured to allow TLS connections from clients, see the topic: Securing connections between Sametime Community and Sametime clients . Follow these steps to select the Direct connection using TLS method for the client. From the Sametime Connect client client, click File > Preferences . Do one of the following: To select this connection method for all server communities, click Server Communities . In the \"Global connection settings\" section, click Direct connection using TLS and click OK . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Uncheck Use global connection settings , then click Direct connection using TLS and click OK . Click OK to close the Preferences window. Parent topic: Choosing a method for connecting to the Sametime Community Server","title":"Connecting the client through a TLS connection"},{"location":"admin/config_client_connect_pref.html","text":"Selecting preferences in the client In the Preferences dialog of the HCL\u00ae Sametime\u00ae Connect Client and the Notes\u00ae client, users can choose any Sametime preferences that have not been locked by the administrator. Log in to the client. Depending on the client, open preferences: Embedded in the Notes client - Click File > Preferences > Sametime . In the Sametime Connect Client - Click the Actions and Preferences menu (the gear icon). Click a feature in the features list. Select the preferred behavior for that feature, and then click Apply . Click OK . Any preferences set using this method can be overwritten by Sametime policies. Preferences set using this method are stored in the end-user's profile directory either within an XML document or a .pref file. Parent topic: Sametime client configuration options","title":"Selecting preferences in the client {#config_client_connect_pref .task}"},{"location":"admin/config_client_connect_pref.html#config_client_connect_pref","text":"In the Preferences dialog of the HCL\u00ae Sametime\u00ae Connect Client and the Notes\u00ae client, users can choose any Sametime preferences that have not been locked by the administrator. Log in to the client. Depending on the client, open preferences: Embedded in the Notes client - Click File > Preferences > Sametime . In the Sametime Connect Client - Click the Actions and Preferences menu (the gear icon). Click a feature in the features list. Select the preferred behavior for that feature, and then click Apply . Click OK . Any preferences set using this method can be overwritten by Sametime policies. Preferences set using this method are stored in the end-user's profile directory either within an XML document or a .pref file. Parent topic: Sametime client configuration options","title":"Selecting preferences in the client"},{"location":"admin/config_client_contact_list_pref.html","text":"Contact list preferences The following table lists the contact list preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release sortGroups Boolean. Default is true. Specifies whether by default to alphabetically sort groups in the contact list. 7.5.1 and later sortContacts Boolean. Default is true. Specifies whether by default to alphabetically sort contacts in the contact list. 7.5.1 and later alwaysEditStatusMsgActive Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to available. 7.5.1 and later alwaysEditStatusMsgAway Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to away. 7.5.1 and later alwaysEditStatusMsgInMtg Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to in a meeting. 7.5.1 and later alwaysEditStatusMsgDnd Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to in a do not disturb. 7.5.1 and later showActionToolBar Boolean. Default is true. Specifies whether by default to show the action toolbar in the contact list window. 7.5.1 and later showStatusBar Boolean. Default is true. Specifies whether by default to show the status bar in the contact list window. 7.5.1 and later showQuickFind Boolean. Default is true. Specifies whether by default to show quick find in the contact list window. 7.5.1 and later flashAddedContacts Boolean. Default is true. Specifies whether by default to flash newly added contacts. 7.5.1 and later showAddDialogSuccess Boolean. Default is true. Specifies whether by default to open a confirmation dialog after a contact has been added. 7.5.1 and later showAddGroupSuccess Boolean. Default is true. Specifies whether by default to open a confirmation dialog after a group has been added. 7.5.1 and later showAddPartnerSuccess Boolean. Default is true. Specifies whether by default to open a confirmation dialog after a chat partner has been added (through add button in chat window). 7.5.1 and later autoSyncDefaultCommunity BuddyList |Boolean. Default is true.|Specifies whether by default to synchronize the 7.5 XML buddylist with the previous pre 7.5 contact list used by older clients. Windows\u00ae only.|7.5.1 and later| |launchAtStartup|Boolean|Specifies whether or not to launch Sametime at system startup. The preference is valid only for stand-alone clients and windows platform. If the preference is set it in plugin_customization.ini or managed preferences framework, it does not work for the first launch of the Sametime client.|7.5.1 and later| |hideWhenMinimized|Boolean. Default is true.|Specifies whether by default to hide the contact list window when minimized. The preference is valid only for the Sametime Connect Client for Microsoft\u00ae Windows.|7.5.1 and later| |showCommunityIconBackground|Boolean. Default is false.|Specifies whether by default to show the community icon behind the contacts.|7.5.1 and later| |statusImgBackgroundTransparency|Integer. Default is 60.|Specifies the transparency of the community background image. 0 is very prominent, 100 is completely transparent.|7.5.1 and later| |showHoverBizCard|Boolean. Default is true.|Specifies whether or not to show the business card when hovering over contacts.|7.5.1 and later| |hideContactsWhenOffline|Boolean. Default is false.|Specifies whether or not to hide the contact list tree when offline.|7.5.1 and later| |showBuddyListConflictDialog|Boolean. Default is true.|Specifies whether or not to show the contact list conflict dialog when synchronizing the remote contact list.|7.5.1 and later| |buddyListConflictPref|String. Default is merge.|Specifies the default behavior to follow in case of a remote/local synchronization conflict. Options include \"merge\", \"keepLocal\", and \"replaceLocal\".|7.5.1 and later| |warnWhenWatchLimitExceeded|Boolean|When the watch limit is in effect, specifies whether or not to warn user when the number of contacts that can be monitored is exceeded.|7.5.1 and later| |warnWhenContactLimitExceeded|Boolean|When \"LimitContactListSize\" policy is set, specifies whether or not to warn user when the contact list is approaching the maximum number allowed.|7.5.1 and later| |showShortNames|Boolean|Specifies whether or not to show short names for contact list.|7.5.1 and later| |alwaysOnTop|Boolean|Specifies whether or not to make the contact list window stay visible.|7.5.1 and later| |showOnlineOnly|Boolean|Specifies whether or not to show online contacts only in the contact list window.|7.5.1 and later| |showStatusToolBar|Boolean|Specifies whether or not to show My Status ToolBar in the contact list window.|7.5.1 and later| |showContactList|Boolean|Specifies whether or not to show the contact list in the contact list window.|7.5.1 and later| |confirmMultiPartyChatInvitation ToMoreThanX |Boolean|Specifies whether or not to confirm when users start events with groups larger than a specified number of people. The number value is specified by confirmMultiPartyChatInvitationToMoreThanXNumber .|7.5.1 and later| |confirmMultiPartyChatInvitation ToMoreThanXNumber |Integer|Specifies a limit number. See confirmMultiPartyChatInvitationToMoreThanX .|7.5.1 and later| |launchMinimized|Boolean.|Specifies whether or not to minimize Sametime when launching. It's valid only for stand-alone clients and windows platform.|8.5 and later| |limitPublicGroupSubscriptions |Boolean. Default is true.|Takes contact list size of public groups into account to calculate the contact list size limit. The default value is true, which means that users cannot add a public group to their contact lists if doing so exceeds the contact list size. If users already have public groups in their contact lists, this preference causes the client to subscribe to each group in the list, from smallest to largest, until the limit is reached. Any other groups remaining in the contact list are shown as unsubscribed groups. Disabling a group subscription causes the client to add as many groups from the unsubscribed list as it can until the contact list size is reached again. Setting the value to false does not include the contact list size of public groups to calculate the contact list size limit.|8.5.2 and later| |maxPublicGroupSize |Integer|The maximum number of contacts a public group can have that allows users to subscribe to it. Groups that exceed this size cannot be added to the contact list. If the group already exists in the contact list, users cannot subscribe to the group. You can set this preference when the limitPublicGroupSubscriptions preference is enabled.|8.5.2 and later| |excludedPublicGroups |String|A comma-delimited list of public group names that should not be subscribed to (for example, employees_Active,employees_All). Groups in this list cannot be added to the contact list. If the group already exists in the contact list, users cannot subscribe to the group. You can set this preference when the limitPublicGroupSubscriptions preference is enabled.|8.5.2 and later| |allowExportContactList|Boolean , default value is false|Specifies whether to allow users to export their contact list. When set to false , the Export Contact List option does not display on the Manage Contact List menu..|9.0.1 and later| Attribute Variable type Description Release HIDE_PANEL_com.ibm.collaboration.realtime.filteredbuddies.shelfview Boolean. Default is true. Specifies whether the Primary Contacts panel displays in the contacts list. 7.5.1 and later Parent topic: Sametime client preferences","title":"Contact list preferences {#config_client_contact_list_pref .concept}"},{"location":"admin/config_client_contact_list_pref.html#config_client_contact_list_pref","text":"The following table lists the contact list preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release sortGroups Boolean. Default is true. Specifies whether by default to alphabetically sort groups in the contact list. 7.5.1 and later sortContacts Boolean. Default is true. Specifies whether by default to alphabetically sort contacts in the contact list. 7.5.1 and later alwaysEditStatusMsgActive Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to available. 7.5.1 and later alwaysEditStatusMsgAway Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to away. 7.5.1 and later alwaysEditStatusMsgInMtg Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to in a meeting. 7.5.1 and later alwaysEditStatusMsgDnd Boolean. Default is true. Specifies whether by default to always edit the status message when changing status to in a do not disturb. 7.5.1 and later showActionToolBar Boolean. Default is true. Specifies whether by default to show the action toolbar in the contact list window. 7.5.1 and later showStatusBar Boolean. Default is true. Specifies whether by default to show the status bar in the contact list window. 7.5.1 and later showQuickFind Boolean. Default is true. Specifies whether by default to show quick find in the contact list window. 7.5.1 and later flashAddedContacts Boolean. Default is true. Specifies whether by default to flash newly added contacts. 7.5.1 and later showAddDialogSuccess Boolean. Default is true. Specifies whether by default to open a confirmation dialog after a contact has been added. 7.5.1 and later showAddGroupSuccess Boolean. Default is true. Specifies whether by default to open a confirmation dialog after a group has been added. 7.5.1 and later showAddPartnerSuccess Boolean. Default is true. Specifies whether by default to open a confirmation dialog after a chat partner has been added (through add button in chat window). 7.5.1 and later autoSyncDefaultCommunity BuddyList |Boolean. Default is true.|Specifies whether by default to synchronize the 7.5 XML buddylist with the previous pre 7.5 contact list used by older clients. Windows\u00ae only.|7.5.1 and later| |launchAtStartup|Boolean|Specifies whether or not to launch Sametime at system startup. The preference is valid only for stand-alone clients and windows platform. If the preference is set it in plugin_customization.ini or managed preferences framework, it does not work for the first launch of the Sametime client.|7.5.1 and later| |hideWhenMinimized|Boolean. Default is true.|Specifies whether by default to hide the contact list window when minimized. The preference is valid only for the Sametime Connect Client for Microsoft\u00ae Windows.|7.5.1 and later| |showCommunityIconBackground|Boolean. Default is false.|Specifies whether by default to show the community icon behind the contacts.|7.5.1 and later| |statusImgBackgroundTransparency|Integer. Default is 60.|Specifies the transparency of the community background image. 0 is very prominent, 100 is completely transparent.|7.5.1 and later| |showHoverBizCard|Boolean. Default is true.|Specifies whether or not to show the business card when hovering over contacts.|7.5.1 and later| |hideContactsWhenOffline|Boolean. Default is false.|Specifies whether or not to hide the contact list tree when offline.|7.5.1 and later| |showBuddyListConflictDialog|Boolean. Default is true.|Specifies whether or not to show the contact list conflict dialog when synchronizing the remote contact list.|7.5.1 and later| |buddyListConflictPref|String. Default is merge.|Specifies the default behavior to follow in case of a remote/local synchronization conflict. Options include \"merge\", \"keepLocal\", and \"replaceLocal\".|7.5.1 and later| |warnWhenWatchLimitExceeded|Boolean|When the watch limit is in effect, specifies whether or not to warn user when the number of contacts that can be monitored is exceeded.|7.5.1 and later| |warnWhenContactLimitExceeded|Boolean|When \"LimitContactListSize\" policy is set, specifies whether or not to warn user when the contact list is approaching the maximum number allowed.|7.5.1 and later| |showShortNames|Boolean|Specifies whether or not to show short names for contact list.|7.5.1 and later| |alwaysOnTop|Boolean|Specifies whether or not to make the contact list window stay visible.|7.5.1 and later| |showOnlineOnly|Boolean|Specifies whether or not to show online contacts only in the contact list window.|7.5.1 and later| |showStatusToolBar|Boolean|Specifies whether or not to show My Status ToolBar in the contact list window.|7.5.1 and later| |showContactList|Boolean|Specifies whether or not to show the contact list in the contact list window.|7.5.1 and later| |confirmMultiPartyChatInvitation ToMoreThanX |Boolean|Specifies whether or not to confirm when users start events with groups larger than a specified number of people. The number value is specified by confirmMultiPartyChatInvitationToMoreThanXNumber .|7.5.1 and later| |confirmMultiPartyChatInvitation ToMoreThanXNumber |Integer|Specifies a limit number. See confirmMultiPartyChatInvitationToMoreThanX .|7.5.1 and later| |launchMinimized|Boolean.|Specifies whether or not to minimize Sametime when launching. It's valid only for stand-alone clients and windows platform.|8.5 and later| |limitPublicGroupSubscriptions |Boolean. Default is true.|Takes contact list size of public groups into account to calculate the contact list size limit. The default value is true, which means that users cannot add a public group to their contact lists if doing so exceeds the contact list size. If users already have public groups in their contact lists, this preference causes the client to subscribe to each group in the list, from smallest to largest, until the limit is reached. Any other groups remaining in the contact list are shown as unsubscribed groups. Disabling a group subscription causes the client to add as many groups from the unsubscribed list as it can until the contact list size is reached again. Setting the value to false does not include the contact list size of public groups to calculate the contact list size limit.|8.5.2 and later| |maxPublicGroupSize |Integer|The maximum number of contacts a public group can have that allows users to subscribe to it. Groups that exceed this size cannot be added to the contact list. If the group already exists in the contact list, users cannot subscribe to the group. You can set this preference when the limitPublicGroupSubscriptions preference is enabled.|8.5.2 and later| |excludedPublicGroups |String|A comma-delimited list of public group names that should not be subscribed to (for example, employees_Active,employees_All). Groups in this list cannot be added to the contact list. If the group already exists in the contact list, users cannot subscribe to the group. You can set this preference when the limitPublicGroupSubscriptions preference is enabled.|8.5.2 and later| |allowExportContactList|Boolean , default value is false|Specifies whether to allow users to export their contact list. When set to false , the Export Contact List option does not display on the Manage Contact List menu..|9.0.1 and later| Attribute Variable type Description Release HIDE_PANEL_com.ibm.collaboration.realtime.filteredbuddies.shelfview Boolean. Default is true. Specifies whether the Primary Contacts panel displays in the contacts list. 7.5.1 and later Parent topic: Sametime client preferences","title":"Contact list preferences"},{"location":"admin/config_client_discontinue_xml_file.html","text":"Discontinuing managed preferences To stop setting preferences through the Expeditor managed settings framework, remove the reference to the managed-settings.xml or managed-community-configs.xml file(s) and unlock any previously read-only settings. Managed settings that were previously pushed to the clients as read-only will continue to be used until they are specifically removed from the client. Unlock all managed settings by editing the XML file: Change all \"isLocked=true\" instances to \"isLocked=false\". If the lastModDate atribute was used previously, change the lastModDate attribute to a newer timestamp for all group settings. Otherwise, skip this step. Provision the updated XML file to the client. Discontinue use of the settings.xml file based on the method you used to distribute managed preferences. Method 1: The managed-settings.xml or managed-community-configs.xml file hosted on a web server Remove the managed-settings.xml or managed-community-configs.xml file from the web server. Modify the policies.user.xml and remove the URL that was previously hosting the managed-settings.xml or managed-community-configs.xml. Method 2: The managed-settings.xml file defined in a plugin_customization.ini file. Remove the com.ibm.rcp.managedsettings.provider.file/URL setting from the plugin_customization.ini file and provision the updated file to clients. Parent topic: Updating client preferences with the managed-settings.xml file","title":"Discontinuing managed preferences {#config_client_discontinue_xml_file .task}"},{"location":"admin/config_client_discontinue_xml_file.html#config_client_discontinue_xml_file","text":"To stop setting preferences through the Expeditor managed settings framework, remove the reference to the managed-settings.xml or managed-community-configs.xml file(s) and unlock any previously read-only settings. Managed settings that were previously pushed to the clients as read-only will continue to be used until they are specifically removed from the client. Unlock all managed settings by editing the XML file: Change all \"isLocked=true\" instances to \"isLocked=false\". If the lastModDate atribute was used previously, change the lastModDate attribute to a newer timestamp for all group settings. Otherwise, skip this step. Provision the updated XML file to the client. Discontinue use of the settings.xml file based on the method you used to distribute managed preferences. Method 1: The managed-settings.xml or managed-community-configs.xml file hosted on a web server Remove the managed-settings.xml or managed-community-configs.xml file from the web server. Modify the policies.user.xml and remove the URL that was previously hosting the managed-settings.xml or managed-community-configs.xml. Method 2: The managed-settings.xml file defined in a plugin_customization.ini file. Remove the com.ibm.rcp.managedsettings.provider.file/URL setting from the plugin_customization.ini file and provision the updated file to clients. Parent topic: Updating client preferences with the managed-settings.xml file","title":"Discontinuing managed preferences"},{"location":"admin/config_client_ext_app_pref.html","text":"External application preferences The following table lists the external application preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release external.application.use. default.mail |Boolean. Default is true.|Specifies whether or to use default mail program for email.|7.5.1 and later| |AllowEMailFunction|Boolean. Default is true.|Provides a mechanism for disable/enable the mail function entries. If set to true, user can use mail function in Sametime client; if set to false, the menu/toolbar about mail function will be disabled.|8.0 and later| |external.application.use. custom.browser |Boolean|Specifies whether or not to use a custom browser on Linux\u00ae.|7.5.1 and later| |external.application.use. custom.mail |Boolean|Specifies whether or not to use a custom mail application on Linux.|7.5.1 and later| |external.custom.browser|String|Specifies the custom browser on Linux.|7.5.1 and later| |external.application.mail|String. \"System Default\", \"Notes\", \"Evolution\", \"KMail\" and \"Thunderbird\" on Linux. \" Notes\", \"Outlook Express\u2122\" and other available mail applications on Windows\u00ae. |Specifies the default mail application.|7.5.1 and later| |external.application.use. default.mail |Boolean|Specifies whether or not to use default mail application.|7.5.1 and later| |external.custom.mail|String|Specifies the user mail application on Linux.|7.5.1 and later| |disableHostnameWarning|Boolean. Default is false.|Specifies whether or not to validate that the server name is a fully qualified domain name.|8.5.1 and later| Parent topic: Sametime client preferences","title":"External application preferences {#config_client_ext_app_pref .concept}"},{"location":"admin/config_client_ext_app_pref.html#config_client_ext_app_pref","text":"The following table lists the external application preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release external.application.use. default.mail |Boolean. Default is true.|Specifies whether or to use default mail program for email.|7.5.1 and later| |AllowEMailFunction|Boolean. Default is true.|Provides a mechanism for disable/enable the mail function entries. If set to true, user can use mail function in Sametime client; if set to false, the menu/toolbar about mail function will be disabled.|8.0 and later| |external.application.use. custom.browser |Boolean|Specifies whether or not to use a custom browser on Linux\u00ae.|7.5.1 and later| |external.application.use. custom.mail |Boolean|Specifies whether or not to use a custom mail application on Linux.|7.5.1 and later| |external.custom.browser|String|Specifies the custom browser on Linux.|7.5.1 and later| |external.application.mail|String. \"System Default\", \"Notes\", \"Evolution\", \"KMail\" and \"Thunderbird\" on Linux. \" Notes\", \"Outlook Express\u2122\" and other available mail applications on Windows\u00ae. |Specifies the default mail application.|7.5.1 and later| |external.application.use. default.mail |Boolean|Specifies whether or not to use default mail application.|7.5.1 and later| |external.custom.mail|String|Specifies the user mail application on Linux.|7.5.1 and later| |disableHostnameWarning|Boolean. Default is false.|Specifies whether or not to validate that the server name is a fully qualified domain name.|8.5.1 and later| Parent topic: Sametime client preferences","title":"External application preferences"},{"location":"admin/config_client_file_tran_pref.html","text":"File transfer preferences The following table lists the file transfer preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release allowTransferToAnonymous Boolean. Default is true. Specifies whether or not to disable file transfers to anonymous users. Setting the value to true does not prevent incoming file transfers from anonymous users. 8.5.2 and later saveFileLocation A text string of a valid full path to a folder on the user's computer. Specifies the path on the user's computer where files from File Transfers will be saved. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. Example using absolute path: ``` com.ibm.collaboration.realtime.filetransfer/saveFileLocation=C:\\Documents\\user\\SametimeFileTransfer Releases 8.0.2 and later support the use of a relative path. Example using a path relative to the user profile folder for Windows\u2122 and Mac: ``` com.ibm.collaboration. realtime.filetransfer/ saveFileLocation= \\\\SametimeFileTransfer For Linux\u2122, com.ibm.collaboration. realtime.filetransfer/ saveFileLocation= SametimeFileTransfer |7.5.1 and later| Parent topic: Sametime client preferences","title":"File transfer preferences {#config_client_file_tran_pref .concept}"},{"location":"admin/config_client_file_tran_pref.html#config_client_file_tran_pref","text":"The following table lists the file transfer preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release allowTransferToAnonymous Boolean. Default is true. Specifies whether or not to disable file transfers to anonymous users. Setting the value to true does not prevent incoming file transfers from anonymous users. 8.5.2 and later saveFileLocation A text string of a valid full path to a folder on the user's computer. Specifies the path on the user's computer where files from File Transfers will be saved. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. Example using absolute path: ``` com.ibm.collaboration.realtime.filetransfer/saveFileLocation=C:\\Documents\\user\\SametimeFileTransfer Releases 8.0.2 and later support the use of a relative path. Example using a path relative to the user profile folder for Windows\u2122 and Mac: ``` com.ibm.collaboration. realtime.filetransfer/ saveFileLocation= \\\\SametimeFileTransfer For Linux\u2122, com.ibm.collaboration. realtime.filetransfer/ saveFileLocation= SametimeFileTransfer |7.5.1 and later| Parent topic: Sametime client preferences","title":"File transfer preferences"},{"location":"admin/config_client_location_pref.html","text":"Location preferences The following table lists the location preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release manualModeSelected Boolean Specifies whether or not to detect location changes automatically. 8.5 and later manualModeVisible Boolean Specifies whether the check box \"Do not automatically detect location changes\" is visible. 8.5 and later optIn Boolean Specifies whether or not to share user's location information with other users. 7.5.1 and later advancedView Boolean Specifies whether or not to show the advanced view for Location. 7.5.1 and later showProfWindow Boolean. Default is false. Toggle for do not show the alert for editing location settings at location change again. 7.5.1 and later Parent topic: Sametime client preferences","title":"Location preferences {#config_client_location_pref .concept}"},{"location":"admin/config_client_location_pref.html#config_client_location_pref","text":"The following table lists the location preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release manualModeSelected Boolean Specifies whether or not to detect location changes automatically. 8.5 and later manualModeVisible Boolean Specifies whether the check box \"Do not automatically detect location changes\" is visible. 8.5 and later optIn Boolean Specifies whether or not to share user's location information with other users. 7.5.1 and later advancedView Boolean Specifies whether or not to show the advanced view for Location. 7.5.1 and later showProfWindow Boolean. Default is false. Toggle for do not show the alert for editing location settings at location change again. 7.5.1 and later Parent topic: Sametime client preferences","title":"Location preferences"},{"location":"admin/config_client_login_pref.html","text":"Login preferences The following table lists the login preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release autoLogin Boolean. Default is true. Specifies whether or not to enable the auto-login feature for clients. If this setting is enabled, users can choose whether to use the feature with the Automatically log in setting in the client. 7.5.1 and later enableAutoReconnect Boolean. Default is true. Specifies whether or not to enable automatic re-connection to the Sametime server in case the client is inadvertently disconnected. 7.5.1 and later autoReconnectAttempt Interval |long. Default is 20000.|Specifies the interval in milliseconds at which the client will attempt to reconnect.|7.5.1 and later| |autoReconnectAttempts|long. Default is -1.|Specifies the number of attempts to reconnect. The value -1 means to never stop trying.|7.5.1 and later| |verifyConnectionPriorToLogin |Boolean. Default is true.|Specifies whether or not to verify that a network connection is available before logging in.|7.5.1 and later| |notifyWhenNetConnLost|Boolean. Default is true.|Specifies whether or not to alert the user when the network connection is lost.|7.5.1 and later| |alwaysLoggedIn|Boolean|Keeps \"Automatically log in\" and \"Remember password\" disabled and checked and disables all \"Log out\" menu items.|7.5.1 and later| |disableExit|Boolean|Keeps the \"Exit\" menu items disabled.|7.5.1 and later| |disableHostName|Boolean|Sets edit state of host name text field on login dialog.|7.5.1 and later| |displayResetUserBtn|Boolean|Makes the reset button show or not on the login dialog. If the preference is set to true and com.ibm.collaboration. realtime.communit/host is set to true, the reset button will automatically be disabled.|7.5.1 and later| |allowSave|Boolean|Specifies whether or not to allow saving password.|7.5.1 and later| |earlyStartupLogin|Boolean|Specifies whether or not to show login dialog when the client starts.|7.5.1 and later| |resetUser|Boolean. Default is false.|Specifies whether or not to reset user information when the client starts.|7.5.1 and later| |displayAuthServerSSO|Boolean. Default is true.|Specifies whether or not to display Authentication server information in the community Log In tab.|7.5.1 and later| Parent topic: Sametime client preferences","title":"Login preferences {#config_client_login_pref .concept}"},{"location":"admin/config_client_login_pref.html#config_client_login_pref","text":"The following table lists the login preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release autoLogin Boolean. Default is true. Specifies whether or not to enable the auto-login feature for clients. If this setting is enabled, users can choose whether to use the feature with the Automatically log in setting in the client. 7.5.1 and later enableAutoReconnect Boolean. Default is true. Specifies whether or not to enable automatic re-connection to the Sametime server in case the client is inadvertently disconnected. 7.5.1 and later autoReconnectAttempt Interval |long. Default is 20000.|Specifies the interval in milliseconds at which the client will attempt to reconnect.|7.5.1 and later| |autoReconnectAttempts|long. Default is -1.|Specifies the number of attempts to reconnect. The value -1 means to never stop trying.|7.5.1 and later| |verifyConnectionPriorToLogin |Boolean. Default is true.|Specifies whether or not to verify that a network connection is available before logging in.|7.5.1 and later| |notifyWhenNetConnLost|Boolean. Default is true.|Specifies whether or not to alert the user when the network connection is lost.|7.5.1 and later| |alwaysLoggedIn|Boolean|Keeps \"Automatically log in\" and \"Remember password\" disabled and checked and disables all \"Log out\" menu items.|7.5.1 and later| |disableExit|Boolean|Keeps the \"Exit\" menu items disabled.|7.5.1 and later| |disableHostName|Boolean|Sets edit state of host name text field on login dialog.|7.5.1 and later| |displayResetUserBtn|Boolean|Makes the reset button show or not on the login dialog. If the preference is set to true and com.ibm.collaboration. realtime.communit/host is set to true, the reset button will automatically be disabled.|7.5.1 and later| |allowSave|Boolean|Specifies whether or not to allow saving password.|7.5.1 and later| |earlyStartupLogin|Boolean|Specifies whether or not to show login dialog when the client starts.|7.5.1 and later| |resetUser|Boolean. Default is false.|Specifies whether or not to reset user information when the client starts.|7.5.1 and later| |displayAuthServerSSO|Boolean. Default is true.|Specifies whether or not to display Authentication server information in the community Log In tab.|7.5.1 and later| Parent topic: Sametime client preferences","title":"Login preferences"},{"location":"admin/config_client_mng_xml_pref.html","text":"Configuring Sametime client preferences with the Expeditor managed settings framework You can configure and manage the user's Sametime client preferences for capable clients using the Expeditor managed settings framework. The Sametime clients that are Expeditor based include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This excludes the PWA, web and mobile clients. The Expeditor managed settings framework pulls preference settings from a managed-settings.xml and/or managed-community-configs.xml file hosted on a web server or as a part of the Samtime client installation package. There are two methods to deploy the settings to the user. Method 1: The settings files are hosted on a web server and the URL to the files is defined in either location: In the plugin_customization.ini file as part of the Sametime installation package. This option requires customization of the client installation package. In the user's Sametime policy. Method 2: The managed-settings.xml file can be packaged with the Sametime installation package. This option requires customization of the client installation package. The following topics explain how to configure and update settings using the Expeditor managed settings framework. Configuring Sametime Connect Client preferences in the plugin_customization.ini file Defining a settings file in the plugin_customization.ini file is an alternate method for distributing preferences to the Sametime\u00ae Connect Client. Unlike the managed-settings.xml file posted on an update site, this method does not provide any policy-based distribution of preferences. Updating client preferences with the managed-settings.xml file Sametime rich clients such as the embedded Sametime client in HCL Notes and the full Sametime standalone client are based upon the Eclipse framework. These clients can process a managed-settings.xml file to receive new or updated preferences automatically. The managed-settings.xml file is policy based, and each policy can define a different xml file to apply preferences to different groups of users. Parent topic: Sametime client configuration options","title":"Configuring Sametime client preferences with the Expeditor managed settings framework {#config_client_mng_xml_pref .task}"},{"location":"admin/config_client_mng_xml_pref.html#config_client_mng_xml_pref","text":"You can configure and manage the user's Sametime client preferences for capable clients using the Expeditor managed settings framework. The Sametime clients that are Expeditor based include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This excludes the PWA, web and mobile clients. The Expeditor managed settings framework pulls preference settings from a managed-settings.xml and/or managed-community-configs.xml file hosted on a web server or as a part of the Samtime client installation package. There are two methods to deploy the settings to the user. Method 1: The settings files are hosted on a web server and the URL to the files is defined in either location: In the plugin_customization.ini file as part of the Sametime installation package. This option requires customization of the client installation package. In the user's Sametime policy. Method 2: The managed-settings.xml file can be packaged with the Sametime installation package. This option requires customization of the client installation package. The following topics explain how to configure and update settings using the Expeditor managed settings framework. Configuring Sametime Connect Client preferences in the plugin_customization.ini file Defining a settings file in the plugin_customization.ini file is an alternate method for distributing preferences to the Sametime\u00ae Connect Client. Unlike the managed-settings.xml file posted on an update site, this method does not provide any policy-based distribution of preferences. Updating client preferences with the managed-settings.xml file Sametime rich clients such as the embedded Sametime client in HCL Notes and the full Sametime standalone client are based upon the Eclipse framework. These clients can process a managed-settings.xml file to receive new or updated preferences automatically. The managed-settings.xml file is policy based, and each policy can define a different xml file to apply preferences to different groups of users. Parent topic: Sametime client configuration options","title":"Configuring Sametime client preferences with the Expeditor managed settings framework"},{"location":"admin/config_client_notes_pref.html","text":"Notes preferences The following table lists the Notes\u00ae preferences that can be managed for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes. Attribute Variable type Description Release install_directory String. Should be a valid path for Notes. Specify the Notes installation directory. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.calendar.notes.connector/install_directory=D:\\\\Notes 8.0 and later notes_password String Specify the Notes password 8.0 and later Parent topic: Sametime client preferences","title":"Notes preferences {#config_client_notes_pref .concept}"},{"location":"admin/config_client_notes_pref.html#config_client_notes_pref","text":"The following table lists the Notes\u00ae preferences that can be managed for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes. Attribute Variable type Description Release install_directory String. Should be a valid path for Notes. Specify the Notes installation directory. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.calendar.notes.connector/install_directory=D:\\\\Notes 8.0 and later notes_password String Specify the Notes password 8.0 and later Parent topic: Sametime client preferences","title":"Notes preferences"},{"location":"admin/config_client_notification_pref.html","text":"Notification preferences The following table lists the notification preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release pref_alertbubble_window_corner String. Default is \"SE\". Four possible values, \"NE\", \"NW\", \"SE\", SW\" (corresponding to northeast, northwest, southeast, southwest). This stores one of four possible values, which indicate the corner of the user's screen where alert bubble will appear. 7.5.1 and later pref_alertbubble_window_width Positive integer value Stores the width in pixels of the alert bubble. 7.5.1 and later pref_alertbubble_window_height Positive integer value Stores the height in pixels of the alert bubble. 7.5.1 and later pref_alertbubble_window_ edge_padding |Positive integer value|Stores the number of pixels to add as horizontal padding for the alert bubble to separate it from the edge of the desktop.|7.5.1 and later| |pref_alertbubble_show|String value, \"standard\" = show standard OS window, \"less\" or others = show alert bubble for an alert|Determines whether to show the alert bubble or a standard OS window for an alert.|7.5.1 and later| |pref_alertbubble_close_alerts|Boolean. TRUE = automatically close alert, FALSE = do not automatically close alert|Determines whether to automatically close an alert after it appears.|7.5.1 and later| |pref_alertbubble_close_alerts_ delay |Positive integer value|If alerts are set to automatically close, this is the delay amount in seconds before the alert is closed.|7.5.1 and later| |pref_alertbubble_animation|String value, \"none\" = no window animation, \"slide\" = animate using slide effect, and \"fade\" = animate using fade effect. The default value is \"slide\"|Specify the Alert bubble animation type.|7.5.1 and later| |pref_alertbubble_bring_window_ to_front |Boolean|The default value, whether to Bring the Popup window to front.|7.5.1 and later| |pref_alertbubble_flash_taskbar|Boolean|The default value, whether to Flash the taskbar to indicate new Popup window.|7.5.1 and later| |pref_event_0_playsound|Boolean|Determines whether to play sound when a new chat window opens.|7.5.1 and later| |pref_event_0_playsound_response|Boolean|For one-on-one chat, determines whether to play sound on chat response.|8.5.2 and later| |pref_event_1_playsound|Boolean|For multi-party chats, determines whether to play sound when there is an invitation to a multi-party chat.|7.5.1 and later| |pref_event_1_playsound_response|Boolean|For multi-party chats, determines whether to play sound on chat response.|8.5.2 and later| |pref_event_2_playsound|Boolean|Determines whether announcement events play a sound.|7.5.1 and later| |pref_event_3_playsound|Boolean|Determines whether Invitations to Sametime Classic online meeting play a sound.|7.5.1 and later| |pref_event_6_playsound|Boolean|Determines whether status alert events (Alert me When) play a sound.|7.5.1 and later| |pref_event_7_playsound|Boolean|Determines whether Location Awareness events play a sound.|7.5.1 and later| |pref_event_0_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for one-on-one chat events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_0_soundfile=C:\\\\Documents\\\\sound.wav `` |7.5.1 and later| |pref_event_1_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for Invitations to multi-party chat events, if playing sounds is enabled for this event. Do no't use '\\' as the file separator. Use '\\\\' or '/' instead. For example, ``com.ibm.collaboration.realtime.alertmanager/pref_event_1_soundfile=C:\\\\Documents\\\\sound.wav |7.5.1 and later| |pref_event_2_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for announcement events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_2_soundfile=C:\\\\Documents\\\\sound.wav . |7.5.1 and later| |pref_event_3_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for Invitations to Sametime Classic online meeting events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_3_soundfile=C:\\\\Documents\\\\sound.wav `` |7.5.1 and later| |pref_event_6_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for status alert events (Alert me When) events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_6_soundfile=C:\\\\Documents\\\\sound.wav . |7.5.1 and later| |pref_event_7_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for Location Awareness events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration. realtime.alertmanager/ pref_event_7_soundfile= C:\\\\Documents\\\\ sound.wav . |7.5.1 and later| |pref_event_0_option_1|Boolean|For one-on-one chats, determines whether to bring chat window to front.|7.5.1 and later| |pref_event_0_option_2|Boolean|For one-on-one chats, determines whether to flash the taskbar to indicate new window.|7.5.1 and later| |pref_event_0_option_3|Boolean|For one-on-one chats, determines whether to show a system tray icon to indicate new message.|7.5.1 and later| |pref_event_0_option_4|Boolean|For one-on-one chats, determines whether to bring chat window to front on chat response.|8.5.2 and later| |pref_event_0_option_5|Boolean|For one-on-one chats, determines whether to flash the taskbar to indicate new message on chat response.|8.5.2 and later| |pref_event_0_option_6|Boolean|For one-on-one chats, determines, whether to show a system tray icon to indicate new message on chat response.|8.5.2 and later| |pref_event_1_option_1|Boolean|For invitations to multi-party chats, determines whether to bring invitation window to front.|7.5.1 and later| |pref_event_1_option_2|Boolean|For invitations to multi-party chats, determines whether to flash the taskbar to indicate new invitation.|7.5.1 and later| |pref_event_1_option_4|Boolean|For multi-party chats, determines whether to bring multi-party chat window to front on chat response.|8.5.2 and later| |pref_event_1_option_5|Boolean|For multi-party chats, determines whether to flash the taskbar on chat response.|8.5.2 and later| |pref_event_1_option_6|Boolean|For multi-party chats, determines whether to show a system tray icon on chat response.|8.5.2 and later| |pref_event_9_option_1|Boolean|For calls, determines whether to bring the invitation window to front.|8.5 and later| |pref_event_9_option_2|Boolean|For calls, determines whether to flash the taskbar to indicate new window.|8.5 and later| |pref_event_9_timeout_seconds|Integer, unit is second|For calls, specify the seconds before incoming invitation time out.|8.5 and later| |allow_response|Boolean|For Send Announcement dialog, determines whether to allow recipients to send responses.|7.5.1 and later| |pref_event_9_alert_incoming|Boolean|For calls, determines whether to display incoming invitation.|8.5 and later| |pref_event_10_playsound|Boolean|Determines whether calendar events play a sound.|8.5 and later| |pref_event_10_soundfile|Boolean|The sound file that will play for calendar events, if playing sounds is enabled for this event.|8.5 and later| Parent topic: Sametime client preferences","title":"Notification preferences {#config_client_notification_pref .concept}"},{"location":"admin/config_client_notification_pref.html#config_client_notification_pref","text":"The following table lists the notification preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release pref_alertbubble_window_corner String. Default is \"SE\". Four possible values, \"NE\", \"NW\", \"SE\", SW\" (corresponding to northeast, northwest, southeast, southwest). This stores one of four possible values, which indicate the corner of the user's screen where alert bubble will appear. 7.5.1 and later pref_alertbubble_window_width Positive integer value Stores the width in pixels of the alert bubble. 7.5.1 and later pref_alertbubble_window_height Positive integer value Stores the height in pixels of the alert bubble. 7.5.1 and later pref_alertbubble_window_ edge_padding |Positive integer value|Stores the number of pixels to add as horizontal padding for the alert bubble to separate it from the edge of the desktop.|7.5.1 and later| |pref_alertbubble_show|String value, \"standard\" = show standard OS window, \"less\" or others = show alert bubble for an alert|Determines whether to show the alert bubble or a standard OS window for an alert.|7.5.1 and later| |pref_alertbubble_close_alerts|Boolean. TRUE = automatically close alert, FALSE = do not automatically close alert|Determines whether to automatically close an alert after it appears.|7.5.1 and later| |pref_alertbubble_close_alerts_ delay |Positive integer value|If alerts are set to automatically close, this is the delay amount in seconds before the alert is closed.|7.5.1 and later| |pref_alertbubble_animation|String value, \"none\" = no window animation, \"slide\" = animate using slide effect, and \"fade\" = animate using fade effect. The default value is \"slide\"|Specify the Alert bubble animation type.|7.5.1 and later| |pref_alertbubble_bring_window_ to_front |Boolean|The default value, whether to Bring the Popup window to front.|7.5.1 and later| |pref_alertbubble_flash_taskbar|Boolean|The default value, whether to Flash the taskbar to indicate new Popup window.|7.5.1 and later| |pref_event_0_playsound|Boolean|Determines whether to play sound when a new chat window opens.|7.5.1 and later| |pref_event_0_playsound_response|Boolean|For one-on-one chat, determines whether to play sound on chat response.|8.5.2 and later| |pref_event_1_playsound|Boolean|For multi-party chats, determines whether to play sound when there is an invitation to a multi-party chat.|7.5.1 and later| |pref_event_1_playsound_response|Boolean|For multi-party chats, determines whether to play sound on chat response.|8.5.2 and later| |pref_event_2_playsound|Boolean|Determines whether announcement events play a sound.|7.5.1 and later| |pref_event_3_playsound|Boolean|Determines whether Invitations to Sametime Classic online meeting play a sound.|7.5.1 and later| |pref_event_6_playsound|Boolean|Determines whether status alert events (Alert me When) play a sound.|7.5.1 and later| |pref_event_7_playsound|Boolean|Determines whether Location Awareness events play a sound.|7.5.1 and later| |pref_event_0_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for one-on-one chat events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_0_soundfile=C:\\\\Documents\\\\sound.wav `` |7.5.1 and later| |pref_event_1_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for Invitations to multi-party chat events, if playing sounds is enabled for this event. Do no't use '\\' as the file separator. Use '\\\\' or '/' instead. For example, ``com.ibm.collaboration.realtime.alertmanager/pref_event_1_soundfile=C:\\\\Documents\\\\sound.wav |7.5.1 and later| |pref_event_2_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for announcement events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_2_soundfile=C:\\\\Documents\\\\sound.wav . |7.5.1 and later| |pref_event_3_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for Invitations to Sametime Classic online meeting events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_3_soundfile=C:\\\\Documents\\\\sound.wav `` |7.5.1 and later| |pref_event_6_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for status alert events (Alert me When) events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration.realtime.alertmanager/pref_event_6_soundfile=C:\\\\Documents\\\\sound.wav . |7.5.1 and later| |pref_event_7_soundfile|Text string. Full path to a valid sound file of .WAV format.|The sound file that will play for Location Awareness events, if playing sounds is enabled for this event. Do not use '\\' as the file separator. Use '\\\\' or '/' instead. For example, com.ibm.collaboration. realtime.alertmanager/ pref_event_7_soundfile= C:\\\\Documents\\\\ sound.wav . |7.5.1 and later| |pref_event_0_option_1|Boolean|For one-on-one chats, determines whether to bring chat window to front.|7.5.1 and later| |pref_event_0_option_2|Boolean|For one-on-one chats, determines whether to flash the taskbar to indicate new window.|7.5.1 and later| |pref_event_0_option_3|Boolean|For one-on-one chats, determines whether to show a system tray icon to indicate new message.|7.5.1 and later| |pref_event_0_option_4|Boolean|For one-on-one chats, determines whether to bring chat window to front on chat response.|8.5.2 and later| |pref_event_0_option_5|Boolean|For one-on-one chats, determines whether to flash the taskbar to indicate new message on chat response.|8.5.2 and later| |pref_event_0_option_6|Boolean|For one-on-one chats, determines, whether to show a system tray icon to indicate new message on chat response.|8.5.2 and later| |pref_event_1_option_1|Boolean|For invitations to multi-party chats, determines whether to bring invitation window to front.|7.5.1 and later| |pref_event_1_option_2|Boolean|For invitations to multi-party chats, determines whether to flash the taskbar to indicate new invitation.|7.5.1 and later| |pref_event_1_option_4|Boolean|For multi-party chats, determines whether to bring multi-party chat window to front on chat response.|8.5.2 and later| |pref_event_1_option_5|Boolean|For multi-party chats, determines whether to flash the taskbar on chat response.|8.5.2 and later| |pref_event_1_option_6|Boolean|For multi-party chats, determines whether to show a system tray icon on chat response.|8.5.2 and later| |pref_event_9_option_1|Boolean|For calls, determines whether to bring the invitation window to front.|8.5 and later| |pref_event_9_option_2|Boolean|For calls, determines whether to flash the taskbar to indicate new window.|8.5 and later| |pref_event_9_timeout_seconds|Integer, unit is second|For calls, specify the seconds before incoming invitation time out.|8.5 and later| |allow_response|Boolean|For Send Announcement dialog, determines whether to allow recipients to send responses.|7.5.1 and later| |pref_event_9_alert_incoming|Boolean|For calls, determines whether to display incoming invitation.|8.5 and later| |pref_event_10_playsound|Boolean|Determines whether calendar events play a sound.|8.5 and later| |pref_event_10_soundfile|Boolean|The sound file that will play for calendar events, if playing sounds is enabled for this event.|8.5 and later| Parent topic: Sametime client preferences","title":"Notification preferences"},{"location":"admin/config_client_people_pref.html","text":"People preferences The following table lists the people preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release lookupExpirationDays Integer. Default is 7. Specifies the number of days a users directory info is considered up to date. A value of 0 means refresh a user's directory info for each client session. 7.5.1 and later wrapBusinessCard Boolean. Default is true. Specifies whether or not to wrap text in business card 7.5.1 and later showNoPhotoPhoto Boolean. Default is true. Specifies whether or not to show a placeholder image in business card when user doesn't have a photo. 7.5.1 and later isCaseInsensitive Boolean. Default is false. Specifies if it is case insensitive when looking up people. The default of false means the search is case-sensitive. If you plan to set this to true, first turn off case sensitivity in the HCL Sametime Community server and restart the server. 7.5.1 and later userInfoReplacesDefaultDisplayName Boolean. Default is false. When set to true, contact names refresh automatically with the contact's business card name. When this preference is enabled, users can also update contact names manually. They can update one name by right-clicking a contact name and choosing Refresh Person Info . They can also update all names by selecting Tools > Refresh Contact Nicknames .For the preference to work, the person attributes in the LDAP directory used with the Sametime Community Server must meet the following requirements. Verify or change these settings by using the Sametime System Console to administer the Sametime Community Server. Community Services tab - The attribute used for the internal user ID must be different from the attribute used for the person's display name. Business card tab - The attribute used for the business card name must be the same as the attribute used for the person's display name. |7.5.1 and later| |refreshNicknamesOnFirstStartup|Boolean. Default is false.|Determines whether clients automatically replace all existing display names and nicknames in the contact list with business card names after clients start up and log in. You can set this preference when the userInfoReplaces DefaultDisplayName preference is enabled. Tip: To prevent the task from running each time you install on a new computer or reset the workspace, use managed preferences to set this preference temporarily for all new and upgrading clients. Disable the preference after all clients have run once. |8.5.2 and later| |bizCardShowExtendedStatus|Boolean. Default is false.|Determines whether the extended status, such as phone call status, is displayed in the business card. The default setting is not to display all of the extended statuses in business card.|9.0 and later| Parent topic: Sametime client preferences","title":"People preferences {#config_client_people_pref .concept}"},{"location":"admin/config_client_people_pref.html#config_client_people_pref","text":"The following table lists the people preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release lookupExpirationDays Integer. Default is 7. Specifies the number of days a users directory info is considered up to date. A value of 0 means refresh a user's directory info for each client session. 7.5.1 and later wrapBusinessCard Boolean. Default is true. Specifies whether or not to wrap text in business card 7.5.1 and later showNoPhotoPhoto Boolean. Default is true. Specifies whether or not to show a placeholder image in business card when user doesn't have a photo. 7.5.1 and later isCaseInsensitive Boolean. Default is false. Specifies if it is case insensitive when looking up people. The default of false means the search is case-sensitive. If you plan to set this to true, first turn off case sensitivity in the HCL Sametime Community server and restart the server. 7.5.1 and later userInfoReplacesDefaultDisplayName Boolean. Default is false. When set to true, contact names refresh automatically with the contact's business card name. When this preference is enabled, users can also update contact names manually. They can update one name by right-clicking a contact name and choosing Refresh Person Info . They can also update all names by selecting Tools > Refresh Contact Nicknames .For the preference to work, the person attributes in the LDAP directory used with the Sametime Community Server must meet the following requirements. Verify or change these settings by using the Sametime System Console to administer the Sametime Community Server. Community Services tab - The attribute used for the internal user ID must be different from the attribute used for the person's display name. Business card tab - The attribute used for the business card name must be the same as the attribute used for the person's display name. |7.5.1 and later| |refreshNicknamesOnFirstStartup|Boolean. Default is false.|Determines whether clients automatically replace all existing display names and nicknames in the contact list with business card names after clients start up and log in. You can set this preference when the userInfoReplaces DefaultDisplayName preference is enabled. Tip: To prevent the task from running each time you install on a new computer or reset the workspace, use managed preferences to set this preference temporarily for all new and upgrading clients. Disable the preference after all clients have run once. |8.5.2 and later| |bizCardShowExtendedStatus|Boolean. Default is false.|Determines whether the extended status, such as phone call status, is displayed in the business card. The default setting is not to display all of the extended statuses in business card.|9.0 and later| Parent topic: Sametime client preferences","title":"People preferences"},{"location":"admin/config_client_pref_plugin.html","text":"Configuring Sametime Connect Client preferences in the plugin_customization.ini file Defining a settings file in the plugin_customization.ini file is an alternate method for distributing preferences to the Sametime\u00ae Connect Client. Unlike the managed-settings.xml file posted on an update site, this method does not provide any policy-based distribution of preferences. Follow these steps to create a settings XML file and define it in the plugin_customization.ini file. Create a settings XML file with a name such as managed-settings.xml. Define preferences in the settings XML file. Copy the settings XML file to the location where it will be called from the plugin_customization.ini file. Add a key that defines the Expeditor Managed settings framework com.ibm.rcp.managedsettings.provider.file/URL and the name and location of the settings XML file to be used. For example: com.ibm.rcp.managedsettings.provider.file/URL=http://www.example.com/managed-settings.xml or com.ibm.rcp.managedsettings.provider.file/URL=file://c:/data/mananged-settings.xml Save the file and make it available to clients. Every time the client starts, the plugin_customization.ini preferences are read. Changing the URL for the settings XML file in the plugin_customization.ini file If you must change the URL for the managed settings file, do so by updating the plugin_customization.ini file. Parent topic: Configuring Sametime client preferences with the Expeditor managed settings framework","title":"Configuring Sametime Connect Client preferences in the plugin\\_customization.ini file {#config_client_pref_plugin .task}"},{"location":"admin/config_client_pref_plugin.html#config_client_pref_plugin","text":"Defining a settings file in the plugin_customization.ini file is an alternate method for distributing preferences to the Sametime\u00ae Connect Client. Unlike the managed-settings.xml file posted on an update site, this method does not provide any policy-based distribution of preferences. Follow these steps to create a settings XML file and define it in the plugin_customization.ini file. Create a settings XML file with a name such as managed-settings.xml. Define preferences in the settings XML file. Copy the settings XML file to the location where it will be called from the plugin_customization.ini file. Add a key that defines the Expeditor Managed settings framework com.ibm.rcp.managedsettings.provider.file/URL and the name and location of the settings XML file to be used. For example: com.ibm.rcp.managedsettings.provider.file/URL=http://www.example.com/managed-settings.xml or com.ibm.rcp.managedsettings.provider.file/URL=file://c:/data/mananged-settings.xml Save the file and make it available to clients. Every time the client starts, the plugin_customization.ini preferences are read. Changing the URL for the settings XML file in the plugin_customization.ini file If you must change the URL for the managed settings file, do so by updating the plugin_customization.ini file. Parent topic: Configuring Sametime client preferences with the Expeditor managed settings framework","title":"Configuring Sametime Connect Client preferences in the plugin_customization.ini file"},{"location":"admin/config_client_pref_tables.html","text":"Sametime client preferences This section lists the preferences that can be managed for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Accessibility preferences The following table lists the accessibility preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Auto-status change preferences The following table lists the auto-status change preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Calendar preferences The following table lists the calendar preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Chat preferences The following tables list the chat preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Community preferences The following tables list the default community preferences and alternate community preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Contact list preferences The following table lists the contact list preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. External application preferences The following table lists the external application preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. File transfer preferences The following table lists the file transfer preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Live Text and Widgets preferences The following scenarios show the Live Text and Widgets preferences for the HCL Sametime Connect Client . These scenarios apply to setting preferences for the stand-alone client. Location preferences The following table lists the location preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Login preferences The following table lists the login preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Notes preferences The following table lists the Notes preferences that can be managed for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Sametime Advanced preferences (Sametime 9.0.1 only) These settings only apply to environments that include the Sametime 9.0.1 Advanced Server. Notification preferences The following table lists the notification preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. People preferences The following table lists the people preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Rules manager preferences The following tables list the rules manager preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Spell checker preferences The following table lists the spell checker preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Update preferences The following table lists the update preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Parent topic: Sametime client configuration options","title":"Sametime client preferences {#config_client_pref_tables .task}"},{"location":"admin/config_client_pref_tables.html#config_client_pref_tables","text":"This section lists the preferences that can be managed for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Accessibility preferences The following table lists the accessibility preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Auto-status change preferences The following table lists the auto-status change preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Calendar preferences The following table lists the calendar preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Chat preferences The following tables list the chat preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Community preferences The following tables list the default community preferences and alternate community preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Contact list preferences The following table lists the contact list preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. External application preferences The following table lists the external application preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. File transfer preferences The following table lists the file transfer preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Live Text and Widgets preferences The following scenarios show the Live Text and Widgets preferences for the HCL Sametime Connect Client . These scenarios apply to setting preferences for the stand-alone client. Location preferences The following table lists the location preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Login preferences The following table lists the login preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Notes preferences The following table lists the Notes preferences that can be managed for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Sametime Advanced preferences (Sametime 9.0.1 only) These settings only apply to environments that include the Sametime 9.0.1 Advanced Server. Notification preferences The following table lists the notification preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. People preferences The following table lists the people preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Rules manager preferences The following tables list the rules manager preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Spell checker preferences The following table lists the spell checker preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Update preferences The following table lists the update preferences for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Parent topic: Sametime client configuration options","title":"Sametime client preferences"},{"location":"admin/config_client_rules_mng_pref.html","text":"Rules manager preferences The following tables list the rules manager preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release blockIncomingCalls Boolean. Default is true. Block all incoming calls. 8.5.1 and later rulesForComputerOnlyUsers Boolean. Default is true. Causes default rules to only apply for computer only users. 8.5.1 and later hideCallRoutingPrefs Boolean. Default is false. Hide the call routing preference pages. 8.5.1 and later disableRulesEditing Boolean. Default is true. Disable the ability to edit call routing rules. 8.5.1 and later disableOfflineCalling Boolean. Default is true. Disable ability for a computer only user to call an offline contact. 8.5.1 and later disableExternalCalling Boolean. Default is true. Disable ability for a computer only user to call an external contact or phone number. 8.5.1 and later disableNonComputerCalls Boolean. Default is true. Disable ability for a computer only user to call using anything other than their computer. 8.5.1 and later hidePreferredDevices Boolean. Default is false. Hide the preferred device list. 8.5.1 and later disablePreferredDevices Boolean. Default is true. Disable the preferred devices list. 8.5.1 and later hideAllocatedDevices Boolean. Default is true. Hide allocated devices so they cannot be used to answer calls or as a transfer target. 8.5.1 and later disablePreferredNumber Changes |Boolean. Default is true.|Disable the ability to add new preferred numbers.|8.5.1 and later| |replaceConditions|Boolean. Default is true.|Replace the users conditions with the defaults.|8.5.1 and later| |computerOnlyPrefix|String. Default is +999.|Unified number prefix which identifies a user as a computer only user.|8.5.1 and later| |callRoutingConditions|String. Default is /config/callRoutingConditions.xml .|URL pointing to an XML file which defines the default call routing rules.|8.5.1 and later| Parent topic: Sametime client preferences","title":"Rules manager preferences {#config_client_rules_mng_pref .concept}"},{"location":"admin/config_client_rules_mng_pref.html#config_client_rules_mng_pref","text":"The following tables list the rules manager preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release blockIncomingCalls Boolean. Default is true. Block all incoming calls. 8.5.1 and later rulesForComputerOnlyUsers Boolean. Default is true. Causes default rules to only apply for computer only users. 8.5.1 and later hideCallRoutingPrefs Boolean. Default is false. Hide the call routing preference pages. 8.5.1 and later disableRulesEditing Boolean. Default is true. Disable the ability to edit call routing rules. 8.5.1 and later disableOfflineCalling Boolean. Default is true. Disable ability for a computer only user to call an offline contact. 8.5.1 and later disableExternalCalling Boolean. Default is true. Disable ability for a computer only user to call an external contact or phone number. 8.5.1 and later disableNonComputerCalls Boolean. Default is true. Disable ability for a computer only user to call using anything other than their computer. 8.5.1 and later hidePreferredDevices Boolean. Default is false. Hide the preferred device list. 8.5.1 and later disablePreferredDevices Boolean. Default is true. Disable the preferred devices list. 8.5.1 and later hideAllocatedDevices Boolean. Default is true. Hide allocated devices so they cannot be used to answer calls or as a transfer target. 8.5.1 and later disablePreferredNumber Changes |Boolean. Default is true.|Disable the ability to add new preferred numbers.|8.5.1 and later| |replaceConditions|Boolean. Default is true.|Replace the users conditions with the defaults.|8.5.1 and later| |computerOnlyPrefix|String. Default is +999.|Unified number prefix which identifies a user as a computer only user.|8.5.1 and later| |callRoutingConditions|String. Default is /config/callRoutingConditions.xml .|URL pointing to an XML file which defines the default call routing rules.|8.5.1 and later| Parent topic: Sametime client preferences","title":"Rules manager preferences"},{"location":"admin/config_client_spellchecker_pref.html","text":"Spell checker preferences The following table lists the spell checker preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release checkSpelling Boolean. Default is true. Specifies whether by default to check spelling as you type. 7.5.1 and later dictionaryLanguage String. Default is en-US. Specifies the default language to use for spellchecking. Must have corresponding dictionary installed. 7.5.1 and later Parent topic: Sametime client preferences","title":"Spell checker preferences {#config_client_spellchecker_pref .concept}"},{"location":"admin/config_client_spellchecker_pref.html#config_client_spellchecker_pref","text":"The following table lists the spell checker preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release checkSpelling Boolean. Default is true. Specifies whether by default to check spelling as you type. 7.5.1 and later dictionaryLanguage String. Default is en-US. Specifies the default language to use for spellchecking. Must have corresponding dictionary installed. 7.5.1 and later Parent topic: Sametime client preferences","title":"Spell checker preferences"},{"location":"admin/config_client_stadv_pref.html","text":"Sametime Advanced preferences (Sametime 9.0.1 only) These settings only apply to environments that include the Sametime 9.0.1 Advanced Server. The following table lists the preferences that are available for the HCL\u00ae Sametime\u00ae Advanced client. These preferences are set in the plugin_customization.ini file. Attribute Variable type Description enableAdvanced Boolean (default value is false) When the value is set to true, the Sametime Advanced plug-ins installed with the client become active. enableInstantShare Boolean (default value is false) If enableAdvanced is set to false, but the value of enableInstantShare is set to true, the instant share feature is available. Otherwise, the value of enableInstantShare is ignored. Attribute Variable type Description showAdvancedVersioningAlert Boolean Suppress client version warnings when accessing a Sametime 9.0 (or higher) server from an older Connect or Embedded client. Attribute Variable type Description sametimeAdvancedServerName String Required. Fully qualified Apache Tomcat\u00ae Application Server host name, for example: sales. sametimeAdvancedServerPort String Required. Sametime Advanced Server port number. sametimeCommunityServer String Required. Default Sametime Community Server host name. This is the server users log in to for awareness and chat. broadcastToolsServerName String Required. Fully qualified Apache Tomcat Application Server host name. broadcastToolsServerPort String Required. Apache Tomcat Application Server port number. The port number is normally 1883 for HTTP and 8883 for SSL, but can be any port specified by the administrator. useHTTPS Boolean If you are using SSL while connecting to the server, set to true. If you are using HTTP set to false. advancedServerConnectionType String Connection type to connect to the Sametime Advanced server. Set to 0 for a direct connection to the server. Set to 1 to connect through a reverse proxy. broadcastServerConnectionType String Connection type to connect to the Broadcast Tools server. Set to 1 for a direct connection to the server. Set to 2 to connect using SSL. useHttpProxy Boolean Set to true if you are using an HTTP forward proxy; otherwise set it to false. proxyHost String Type the proxy IP address or host name if you are using a HTTP proxy, otherwise leave it blank. proxyPort String Type the HTTP proxy port to which you are connecting. proxyUserName String Type the user name if the HTTP proxy requires one for authentication; otherwise leave it blank. reverseProxyBaseURL String Type the reverse proxy base URL to use if connecting through a reverse proxy. For example: http://mycompany.example.com/mycontextLeave blank otherwise. | |reverseProxyUserName|String|Enter the reverse proxy user name if the proxy is authenticating. Leave blank if you are not using reverse proxies.| |jmsProtocol|String|Indicate whether the client connects with a secure connection using the Security Secure Sockets Layer (SSL) or not. The default is disthub (to connect without SSL). Enter disthubs to connect with SSL.| |liveNameResolveTimeout|String (the default is 10000 milliseconds)|Time allowed in milliseconds for awareness names to resolve. The default is 10000.| |notifyNewOpenCommunities|Boolean (the default istrue )|Alert users when a new open community is created.| |notifyNewModeratedCommunities|Boolean (the default istrue )|Alert users when a new moderated community is created.| |notifyNewPrivateCommunities|Boolean (the default istrue )|Alert users when a new private community is created| |blockBroadcastOnDoNotDisturb|Boolean (the default istrue )|Blocks broadcasts when client is set to \"Do not disturb\".| |blockBroadcastOnInMeeting|Boolean (the default isfalse )|Blocks broadcasts when client is set to \"In a meeting\".| |notifyChatRoomAddMember|Boolean (the default istrue )|Alerts users when a chat room has a new member.| |blockChatRoomNotifyOnDoNotDisturb|Boolean (the default istrue )|Blocks chat room notifications the client to \"Do not disturb\".| |blockChatRoomNotifyOnInMeeting|Boolean (the default isfalse )|Blocks chat room notifications when user is in a meeting.| |broadcastServerUserIdType|String (the default isemail )|Specifies the LDAP attribute used as the user ID.| |useTokens|Boolean (the default istrue )|Determines whether the client uses an LTPA token at login. Set this to false only if there is no way to set up Single Sign-On between the Sametime Community Server and the Sametime Advanced Server.| |chatRoomLaunchURLRichClient|Boolean|Specifies what type of chat room window the users sees. The value true represents the Sametime client chat room and the value false represents the web browser chat room.| |onlyActiveChatRooms|Boolean (default value is false)|Limits the chat room list to active chat rooms, suppressing disabled and archived chat rooms from the list.| |showToolTip|Boolean (default value is true)|Displays the description associated with a chat room when the user mouses over the chat room name.| |updateInterval|String (default value is 600000 milliseconds, or 10 minutes)|Specifies the wait (in milliseconds) before chat room data is refreshed. You can improve server performance by refreshing less frequently.| Attribute Variable type Description loginTokenRefreshInterval String (default value is 900000 milliseconds, or 15 minutes) LTPA token timeout in seconds. Best practice is to set this value to 5 minutes less than the token expiration time configured on the WebSphere server hosting Sametime Advanced, and on the Community Server. The value should be specified in milliseconds. For example, if the server-side token expiration timeout is 24 hours, configure loginTokenRefreshInterval=86100000 (which is 23 hours and 55 minutes) on the client. Parent topic: Sametime client preferences","title":"Sametime Advanced preferences \\(Sametime 9.0.1 only\\) {#config_client_stadv_pref .concept}"},{"location":"admin/config_client_stadv_pref.html#config_client_stadv_pref","text":"These settings only apply to environments that include the Sametime 9.0.1 Advanced Server. The following table lists the preferences that are available for the HCL\u00ae Sametime\u00ae Advanced client. These preferences are set in the plugin_customization.ini file. Attribute Variable type Description enableAdvanced Boolean (default value is false) When the value is set to true, the Sametime Advanced plug-ins installed with the client become active. enableInstantShare Boolean (default value is false) If enableAdvanced is set to false, but the value of enableInstantShare is set to true, the instant share feature is available. Otherwise, the value of enableInstantShare is ignored. Attribute Variable type Description showAdvancedVersioningAlert Boolean Suppress client version warnings when accessing a Sametime 9.0 (or higher) server from an older Connect or Embedded client. Attribute Variable type Description sametimeAdvancedServerName String Required. Fully qualified Apache Tomcat\u00ae Application Server host name, for example: sales. sametimeAdvancedServerPort String Required. Sametime Advanced Server port number. sametimeCommunityServer String Required. Default Sametime Community Server host name. This is the server users log in to for awareness and chat. broadcastToolsServerName String Required. Fully qualified Apache Tomcat Application Server host name. broadcastToolsServerPort String Required. Apache Tomcat Application Server port number. The port number is normally 1883 for HTTP and 8883 for SSL, but can be any port specified by the administrator. useHTTPS Boolean If you are using SSL while connecting to the server, set to true. If you are using HTTP set to false. advancedServerConnectionType String Connection type to connect to the Sametime Advanced server. Set to 0 for a direct connection to the server. Set to 1 to connect through a reverse proxy. broadcastServerConnectionType String Connection type to connect to the Broadcast Tools server. Set to 1 for a direct connection to the server. Set to 2 to connect using SSL. useHttpProxy Boolean Set to true if you are using an HTTP forward proxy; otherwise set it to false. proxyHost String Type the proxy IP address or host name if you are using a HTTP proxy, otherwise leave it blank. proxyPort String Type the HTTP proxy port to which you are connecting. proxyUserName String Type the user name if the HTTP proxy requires one for authentication; otherwise leave it blank. reverseProxyBaseURL String Type the reverse proxy base URL to use if connecting through a reverse proxy. For example: http://mycompany.example.com/mycontextLeave blank otherwise. | |reverseProxyUserName|String|Enter the reverse proxy user name if the proxy is authenticating. Leave blank if you are not using reverse proxies.| |jmsProtocol|String|Indicate whether the client connects with a secure connection using the Security Secure Sockets Layer (SSL) or not. The default is disthub (to connect without SSL). Enter disthubs to connect with SSL.| |liveNameResolveTimeout|String (the default is 10000 milliseconds)|Time allowed in milliseconds for awareness names to resolve. The default is 10000.| |notifyNewOpenCommunities|Boolean (the default istrue )|Alert users when a new open community is created.| |notifyNewModeratedCommunities|Boolean (the default istrue )|Alert users when a new moderated community is created.| |notifyNewPrivateCommunities|Boolean (the default istrue )|Alert users when a new private community is created| |blockBroadcastOnDoNotDisturb|Boolean (the default istrue )|Blocks broadcasts when client is set to \"Do not disturb\".| |blockBroadcastOnInMeeting|Boolean (the default isfalse )|Blocks broadcasts when client is set to \"In a meeting\".| |notifyChatRoomAddMember|Boolean (the default istrue )|Alerts users when a chat room has a new member.| |blockChatRoomNotifyOnDoNotDisturb|Boolean (the default istrue )|Blocks chat room notifications the client to \"Do not disturb\".| |blockChatRoomNotifyOnInMeeting|Boolean (the default isfalse )|Blocks chat room notifications when user is in a meeting.| |broadcastServerUserIdType|String (the default isemail )|Specifies the LDAP attribute used as the user ID.| |useTokens|Boolean (the default istrue )|Determines whether the client uses an LTPA token at login. Set this to false only if there is no way to set up Single Sign-On between the Sametime Community Server and the Sametime Advanced Server.| |chatRoomLaunchURLRichClient|Boolean|Specifies what type of chat room window the users sees. The value true represents the Sametime client chat room and the value false represents the web browser chat room.| |onlyActiveChatRooms|Boolean (default value is false)|Limits the chat room list to active chat rooms, suppressing disabled and archived chat rooms from the list.| |showToolTip|Boolean (default value is true)|Displays the description associated with a chat room when the user mouses over the chat room name.| |updateInterval|String (default value is 600000 milliseconds, or 10 minutes)|Specifies the wait (in milliseconds) before chat room data is refreshed. You can improve server performance by refreshing less frequently.| Attribute Variable type Description loginTokenRefreshInterval String (default value is 900000 milliseconds, or 15 minutes) LTPA token timeout in seconds. Best practice is to set this value to 5 minutes less than the token expiration time configured on the WebSphere server hosting Sametime Advanced, and on the Community Server. The value should be specified in milliseconds. For example, if the server-side token expiration timeout is 24 hours, configure loginTokenRefreshInterval=86100000 (which is 23 hours and 55 minutes) on the client. Parent topic: Sametime client preferences","title":"Sametime Advanced preferences (Sametime 9.0.1 only)"},{"location":"admin/config_client_status_pref.html","text":"Auto-status change preferences The following table lists the auto-status change preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release lockPCWithOSLock Boolean. Default is true. Available \"Locking computer with operating system lock\" feature. 7.5.1 and later keyboardMouseInactivity Boolean. Default is true. Available \"Keyboard and mouse inactivity\" feature. 7.5.1 and later whenIamInAOnlineMtg Boolean. Default is false. Available \"When I am in an online meeting\" feature. 7.5.1 and later selectStatusOnlyScreenShare Boolean. Default is false. Determines whether to select the \"Change my status only when I'm sharing my screen\" check box. 7.5.1 and later autoChangeMyStatusInMtg Boolean. Default is false. Determines whether to select the \"Automatically change my status\" radio button. Note that if this radio button is set as true, then the \"Prompt me before changing my status\" radio button will be UNavailable. If this is set as \"false\", the \"Prompt me before changing my status\" radio button will be available. After com.ibm.collaboration. realtime.imhub/ selectStatusOnly ScreenShare is set as true, com.ibm.collaboration. realtime.imhub/ autoChangeMyStatus InMtg works for screen share status. |7.5.1 and later| |minutesForIdleKeyboardMouse|Integer. Default is 20|Sets the \"When I have not used my keyboard or mouse for the following number of minutes:\" text field.|7.5.1 and later| |backWhenUnlocked|Boolean. Default is true.|Determines whether to select the \"Return to previous status when activity is resumed\" in \"Locking computer with operating system lock\" check box.|7.5.1 and later| |backWhenKeyboardMouseActive|Boolean. Default is true.|Determine whether to select the \"Return to previous status when activity is resumed\" in \"Keyboard and mouse inactivity\" check box.|7.5.1 and later| |blRetrievalRetryDelay|Integer. Default is 15000 ms.|Determines how long the client waits before trying again to retrieve the contact list from the storage service if the initial attempt times out. The default is 15 seconds, expressed as milliseconds.|8.5.2 IFR1 and later| Parent topic: Sametime client preferences","title":"Auto-status change preferences {#config_client_status_pref .concept}"},{"location":"admin/config_client_status_pref.html#config_client_status_pref","text":"The following table lists the auto-status change preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release lockPCWithOSLock Boolean. Default is true. Available \"Locking computer with operating system lock\" feature. 7.5.1 and later keyboardMouseInactivity Boolean. Default is true. Available \"Keyboard and mouse inactivity\" feature. 7.5.1 and later whenIamInAOnlineMtg Boolean. Default is false. Available \"When I am in an online meeting\" feature. 7.5.1 and later selectStatusOnlyScreenShare Boolean. Default is false. Determines whether to select the \"Change my status only when I'm sharing my screen\" check box. 7.5.1 and later autoChangeMyStatusInMtg Boolean. Default is false. Determines whether to select the \"Automatically change my status\" radio button. Note that if this radio button is set as true, then the \"Prompt me before changing my status\" radio button will be UNavailable. If this is set as \"false\", the \"Prompt me before changing my status\" radio button will be available. After com.ibm.collaboration. realtime.imhub/ selectStatusOnly ScreenShare is set as true, com.ibm.collaboration. realtime.imhub/ autoChangeMyStatus InMtg works for screen share status. |7.5.1 and later| |minutesForIdleKeyboardMouse|Integer. Default is 20|Sets the \"When I have not used my keyboard or mouse for the following number of minutes:\" text field.|7.5.1 and later| |backWhenUnlocked|Boolean. Default is true.|Determines whether to select the \"Return to previous status when activity is resumed\" in \"Locking computer with operating system lock\" check box.|7.5.1 and later| |backWhenKeyboardMouseActive|Boolean. Default is true.|Determine whether to select the \"Return to previous status when activity is resumed\" in \"Keyboard and mouse inactivity\" check box.|7.5.1 and later| |blRetrievalRetryDelay|Integer. Default is 15000 ms.|Determines how long the client waits before trying again to retrieve the contact list from the storage service if the initial attempt times out. The default is 15 seconds, expressed as milliseconds.|8.5.2 IFR1 and later| Parent topic: Sametime client preferences","title":"Auto-status change preferences"},{"location":"admin/config_client_update_interval_xml.html","text":"Changing the update interval for managed preferences If you want to change the update interval for managed preferences, you can update the existing settings XML file. By default, managed settings are updated every 720 minutes (12 hours) and whenever the HCL\u00ae Sametime\u00ae Connect Client is started. To change the update interval, edit the settings XML file to add a new setting group. Update the existing XML file with a new setting group that contains an UpdateIntervalInMins setting. <settingGroup name=\"com.hcl.rcp.managedsettings\"> <setting name=\"UpdateIntervalInMins\" value=\"1\" isLocked=\"false\"/> </settingGroup> Updating settings has the following results: All unlocked settings can be modified by the user. Once a setting is modified by the user, any subsequent update to the same setting will not apply unless the setting is changed to isLocked=true on the settings XML file. This behavior is consistent with settings changed with the plugin_customization.ini file. User-modified preferences take precedence over settings from the plugin_customization.ini file and settings XML file. However, if the user's workspace is cleaned, the administrator's values will apply. Any settings or setting groups removed from the settings XML file (for example, to unmanage those settings) will remain on the client, and if the setting was previously locked, it will be automatically set to unlocked. All unmanaged settings will automatically be managed as standard preferences. Parent topic: Updating client preferences with the managed-settings.xml file","title":"Changing the update interval for managed preferences {#config_client_update_interval_xml .task}"},{"location":"admin/config_client_update_interval_xml.html#config_client_update_interval_xml","text":"If you want to change the update interval for managed preferences, you can update the existing settings XML file. By default, managed settings are updated every 720 minutes (12 hours) and whenever the HCL\u00ae Sametime\u00ae Connect Client is started. To change the update interval, edit the settings XML file to add a new setting group. Update the existing XML file with a new setting group that contains an UpdateIntervalInMins setting. <settingGroup name=\"com.hcl.rcp.managedsettings\"> <setting name=\"UpdateIntervalInMins\" value=\"1\" isLocked=\"false\"/> </settingGroup> Updating settings has the following results: All unlocked settings can be modified by the user. Once a setting is modified by the user, any subsequent update to the same setting will not apply unless the setting is changed to isLocked=true on the settings XML file. This behavior is consistent with settings changed with the plugin_customization.ini file. User-modified preferences take precedence over settings from the plugin_customization.ini file and settings XML file. However, if the user's workspace is cleaned, the administrator's values will apply. Any settings or setting groups removed from the settings XML file (for example, to unmanage those settings) will remain on the client, and if the setting was previously locked, it will be automatically set to unlocked. All unmanaged settings will automatically be managed as standard preferences. Parent topic: Updating client preferences with the managed-settings.xml file","title":"Changing the update interval for managed preferences"},{"location":"admin/config_client_update_pref.html","text":"Update preferences The following table lists the update preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release firstTimeRestartDelayMinutes Integer. Default is 0. Defines how long to delay for the first prompt after an automatic update is completed. Prompts immediately by default. 8.5.2 and later restartAction restart.now - user is presented with a restart dialog with Restart Now button only. restart.now.or.later - user is presented with a restart dialog with Restart Now and Wait x minutes buttons. restart.on.next.login - user is presented with an info message that the plug-in updates will be effected on next restart. restart.now.no.prompt - the client is restarted automatically when update is completed without any user interaction. Default is restart.now.or.later. |Defines how restart should be initiated on the client after an update is completed. Note this preference is just valid for administrator-initiated updates, but be invalid for user's manual updates by Tools -> Plug-ins menu.|8.5 and later| |restartRemindDelayMinutes|Integer. Default is 5.|Defines how long to delay the restart of the client after an update is completed. This setting is ignored if restartAction is set to restart.now or restart.on.next.login.|8.5 and later| Example entry in plugin_customization.ini: com.ibm.collaboration.realtime.update/restartAction=restart.now.no.prompt com.ibm.collaboration.realtime.update/restartRemindDelayMinutes=1 Parent topic: Sametime client preferences","title":"Update preferences {#config_client_update_pref .concept}"},{"location":"admin/config_client_update_pref.html#config_client_update_pref","text":"The following table lists the update preferences for the HCL\u00ae Sametime\u00ae Connect Client and Sametime Embedded Client for Notes\u00ae. Attribute Variable type Description Release firstTimeRestartDelayMinutes Integer. Default is 0. Defines how long to delay for the first prompt after an automatic update is completed. Prompts immediately by default. 8.5.2 and later restartAction restart.now - user is presented with a restart dialog with Restart Now button only. restart.now.or.later - user is presented with a restart dialog with Restart Now and Wait x minutes buttons. restart.on.next.login - user is presented with an info message that the plug-in updates will be effected on next restart. restart.now.no.prompt - the client is restarted automatically when update is completed without any user interaction. Default is restart.now.or.later. |Defines how restart should be initiated on the client after an update is completed. Note this preference is just valid for administrator-initiated updates, but be invalid for user's manual updates by Tools -> Plug-ins menu.|8.5 and later| |restartRemindDelayMinutes|Integer. Default is 5.|Defines how long to delay the restart of the client after an update is completed. This setting is ignored if restartAction is set to restart.now or restart.on.next.login.|8.5 and later| Example entry in plugin_customization.ini: com.ibm.collaboration.realtime.update/restartAction=restart.now.no.prompt com.ibm.collaboration.realtime.update/restartRemindDelayMinutes=1 Parent topic: Sametime client preferences","title":"Update preferences"},{"location":"admin/config_client_url_xml_file.html","text":"Changing the URL for the settings XML file in the plugin_customization.ini file If you must change the URL for the managed settings file, do so by updating the plugin_customization.ini file. Follow these steps to update the plugin_customization.ini file with the new file name or URL. Verify that the settings XML file is in the location where it will be called from the plugin_customization.ini file. In the plugin_customization.ini file, change the key that defines the Expeditor Managed settings framework and the name and location of the settings XML file.com.ibm.rcp.managedsettings.provider.file/URL and the name and location of the settings XML file to be used. For example: com.ibm.rcp.managedsettings.provider.file/URL=http://sametime.example.com/demo/managed-settings.xml or com.ibm.rcp.managedsettings.provider.file/URL=file://c:/data/managed-settings.xml The next update runs with the old URL, but subsequent updates run with the new URL. If the new URL is not reachable at the time of the update, the setting will not be saved and the original URL will continue to be used. The URL will not be changed until it is updated at a time that the URL can be reached. Parent topic: Configuring Sametime Connect Client preferences in the plugin_customization.ini file","title":"Changing the URL for the settings XML file in the plugin\\_customization.ini file {#config_client_url_xml_file .task}"},{"location":"admin/config_client_url_xml_file.html#config_client_url_xml_file","text":"If you must change the URL for the managed settings file, do so by updating the plugin_customization.ini file. Follow these steps to update the plugin_customization.ini file with the new file name or URL. Verify that the settings XML file is in the location where it will be called from the plugin_customization.ini file. In the plugin_customization.ini file, change the key that defines the Expeditor Managed settings framework and the name and location of the settings XML file.com.ibm.rcp.managedsettings.provider.file/URL and the name and location of the settings XML file to be used. For example: com.ibm.rcp.managedsettings.provider.file/URL=http://sametime.example.com/demo/managed-settings.xml or com.ibm.rcp.managedsettings.provider.file/URL=file://c:/data/managed-settings.xml The next update runs with the old URL, but subsequent updates run with the new URL. If the new URL is not reachable at the time of the update, the setting will not be saved and the original URL will continue to be used. The URL will not be changed until it is updated at a time that the URL can be reached. Parent topic: Configuring Sametime Connect Client preferences in the plugin_customization.ini file","title":"Changing the URL for the settings XML file in the plugin_customization.ini file"},{"location":"admin/config_client_widg_pref.html","text":"Live Text and Widgets preferences The following scenarios show the Live Text and Widgets preferences for the HCL\u00ae Sametime\u00ae Connect Client . These scenarios apply to setting preferences for the stand-alone client. Case 1 (default): Disable both Live Text and Widgets This is the default scenario, set with the following preference in plugin_customization.ini: com.hcl.rcp.toolbox.admin/toolboxvisibleMaster=false Case 2: Enable both Live Text and Widgets Enable both Live Text and Widgets by setting the following preference to true in plugin_customization.ini: com.hcl.collaboration.realtime/enableSametimeLiveText=true Note: This overrides the setting for toolboxvisibleMaster . You do not need to manually set toolboxvisibleMaster to true. Case 3: Enable only Live Text, not Widgets To enable only Live Text, managed preferences is required. Configure the following managed preferences: <ManagedSettings> <settingGroup name=\"com.hcl.collaboration.realtime\"> <!-- Enable live text support in Sametime --> <setting name=\"enableSametimeLiveText\" value=\"true\" isLocked=\"false\"/> </settingGroup> <settingGroup name=\"com.hcl.rcp.toolbox.admin\"> <!-- Disable widget support in Sametime --> <setting name=\"toolboxvisible\" value=\"false\" isLocked=\"true\"/> <setting name=\"toolboxenableRecognizers\" value=\"true\" isLocked=\"true\"/> </settingGroup> </ManagedSettings> Case 4: Enable only Widgets, not Live Text To enable only Widgets but not Live Text, managed preferences are required. Configure the following managed preferences: <ManagedSettings> <settingGroup name=\"com.hcl.collaboration.realtime\"> <!-- Disable live text support in Sametime --> <setting name=\"enableSametimeLiveText\" value=\"false\" isLocked=\"false\"/> </settingGroup> <settingGroup name=\"com.hcl.rcp.toolbox.admin\"> <!-- Enable widget support in Sametime --> <setting name=\"toolboxvisible\" value=\"true\" isLocked=\"true\"/> <setting name=\"toolboxvisibleMaster\" value=\"true\" isLocked=\"true\"/> <setting name=\"toolboxenableRecognizers\" value=\"false\" isLocked=\"true\"/> </settingGroup> </ManagedSettings> Parent topic: Sametime client preferences","title":"Live Text and Widgets preferences {#config_client_widg_pref .concept}"},{"location":"admin/config_client_widg_pref.html#config_client_widg_pref","text":"The following scenarios show the Live Text and Widgets preferences for the HCL\u00ae Sametime\u00ae Connect Client . These scenarios apply to setting preferences for the stand-alone client. Case 1 (default): Disable both Live Text and Widgets This is the default scenario, set with the following preference in plugin_customization.ini: com.hcl.rcp.toolbox.admin/toolboxvisibleMaster=false Case 2: Enable both Live Text and Widgets Enable both Live Text and Widgets by setting the following preference to true in plugin_customization.ini: com.hcl.collaboration.realtime/enableSametimeLiveText=true Note: This overrides the setting for toolboxvisibleMaster . You do not need to manually set toolboxvisibleMaster to true. Case 3: Enable only Live Text, not Widgets To enable only Live Text, managed preferences is required. Configure the following managed preferences: <ManagedSettings> <settingGroup name=\"com.hcl.collaboration.realtime\"> <!-- Enable live text support in Sametime --> <setting name=\"enableSametimeLiveText\" value=\"true\" isLocked=\"false\"/> </settingGroup> <settingGroup name=\"com.hcl.rcp.toolbox.admin\"> <!-- Disable widget support in Sametime --> <setting name=\"toolboxvisible\" value=\"false\" isLocked=\"true\"/> <setting name=\"toolboxenableRecognizers\" value=\"true\" isLocked=\"true\"/> </settingGroup> </ManagedSettings> Case 4: Enable only Widgets, not Live Text To enable only Widgets but not Live Text, managed preferences are required. Configure the following managed preferences: <ManagedSettings> <settingGroup name=\"com.hcl.collaboration.realtime\"> <!-- Disable live text support in Sametime --> <setting name=\"enableSametimeLiveText\" value=\"false\" isLocked=\"false\"/> </settingGroup> <settingGroup name=\"com.hcl.rcp.toolbox.admin\"> <!-- Enable widget support in Sametime --> <setting name=\"toolboxvisible\" value=\"true\" isLocked=\"true\"/> <setting name=\"toolboxvisibleMaster\" value=\"true\" isLocked=\"true\"/> <setting name=\"toolboxenableRecognizers\" value=\"false\" isLocked=\"true\"/> </settingGroup> </ManagedSettings> Parent topic: Sametime client preferences","title":"Live Text and Widgets preferences"},{"location":"admin/config_client_xml_file.html","text":"Defining preferences in the managed-settings.xml file Follow these instructions to define preferences in a managed-settings.xml file. This is an XML file and rules for XML files apply. Additionally, the following items should be considered: Do not create any extra blank lines in the file. To use comments, precede the line with a hashtag (#). Do not use the tab key to indent lines, use two spaces instead. Do not copy text from the help center and use it in your file because it may copy some of the encoding from the page and cause the file to fail. It is helpful to use an XML editor, but a plain text editor can be used as well. If using a plain text editor, it is important to check the file extension when saving (must be .xml not .txt). There is an example managed-settings.xml file attached to the troubleshooting article which can be used to test managed settings in place of creating a new one. This procedure will demonstrate how to create the managed-settings.xml and define chat history preferences for enabling automatically save chats for 7 days. Procedure Create a new file with UTF-8 encoding named \u201cmanaged-settings.xml\u201d. Note: No other file names are supported. Place the opening and ending statements in the file: <?xml version=\"1.0\"?> <ManagedSettings> </ManagedSettings> In between the <ManagedSettings> tags the settings must be defined. Thus, the last line of the file will be </ManagedSettings>. Review the settings that can be defined. For this example, the chat logging preferences will be changed. Note: You can define other settings, this example is to only demonstrate the syntax. Place the settingGroup tags in between the <ManagedSettings> tags. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"\"> </settingGroup> </ManagedSettings> On the preferences documentation pages, some tables provide the names of the settingGroup. For example, in the Chat Preferences , table 2 is for Chat History Preferences. The settingGroup name is com.ibm.collaboration.realtime.chat.logging . The settings that are used for this example are \u201cdays.storage.max\u201d and \u201clogging.default\u201d. This will configure the user\u2019s client to automatically log all chats on the client-side and retain them for 7 days. Place the name of the settingGroup in the <settingGroup name=\u201d\u201d> tag. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> </settingGroup> </ManagedSettings> When you define the settings (which are placed inside the settingGroup tags) there are several options. Refer to the table for the setting name. In the example from above, the two settings used in the example are \u201cdays.storage.max\u201d and \u201clogging.default\u201d. These will be defined in a tag called <setting name=\u201d\u201d value=\u201d\u201d/>. These lines are indented with two spaces. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d/> </settingGroup> </ManagedSettings> You can define settings from other settingGroups in the same file. Ensure that the formatting of spacing remains the same. For example, add a contact list preference to sort groups alphabetically by default. These settings are documented in the Contact list preferences topic. Open the help center topic and locate the settingGroup name. Locate the setting name. Add the new settingGroup and setting names below the first settingGroup. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d/> </settingGroup> <settingGroup name=\"com.ibm.collaboration.realtime.imhub\"> <setting name=\u201dsortGroups\u201d value=\u201dtrue\u201d/> </settingGroup> </ManagedSettings> Enable optional features. The < settingGroup > tag has an attribute called \u201clastModDate\u201d which when present every change to a setting group must also be accompanied by a change to the lastModDate attribute or the new values will not be updated. If you do not use the \u201clastModDate\u201d attribute, the values are always updated, even if they are not new. If you choose to use the lastModDate timestamp, the format is using the jav a .text.SimpleDateFormat format. The syntax is YYYYMMDDThhmmss , where YYYY=year, MM=month, DD=day, hh=hours, mm=minutes, ss=seconds. The values following the T are optional. An example of this: <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\" lastModDate=\u201d2021-02-11T17:39:21-05\u201d> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d/> </settingGroup> </ManagedSettings> Each <setting> tag can have the following optional attributes: isLocked - Boolean. The default value is true. If true, the setting is read-only and any changes that a user or application make to the value set by you, the administrator, are prevented or later overwritten. If this attribute is set to false, the administrator's setting is treated as a default value that can be changed by the user. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d isLocked=\u201dfalse\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d isLocked=\u201dtrue\u201d/> </settingGroup> </ManagedSettings> In the above example all chats will be saved automatically initially until the user changes the setting, and the chat history will be retained for 7 days, user not able to change this setting because it is locked. overwriteUnlocked - Boolean. The default value is false. By default, a setting that is specified as being unlocked will be treated as a default and will not overwrite any existing value on the client. This is to avoid undoing changes that the user might have legitimately made. However, if this setting is set to true, the unlocked value will be overwritten with this new value even if it means clearing the user's existing value. restartRequired - Boolean. The default value is false. This attribute applies only when you automatically update client preferences with the managed-settings.xml file. Setting this to true creates a user prompt to restart the client as soon as the managed setting is applied. Use this optional attribute only if a restart of the client is required to activate the preference. The restart occurs only if the setting that includes this attribute is updated. Test the managed-settings.xml file for formatting errors. Open the file in a web browser and ensure that there are no syntax errors. If errors are present, edit the file and correct the syntax problem. Deploy managed-settings.xml or managed-community-configs.xml file to a web server . Deploy managed-settings.xml or managed-community-configs.xml file to a web server Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. Updating the client policy to include the managed settings or managed community configs URL Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. Parent topic: Updating client preferences with the managed-settings.xml file","title":"Defining preferences in the managed-settings.xml file {#config_client_xml_file .task}"},{"location":"admin/config_client_xml_file.html#config_client_xml_file","text":"Follow these instructions to define preferences in a managed-settings.xml file. This is an XML file and rules for XML files apply. Additionally, the following items should be considered: Do not create any extra blank lines in the file. To use comments, precede the line with a hashtag (#). Do not use the tab key to indent lines, use two spaces instead. Do not copy text from the help center and use it in your file because it may copy some of the encoding from the page and cause the file to fail. It is helpful to use an XML editor, but a plain text editor can be used as well. If using a plain text editor, it is important to check the file extension when saving (must be .xml not .txt). There is an example managed-settings.xml file attached to the troubleshooting article which can be used to test managed settings in place of creating a new one. This procedure will demonstrate how to create the managed-settings.xml and define chat history preferences for enabling automatically save chats for 7 days. Procedure Create a new file with UTF-8 encoding named \u201cmanaged-settings.xml\u201d. Note: No other file names are supported. Place the opening and ending statements in the file: <?xml version=\"1.0\"?> <ManagedSettings> </ManagedSettings> In between the <ManagedSettings> tags the settings must be defined. Thus, the last line of the file will be </ManagedSettings>. Review the settings that can be defined. For this example, the chat logging preferences will be changed. Note: You can define other settings, this example is to only demonstrate the syntax. Place the settingGroup tags in between the <ManagedSettings> tags. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"\"> </settingGroup> </ManagedSettings> On the preferences documentation pages, some tables provide the names of the settingGroup. For example, in the Chat Preferences , table 2 is for Chat History Preferences. The settingGroup name is com.ibm.collaboration.realtime.chat.logging . The settings that are used for this example are \u201cdays.storage.max\u201d and \u201clogging.default\u201d. This will configure the user\u2019s client to automatically log all chats on the client-side and retain them for 7 days. Place the name of the settingGroup in the <settingGroup name=\u201d\u201d> tag. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> </settingGroup> </ManagedSettings> When you define the settings (which are placed inside the settingGroup tags) there are several options. Refer to the table for the setting name. In the example from above, the two settings used in the example are \u201cdays.storage.max\u201d and \u201clogging.default\u201d. These will be defined in a tag called <setting name=\u201d\u201d value=\u201d\u201d/>. These lines are indented with two spaces. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d/> </settingGroup> </ManagedSettings> You can define settings from other settingGroups in the same file. Ensure that the formatting of spacing remains the same. For example, add a contact list preference to sort groups alphabetically by default. These settings are documented in the Contact list preferences topic. Open the help center topic and locate the settingGroup name. Locate the setting name. Add the new settingGroup and setting names below the first settingGroup. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d/> </settingGroup> <settingGroup name=\"com.ibm.collaboration.realtime.imhub\"> <setting name=\u201dsortGroups\u201d value=\u201dtrue\u201d/> </settingGroup> </ManagedSettings> Enable optional features. The < settingGroup > tag has an attribute called \u201clastModDate\u201d which when present every change to a setting group must also be accompanied by a change to the lastModDate attribute or the new values will not be updated. If you do not use the \u201clastModDate\u201d attribute, the values are always updated, even if they are not new. If you choose to use the lastModDate timestamp, the format is using the jav a .text.SimpleDateFormat format. The syntax is YYYYMMDDThhmmss , where YYYY=year, MM=month, DD=day, hh=hours, mm=minutes, ss=seconds. The values following the T are optional. An example of this: <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\" lastModDate=\u201d2021-02-11T17:39:21-05\u201d> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d/> </settingGroup> </ManagedSettings> Each <setting> tag can have the following optional attributes: isLocked - Boolean. The default value is true. If true, the setting is read-only and any changes that a user or application make to the value set by you, the administrator, are prevented or later overwritten. If this attribute is set to false, the administrator's setting is treated as a default value that can be changed by the user. <?xml version=\"1.0\"?> <ManagedSettings> <settingGroup name=\"com.ibm.collaboration.realtime.chat.logging\"> <setting name=\u201dlogging.default\u201d value=\u201d0\u201d isLocked=\u201dfalse\u201d/> <setting name=\u201ddays.storage.max\u201d value=\u201d7\u201d isLocked=\u201dtrue\u201d/> </settingGroup> </ManagedSettings> In the above example all chats will be saved automatically initially until the user changes the setting, and the chat history will be retained for 7 days, user not able to change this setting because it is locked. overwriteUnlocked - Boolean. The default value is false. By default, a setting that is specified as being unlocked will be treated as a default and will not overwrite any existing value on the client. This is to avoid undoing changes that the user might have legitimately made. However, if this setting is set to true, the unlocked value will be overwritten with this new value even if it means clearing the user's existing value. restartRequired - Boolean. The default value is false. This attribute applies only when you automatically update client preferences with the managed-settings.xml file. Setting this to true creates a user prompt to restart the client as soon as the managed setting is applied. Use this optional attribute only if a restart of the client is required to activate the preference. The restart occurs only if the setting that includes this attribute is updated. Test the managed-settings.xml file for formatting errors. Open the file in a web browser and ensure that there are no syntax errors. If errors are present, edit the file and correct the syntax problem. Deploy managed-settings.xml or managed-community-configs.xml file to a web server . Deploy managed-settings.xml or managed-community-configs.xml file to a web server Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. Updating the client policy to include the managed settings or managed community configs URL Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. Parent topic: Updating client preferences with the managed-settings.xml file","title":"Defining preferences in the managed-settings.xml file"},{"location":"admin/config_client_xml_location.html","text":"Updating client preferences with the managed-settings.xml file Sametime rich clients such as the embedded Sametime client in HCL Notes and the full Sametime standalone client are based upon the Eclipse framework. These clients can process a managed-settings.xml file to receive new or updated preferences automatically. The managed-settings.xml file is policy based, and each policy can define a different xml file to apply preferences to different groups of users. Use a managed-settings.xml file to manage and define client preferences. The file is hosted on a web server. At login time, the client receives policies then checks for the existence of the managed-settings.xml file according to the \"Sametime\u00ae update site URL\" policy. For example, if the configured URL is http://example.com/updates, the client looks for updated preferences in http://example.com/updates/managed-settings.xml. The managed-settings.xml file can override and control any client preference, including hidden configuration preferences and preferences in the client user interface. Many preferences can also be set as read-only by specifying a locked=\"true\" attribute for the preference. The client settings which can be managed using managed-settings.xml are listed in Sametime client preferences as well as its subtopics. There is a separate configuration file: managed-community-configs.xml which is used to manage or change client connectivity and connection preferences. See the topic: Updating connectivity settings with the managed-community-configs.xml file . Note: Sametime embedded clients for Notes can also be managed through the Domino\u00ae Desktop policy settings document. Follow these steps to create and post a managed-settings.xml file. Create a settings XML file and save it as managed-settings.xml. Define preferences in the settings XML file. Place the managed-settings.xml file on a web server to host the file. Update the Sametime Policy for the user in the policies.user.xml file. Changes take effect the next time the user starts Sametime. Settings found in the managed-settings.xml take precedence over matching settings in the plugin_customization.ini file. To test changes in a managed-settings.xml file, create a policy set that includes the administration update site URL and place the .xml file in the location specified by the update site URL. Apply the policy to yourself and log in to the client to verify the preferences. To troubleshoot managed settings, see Troubleshooting Sametime Managed Settings . Defining preferences in the managed-settings.xml file Follow these instructions to define preferences in a managed-settings.xml file. Changing the update interval for managed preferences If you want to change the update interval for managed preferences, you can update the existing settings XML file. Discontinuing managed preferences To stop setting preferences through the Expeditor managed settings framework, remove the reference to the managed-settings.xml or managed-community-configs.xml file(s) and unlock any previously read-only settings. Parent topic: Configuring Sametime client preferences with the Expeditor managed settings framework","title":"Updating client preferences with the managed-settings.xml file {#config_client_xml_location .task}"},{"location":"admin/config_client_xml_location.html#config_client_xml_location","text":"Sametime rich clients such as the embedded Sametime client in HCL Notes and the full Sametime standalone client are based upon the Eclipse framework. These clients can process a managed-settings.xml file to receive new or updated preferences automatically. The managed-settings.xml file is policy based, and each policy can define a different xml file to apply preferences to different groups of users. Use a managed-settings.xml file to manage and define client preferences. The file is hosted on a web server. At login time, the client receives policies then checks for the existence of the managed-settings.xml file according to the \"Sametime\u00ae update site URL\" policy. For example, if the configured URL is http://example.com/updates, the client looks for updated preferences in http://example.com/updates/managed-settings.xml. The managed-settings.xml file can override and control any client preference, including hidden configuration preferences and preferences in the client user interface. Many preferences can also be set as read-only by specifying a locked=\"true\" attribute for the preference. The client settings which can be managed using managed-settings.xml are listed in Sametime client preferences as well as its subtopics. There is a separate configuration file: managed-community-configs.xml which is used to manage or change client connectivity and connection preferences. See the topic: Updating connectivity settings with the managed-community-configs.xml file . Note: Sametime embedded clients for Notes can also be managed through the Domino\u00ae Desktop policy settings document. Follow these steps to create and post a managed-settings.xml file. Create a settings XML file and save it as managed-settings.xml. Define preferences in the settings XML file. Place the managed-settings.xml file on a web server to host the file. Update the Sametime Policy for the user in the policies.user.xml file. Changes take effect the next time the user starts Sametime. Settings found in the managed-settings.xml take precedence over matching settings in the plugin_customization.ini file. To test changes in a managed-settings.xml file, create a policy set that includes the administration update site URL and place the .xml file in the location specified by the update site URL. Apply the policy to yourself and log in to the client to verify the preferences. To troubleshoot managed settings, see Troubleshooting Sametime Managed Settings . Defining preferences in the managed-settings.xml file Follow these instructions to define preferences in a managed-settings.xml file. Changing the update interval for managed preferences If you want to change the update interval for managed preferences, you can update the existing settings XML file. Discontinuing managed preferences To stop setting preferences through the Expeditor managed settings framework, remove the reference to the managed-settings.xml or managed-community-configs.xml file(s) and unlock any previously read-only settings. Parent topic: Configuring Sametime client preferences with the Expeditor managed settings framework","title":"Updating client preferences with the managed-settings.xml file"},{"location":"admin/config_st_allowed_client_types.html","text":"Configuring allowed client types You can define the types of clients that can connect to the Sametime server. When using this setting, only client IDs that are on the list are allowed to connect to the Sametime server. For more information on the list of Sametime client IDs, see Sametime Client IDs . This is an optional task. Follow these steps to specify the list of client types. Open a text editor on the Sametime server. Open the sametime.ini file located in the Sametime server installation directory. The default directory in Windows is C:\\program files\\HCL\\domino. In the Config section, enter the client type IDs for the allowed client types in the VPS_ALLOWED_LOGIN_TYPES flag. If the flag is not specified or its value is empty, then all client types are allowed to connect to the server. It is a comma-separated list. [Config]VPS_ALLOWED_LOGIN_TYPES=130B,130A Note: Once the VPS_ALLOWED_LOGIN_TYPES flag is used, you must update the values whenever you add new client types; otherwise the new client type cannot log in. Save the sametime.ini file. Restart the Sametime server to commit the changes. Parent topic: Managing client types and log-ins","title":"Configuring allowed client types {#config_st_allowed_client_types .task}"},{"location":"admin/config_st_allowed_client_types.html#config_st_allowed_client_types","text":"You can define the types of clients that can connect to the Sametime server. When using this setting, only client IDs that are on the list are allowed to connect to the Sametime server. For more information on the list of Sametime client IDs, see Sametime Client IDs . This is an optional task. Follow these steps to specify the list of client types. Open a text editor on the Sametime server. Open the sametime.ini file located in the Sametime server installation directory. The default directory in Windows is C:\\program files\\HCL\\domino. In the Config section, enter the client type IDs for the allowed client types in the VPS_ALLOWED_LOGIN_TYPES flag. If the flag is not specified or its value is empty, then all client types are allowed to connect to the server. It is a comma-separated list. [Config]VPS_ALLOWED_LOGIN_TYPES=130B,130A Note: Once the VPS_ALLOWED_LOGIN_TYPES flag is used, you must update the values whenever you add new client types; otherwise the new client type cannot log in. Save the sametime.ini file. Restart the Sametime server to commit the changes. Parent topic: Managing client types and log-ins","title":"Configuring allowed client types"},{"location":"admin/configuration_files.html","text":"Community configuration files Configuration files maintain information used by the Sametime server for various reasons. Override the defaults of the Sametime community container/pod. In Sametime v12, configuration files are generated on demand based on information in the Docker or Kubernetes container management configuration file. File Name Environment Description sametime.ini Kubernetes Docker Sectioned configuration file used by the Sametime server. It is generated on demand based on values in custom.env or values.yaml files. Settings can be over-ridden if needed Note: The file must conform to the XML syntax rules. | |StCommunityConfig.xml|Kubernetes Docker|Contains LDAP settings and more. Link to new topic (see Casey) Note: In versions previous to V12 this file was named stconfig.nsf. | |UserInfoConfig.xml|Kubernetes Docker|Contains configuration data for business cards. Note: The file must conform to the XML syntax rules. | |Policies.server.xml|Kubernetes Docker| | |Policies.user.xml|Kubernetes Docker| | |Clustering|Kubernetes| | Note: In releases prior to version 12, there are several configuration files used by different Sametime servers. Configuration values can be modified. Where a modification can be done it is covered in the appropriate topic. For example, updates to LTPA keys are covered in the Setting up SSO using LTPA topics. Parent topic: Administering","title":"Community configuration files {#configuration_files .concept}"},{"location":"admin/configuration_files.html#configuration_files","text":"Configuration files maintain information used by the Sametime server for various reasons. Override the defaults of the Sametime community container/pod. In Sametime v12, configuration files are generated on demand based on information in the Docker or Kubernetes container management configuration file. File Name Environment Description sametime.ini Kubernetes Docker Sectioned configuration file used by the Sametime server. It is generated on demand based on values in custom.env or values.yaml files. Settings can be over-ridden if needed Note: The file must conform to the XML syntax rules. | |StCommunityConfig.xml|Kubernetes Docker|Contains LDAP settings and more. Link to new topic (see Casey) Note: In versions previous to V12 this file was named stconfig.nsf. | |UserInfoConfig.xml|Kubernetes Docker|Contains configuration data for business cards. Note: The file must conform to the XML syntax rules. | |Policies.server.xml|Kubernetes Docker| | |Policies.user.xml|Kubernetes Docker| | |Clustering|Kubernetes| | Note: In releases prior to version 12, there are several configuration files used by different Sametime servers. Configuration values can be modified. Where a modification can be done it is covered in the appropriate topic. For example, updates to LTPA keys are covered in the Setting up SSO using LTPA topics. Parent topic: Administering","title":"Community configuration files"},{"location":"admin/configuring.html","text":"Configuring This section provides information on configuring the HCL Sametime server. Adding corporate branding to meeting pages You can customize meetings to reflect your company's branding and visual presence. Adding virtual backgrounds to the global library By default, you can customize your meetings with virtual backgrounds and themes. As an administrator, you can choose which backgrounds and themes are available to all users. Configuring alternate STUN servers Sametime Meetings uses public Google STUN servers by default. To use different STUN servers, you must complete this procedure before installing Sametime Meetings. Setting up business cards You can configure the Sametime server so that business card information about an individual displays when a user hovers over a name in a chat window or a contact list. Business card information also displays at the top of an active chat window. Configuring LDAP Sametime supports LDAP directory servers as the user repository. Updating the time-to-live index for persistent chat The time-to-live (TTL) setting defines how long the chat history is stored in the database. The default value is 90 days. However, administrators can update the value based on the organization's preferred setting. Managing secrets in Kubernetes Sensitive information such as passwords, service account names, certificates, and other confidential data needed by Sametime pods are stored in secrets. In addition to helm charts and configuration map, the Sametime configuration is also derived from secrets. Applying configuration changes in Docker Configuration files contain environment variables that can be changed and applied to the Sametime server. Applying configuration changes in Kubernetes Configuration files contain environment variables that can be changed and applied to the Sametime server. Chat This section contains Chat configuration considerations. Meetings This contains configuration steps specific to the HCL Sametime Meetings server. Integrating with other applications Integration with an application such as Verse prior to Sametime 12.0 requires the legacy web-client interface. Beginning in Sametime 12.0 the legacy web-client is not enabled by default, but can enabled when needed for integration with other products. Monitoring your meeting and chat metrics with Grafana\u00ae Sametime uses the third-party software, Grafana\u00ae, to generate insightful graphs and visualizations derived from time-series database (TSDB) data. This section covers the steps on how to use Grafana in your Sametime environment. Push messaging through a proxy Depending on your network settings, your firewalls could prevent Sametime proxy from connecting to push networks like Apple Push Notification service (APNs) and Firebase Cloud Messaging (FCM) through the Internet. Sametime supports the sending of APNS and FCM messages through a proxy server. If you need to send APNS or FCM message through a proxy server in your environment, you need to configure the settings for the messages you want routed through the proxy. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Configuring {#configuring .task}"},{"location":"admin/configuring.html#configuring","text":"This section provides information on configuring the HCL Sametime server. Adding corporate branding to meeting pages You can customize meetings to reflect your company's branding and visual presence. Adding virtual backgrounds to the global library By default, you can customize your meetings with virtual backgrounds and themes. As an administrator, you can choose which backgrounds and themes are available to all users. Configuring alternate STUN servers Sametime Meetings uses public Google STUN servers by default. To use different STUN servers, you must complete this procedure before installing Sametime Meetings. Setting up business cards You can configure the Sametime server so that business card information about an individual displays when a user hovers over a name in a chat window or a contact list. Business card information also displays at the top of an active chat window. Configuring LDAP Sametime supports LDAP directory servers as the user repository. Updating the time-to-live index for persistent chat The time-to-live (TTL) setting defines how long the chat history is stored in the database. The default value is 90 days. However, administrators can update the value based on the organization's preferred setting. Managing secrets in Kubernetes Sensitive information such as passwords, service account names, certificates, and other confidential data needed by Sametime pods are stored in secrets. In addition to helm charts and configuration map, the Sametime configuration is also derived from secrets. Applying configuration changes in Docker Configuration files contain environment variables that can be changed and applied to the Sametime server. Applying configuration changes in Kubernetes Configuration files contain environment variables that can be changed and applied to the Sametime server. Chat This section contains Chat configuration considerations. Meetings This contains configuration steps specific to the HCL Sametime Meetings server. Integrating with other applications Integration with an application such as Verse prior to Sametime 12.0 requires the legacy web-client interface. Beginning in Sametime 12.0 the legacy web-client is not enabled by default, but can enabled when needed for integration with other products. Monitoring your meeting and chat metrics with Grafana\u00ae Sametime uses the third-party software, Grafana\u00ae, to generate insightful graphs and visualizations derived from time-series database (TSDB) data. This section covers the steps on how to use Grafana in your Sametime environment. Push messaging through a proxy Depending on your network settings, your firewalls could prevent Sametime proxy from connecting to push networks like Apple Push Notification service (APNs) and Firebase Cloud Messaging (FCM) through the Internet. Sametime supports the sending of APNS and FCM messages through a proxy server. If you need to send APNS or FCM message through a proxy server in your environment, you need to configure the settings for the messages you want routed through the proxy. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Configuring"},{"location":"admin/configuring_ldap.html","text":"Configuring LDAP Sametime supports LDAP directory servers as the user repository. For LDAP security, see the security section of the help center. Configuring LDAP on Docker Content needed. Configuring LDAP on Kubernetes Changing the LDAP service account password in Kubernetes If you are using an authenticated bind for LDAP, with a password that expires periodically, you'll need to update the LDAP bind credentials for Sametime clusters in Kubernetes with a new password. Configuring additional LDAP servers on Docker You can configure the Sametime server to connect to two or more LDAP servers. Configuring additional LDAP servers on Kubernetes You can configure the Sametime Community pod to connect to two or more LDAP servers. Creating custom Java classes for searching LDAP These topic are in progress Create custom Java\u2122 classes that provide greater control over how Sametime\u00ae conducts name searches of an LDAP directory and how results are formatted. Parent topic: Configuring","title":"Configuring LDAP {#configuring_ldap .task}"},{"location":"admin/configuring_ldap.html#configuring_ldap","text":"Sametime supports LDAP directory servers as the user repository. For LDAP security, see the security section of the help center. Configuring LDAP on Docker Content needed. Configuring LDAP on Kubernetes Changing the LDAP service account password in Kubernetes If you are using an authenticated bind for LDAP, with a password that expires periodically, you'll need to update the LDAP bind credentials for Sametime clusters in Kubernetes with a new password. Configuring additional LDAP servers on Docker You can configure the Sametime server to connect to two or more LDAP servers. Configuring additional LDAP servers on Kubernetes You can configure the Sametime Community pod to connect to two or more LDAP servers. Creating custom Java classes for searching LDAP These topic are in progress Create custom Java\u2122 classes that provide greater control over how Sametime\u00ae conducts name searches of an LDAP directory and how results are formatted. Parent topic: Configuring","title":"Configuring LDAP"},{"location":"admin/configuring_ldap_docker.html","text":"Configuring LDAP on Docker Content needed. Parent topic: Configuring LDAP","title":"Configuring LDAP on Docker {#configuring_ldap_docker .task}"},{"location":"admin/configuring_ldap_docker.html#configuring_ldap_docker","text":"Content needed. Parent topic: Configuring LDAP","title":"Configuring LDAP on Docker"},{"location":"admin/configuring_ldap_kubernetes.html","text":"Configuring LDAP on Kubernetes Parent topic: Configuring LDAP","title":"Configuring LDAP on Kubernetes {#configuring_ldap_kubernetes .task}"},{"location":"admin/configuring_ldap_kubernetes.html#configuring_ldap_kubernetes","text":"Parent topic: Configuring LDAP","title":"Configuring LDAP on Kubernetes"},{"location":"admin/configuring_ldap_multiple_docker.html","text":"Configuring additional LDAP servers on Docker You can configure the Sametime server to connect to two or more LDAP servers. When you connect to more than one LDAP server, it is important for the names to be unique. If you are trying to achieve high availability to the same directory, use a load balancer to front-end the connection between the multiple LDAP servers. Configure the cluster for the first LDAP server. This must be done when the cluster was installed. You must know the host name, port and optional bind credentials for each LDAP server. If you are using a secure connection to LDAP, the LDAP server\u2019s certificate for each server must be stored in the same .p12 trust store file. You must create a secret containing the trust store that holds each LDAP server\u2019s certificate. When more than one LDAP is defined in an environment, they are searched in the order defined in the StCommunityConfig.xml and UserInfoConfig.xml files. When you define each LDAP server, the order in which they are listed in the configuration is the same order in which they are searched. The process described in this procedure involves copying the StCommunityConfig.xml and UserInfoConfig.xml files from the Sametime community (chat) container. These copied configurations overrides the default LDAP configuration settings. The LDAP servers are defined within each configuration file. Docker-compose commands are used to pull the existing configuration files from the Sametime server to your local machine. Modify these files locally with the required settings, then add a volume under the community section of the docker-compose.yml file to enable the modified settings. This procedure is to configure Sametime to connect to two or more separate LDAP servers that have unique names. Change to the sametime_installation_directory directory. Identify the chat-server container ID by running the command 'docker container ls' and finding the chat-server IMAGE. The NAME is the container name, as an example: sametime-community-1. Pull a copy of the StCommunityConfig.xml and UserInfoConfig.xml from the chat-server container by running the below command, where container_name is the container name for the chat-server identified in step 2. docker cp <container_name>:/local/notesdata/UserInfoConfig.xml . docker cp <container_name>:/local/notesdata/StCommunityConfig.xml . Find the base64 encoded value of your bind credentials. If you are using an authenticated bind, issue the following command in a Linux shell that contains your user name and password separated by a colon. The resulting value is used in a later step. echo -n \u201cusername:password\u201d | base64 -d If the Bind DN is CN=bind,O=Example and the password is password, then the command is: echo -n \u201cCN=bind,O=Example:password\u201d | base64 -d Use a text editor to open your local copy of UserInfoConfig.xml in edit mode. Duplicate the line that begins with StorageDetails . The order in which you list your StorageDetails statement is the search order to be used. HostName : The fully qualified host name or IP address of the second LDAP server. Port : If using unsecured LDAP, specify the port number used by LDAP. If you are using secure LDAP, you don't need to modify this field. UserName : Set this field to empty double-quotes ( \u201c\u201d ). Password : Set this field to empty double-quotes (\u201c\u201d). If using an authenticated bind, add a new parameter after UserName and Password called UserEncodedAuth= and set it to the value that was determined in a previous step. BaseDN : Define a base DN for searching the directory. If left blank, the entire directory is searched. SearchFilter : SearchFilter Modify the search filter if needed. The defaults work well with Domino LDAP. You can make other changes to the business cards configuration if needed at this time. When finished, save and close the file. When finished, save and close the UserInfoConfig.xml file. Edit the StCommunityConfig.xml file with a text editor and make the following changes. Within the <LDAP> section, duplicate the line that begins with <Connection Hostname. Modify the new line to contain the details of the second LDAP server. Modify the SearchOrder parameter for the additional LDAP server to a unique number. This must match the search order you selected for UserInfoConfig.xml. Save and close the StCommunityConfig.xml file. Edit the docker-compose.yaml by adding the following under the community section: volumes: - ./StCommunityConfig.xml:/local/notesdata/StCommunityConfig.xml - ./UserInfoConfig.xml:/local/notesdata/UserInfoConfig.xml Restart the server to apply the changes by running the following commands. docker-compose down docker-compose up -d Parent topic: Configuring LDAP","title":"Configuring additional LDAP servers on Docker {#configuring_ldap_multiple_docker .task}"},{"location":"admin/configuring_ldap_multiple_docker.html#configuring_ldap_multiple_docker","text":"You can configure the Sametime server to connect to two or more LDAP servers. When you connect to more than one LDAP server, it is important for the names to be unique. If you are trying to achieve high availability to the same directory, use a load balancer to front-end the connection between the multiple LDAP servers. Configure the cluster for the first LDAP server. This must be done when the cluster was installed. You must know the host name, port and optional bind credentials for each LDAP server. If you are using a secure connection to LDAP, the LDAP server\u2019s certificate for each server must be stored in the same .p12 trust store file. You must create a secret containing the trust store that holds each LDAP server\u2019s certificate. When more than one LDAP is defined in an environment, they are searched in the order defined in the StCommunityConfig.xml and UserInfoConfig.xml files. When you define each LDAP server, the order in which they are listed in the configuration is the same order in which they are searched. The process described in this procedure involves copying the StCommunityConfig.xml and UserInfoConfig.xml files from the Sametime community (chat) container. These copied configurations overrides the default LDAP configuration settings. The LDAP servers are defined within each configuration file. Docker-compose commands are used to pull the existing configuration files from the Sametime server to your local machine. Modify these files locally with the required settings, then add a volume under the community section of the docker-compose.yml file to enable the modified settings. This procedure is to configure Sametime to connect to two or more separate LDAP servers that have unique names. Change to the sametime_installation_directory directory. Identify the chat-server container ID by running the command 'docker container ls' and finding the chat-server IMAGE. The NAME is the container name, as an example: sametime-community-1. Pull a copy of the StCommunityConfig.xml and UserInfoConfig.xml from the chat-server container by running the below command, where container_name is the container name for the chat-server identified in step 2. docker cp <container_name>:/local/notesdata/UserInfoConfig.xml . docker cp <container_name>:/local/notesdata/StCommunityConfig.xml . Find the base64 encoded value of your bind credentials. If you are using an authenticated bind, issue the following command in a Linux shell that contains your user name and password separated by a colon. The resulting value is used in a later step. echo -n \u201cusername:password\u201d | base64 -d If the Bind DN is CN=bind,O=Example and the password is password, then the command is: echo -n \u201cCN=bind,O=Example:password\u201d | base64 -d Use a text editor to open your local copy of UserInfoConfig.xml in edit mode. Duplicate the line that begins with StorageDetails . The order in which you list your StorageDetails statement is the search order to be used. HostName : The fully qualified host name or IP address of the second LDAP server. Port : If using unsecured LDAP, specify the port number used by LDAP. If you are using secure LDAP, you don't need to modify this field. UserName : Set this field to empty double-quotes ( \u201c\u201d ). Password : Set this field to empty double-quotes (\u201c\u201d). If using an authenticated bind, add a new parameter after UserName and Password called UserEncodedAuth= and set it to the value that was determined in a previous step. BaseDN : Define a base DN for searching the directory. If left blank, the entire directory is searched. SearchFilter : SearchFilter Modify the search filter if needed. The defaults work well with Domino LDAP. You can make other changes to the business cards configuration if needed at this time. When finished, save and close the file. When finished, save and close the UserInfoConfig.xml file. Edit the StCommunityConfig.xml file with a text editor and make the following changes. Within the <LDAP> section, duplicate the line that begins with <Connection Hostname. Modify the new line to contain the details of the second LDAP server. Modify the SearchOrder parameter for the additional LDAP server to a unique number. This must match the search order you selected for UserInfoConfig.xml. Save and close the StCommunityConfig.xml file. Edit the docker-compose.yaml by adding the following under the community section: volumes: - ./StCommunityConfig.xml:/local/notesdata/StCommunityConfig.xml - ./UserInfoConfig.xml:/local/notesdata/UserInfoConfig.xml Restart the server to apply the changes by running the following commands. docker-compose down docker-compose up -d Parent topic: Configuring LDAP","title":"Configuring additional LDAP servers on Docker"},{"location":"admin/configuring_ldap_multiple_kubernetes.html","text":"Configuring additional LDAP servers on Kubernetes You can configure the Sametime Community pod to connect to two or more LDAP servers. When you connect to more than one LDAP server, it is important for the names to be unique. If you are trying to achieve high availability to the same directory, use a load balancer to front-end the connection between the multiple LDAP servers. Configure the cluster for the first LDAP server. This must be done when the cluster was installed. You must know the host name, port and optional bind credentials for each LDAP server. If you are using a secure connection to LDAP, the LDAP server\u2019s certificate for each server must be stored in the same .p12 trust store file. You must create a secret containing the trust store that holds each LDAP server\u2019s certificate. Follow the step for creating a secret that contains your certificate in the Securing LDAP on Kubernetes topic. When more than one LDAP is defined in an environment, they are searched in the order defined in the StCommunityConfig.xml file. When you define each LDAP server, the order in which they are listed in the configuration is the same order in which they are searched. The process described in this procedures involves creating a new secret called extra-community-configs. This secret overrides the LDAP configuration settings in the values.yaml file. The extra-community-configs secret contains a copy of the configuration files used by the Community pod. The LDAP servers are defined within each configuration file. For more information on secrets, see Managing secrets in Kubernetes . kubectl commands are used to pull the existing file from the Community pod to your local machine. Modify these files locally with the required settings, then create the secret containing the files. This procedure is to configure Sametime to connect to two or more separate LDAP servers that have unique names. Note: If you have already created a secret for extra-community-config, you can copy the UserInfoConfig.xml file from the pod to the extra-community-config directory and recreate the secret with the other required files. The changes in this task affect the following pods: community Create a directory on your machine called extra-community-config at the root of where the Sametime installation package was decompressed. Change to the extra-community-config directory. Find the Community pod name by running the get pods command. The pod name has hashes in it. For example: community-77d4695988-2bzrx. kubectl get pods Pull a copy of the StCommunityConfig.xml from the Community pod by running the below command, where podname is the pod name found in the previous step. kubectl exec -it podname --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml For example, if the Community pod name is community-845d5d5755-z7zf7, the command to run is kubectl exec -it community-845d5d5755-z7zf7 --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml Pull a copy of the UserInfoConfig.xml file from the Community pod, by running the below command. Substitute the name of your Community pod for podname. kubectl exec -it podname --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml Find the base64 encoded value of your bind credentials. If you are using an authenticated bind, issue the following command in a Linux shell that contains your user name and password separated by a colon. The resulting value is used in a later step. echo -n \u201cusername:password\u201d | base64 -d If the Bind DN is CN=bind,O=Example and the password is password, then the command is: echo -n \u201cCN=bind,O=Example:password\u201d | base64 -d Use a text editor to open your local copy of UserInfoConfig.xml in edit mode. Duplicate the line that begins with StorageDetails . The order in which you list your StorageDetails statement is the search order to be used. Configure your second LDAP server by completing the fields: HostName : The fully qualified host name or IP address of the second LDAP server. Port : If using unsecured LDAP, specify the port number used by LDAP. If you are using secure LDAP, you don't need to modify this field. UserName : Set this field to empty double-quotes ( \u201c\u201d ). Password : Set this field to empty double-quotes (\u201c\u201d). If using an authenticated bind, add a new parameter after UserName and Password called UserEncodedAuth= and set it to the value that was determined in a previous step. BaseDN : Define a base DN for searching the directory. If left blank, the entire directory is searched. SearchFilter : Modify the search filter if needed. The defaults work well with Domino LDAP. You can make other changes to the business cards configuration if needed at this time. When finished, save and close the file. Edit the StCommunityConfig.xml file with a text editor and make the following changes. Within the <LDAP> section, duplicate the line that begins with <Connection Hostname . Modify the new line to contain the details of the second LDAP server. Modify the SearchOrder parameter for the additional LDAP server to a unique number. This must match the search order you selected for UserInfoConfig.xml. Save and close the file. Change to the extra-community-config directory that was created earlier. Run the following command to create the secret. kubectl\u202fcreate secret generic extra-community-config --from-file=./ If you have a namespace dedicated to Sametime add the -n argument with your namespace to ensure it is created in the correct namespace. Change to the helm directory where the Sametime installation package was decompressed. Open the values.yaml file and place in edit mode. Add the following line. overrideCommunityConfigSecret: extra-community-config Save and close the file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Configuring LDAP","title":"Configuring additional LDAP servers on Kubernetes {#configuring_ldap_multiple_kubernetes .task}"},{"location":"admin/configuring_ldap_multiple_kubernetes.html#configuring_ldap_multiple_kubernetes","text":"You can configure the Sametime Community pod to connect to two or more LDAP servers. When you connect to more than one LDAP server, it is important for the names to be unique. If you are trying to achieve high availability to the same directory, use a load balancer to front-end the connection between the multiple LDAP servers. Configure the cluster for the first LDAP server. This must be done when the cluster was installed. You must know the host name, port and optional bind credentials for each LDAP server. If you are using a secure connection to LDAP, the LDAP server\u2019s certificate for each server must be stored in the same .p12 trust store file. You must create a secret containing the trust store that holds each LDAP server\u2019s certificate. Follow the step for creating a secret that contains your certificate in the Securing LDAP on Kubernetes topic. When more than one LDAP is defined in an environment, they are searched in the order defined in the StCommunityConfig.xml file. When you define each LDAP server, the order in which they are listed in the configuration is the same order in which they are searched. The process described in this procedures involves creating a new secret called extra-community-configs. This secret overrides the LDAP configuration settings in the values.yaml file. The extra-community-configs secret contains a copy of the configuration files used by the Community pod. The LDAP servers are defined within each configuration file. For more information on secrets, see Managing secrets in Kubernetes . kubectl commands are used to pull the existing file from the Community pod to your local machine. Modify these files locally with the required settings, then create the secret containing the files. This procedure is to configure Sametime to connect to two or more separate LDAP servers that have unique names. Note: If you have already created a secret for extra-community-config, you can copy the UserInfoConfig.xml file from the pod to the extra-community-config directory and recreate the secret with the other required files. The changes in this task affect the following pods: community Create a directory on your machine called extra-community-config at the root of where the Sametime installation package was decompressed. Change to the extra-community-config directory. Find the Community pod name by running the get pods command. The pod name has hashes in it. For example: community-77d4695988-2bzrx. kubectl get pods Pull a copy of the StCommunityConfig.xml from the Community pod by running the below command, where podname is the pod name found in the previous step. kubectl exec -it podname --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml For example, if the Community pod name is community-845d5d5755-z7zf7, the command to run is kubectl exec -it community-845d5d5755-z7zf7 --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml Pull a copy of the UserInfoConfig.xml file from the Community pod, by running the below command. Substitute the name of your Community pod for podname. kubectl exec -it podname --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml Find the base64 encoded value of your bind credentials. If you are using an authenticated bind, issue the following command in a Linux shell that contains your user name and password separated by a colon. The resulting value is used in a later step. echo -n \u201cusername:password\u201d | base64 -d If the Bind DN is CN=bind,O=Example and the password is password, then the command is: echo -n \u201cCN=bind,O=Example:password\u201d | base64 -d Use a text editor to open your local copy of UserInfoConfig.xml in edit mode. Duplicate the line that begins with StorageDetails . The order in which you list your StorageDetails statement is the search order to be used. Configure your second LDAP server by completing the fields: HostName : The fully qualified host name or IP address of the second LDAP server. Port : If using unsecured LDAP, specify the port number used by LDAP. If you are using secure LDAP, you don't need to modify this field. UserName : Set this field to empty double-quotes ( \u201c\u201d ). Password : Set this field to empty double-quotes (\u201c\u201d). If using an authenticated bind, add a new parameter after UserName and Password called UserEncodedAuth= and set it to the value that was determined in a previous step. BaseDN : Define a base DN for searching the directory. If left blank, the entire directory is searched. SearchFilter : Modify the search filter if needed. The defaults work well with Domino LDAP. You can make other changes to the business cards configuration if needed at this time. When finished, save and close the file. Edit the StCommunityConfig.xml file with a text editor and make the following changes. Within the <LDAP> section, duplicate the line that begins with <Connection Hostname . Modify the new line to contain the details of the second LDAP server. Modify the SearchOrder parameter for the additional LDAP server to a unique number. This must match the search order you selected for UserInfoConfig.xml. Save and close the file. Change to the extra-community-config directory that was created earlier. Run the following command to create the secret. kubectl\u202fcreate secret generic extra-community-config --from-file=./ If you have a namespace dedicated to Sametime add the -n argument with your namespace to ensure it is created in the correct namespace. Change to the helm directory where the Sametime installation package was decompressed. Open the values.yaml file and place in edit mode. Add the following line. overrideCommunityConfigSecret: extra-community-config Save and close the file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Configuring LDAP","title":"Configuring additional LDAP servers on Kubernetes"},{"location":"admin/configuring_ldap_password.html","text":"Changing the LDAP service account password in Kubernetes If you are using an authenticated bind for LDAP, with a password that expires periodically, you'll need to update the LDAP bind credentials for Sametime clusters in Kubernetes with a new password. The LDAP bind credentials are Base64 encoded and defined in the configuration as secrets. When updating the password, you'll need to complete the following tasks: Find the Base64 encoded values of your credentials. Update the bind credentials in the Kubernetes secrets. The LDAP bind credentials are located in Kubernetes secrets: sametime-global-secrets extra-community-config (optional) There is an optional configuration to override the default settings for LDAP and for business cards in a secret called extra-community-config. If you have implemented this secret, the LDAP Bind credentials must be updated in the XML configuration files and the extra-community-config secret should be deleted and recreated The changes in this task affect the following pods: Community Find the Base64 encoded values of your credentials. If your LDAP DN is changing, you need to Base64 encode the complete DN. For example, if your LDAP DN is CN=SametimeBind,O=Example take your DN and run the below command: echo -n \u201cCN=SametimeBind,O=Example\u201d | base64 For this example, the resulting value is shown below and must be configured for the LdapBindEntryDn parameter in the sametime-secrets.yaml file. LdapBindEntryDn: 4oCcQ049U2FtZXRpbWVCaW5kLE89RXhhbXBsZeKAnQ== If your LDAP bind password is changing, you need to base64 encode the password. For example, if your password is thepassword, then run the below command to base64 encode it: echo -n \u201cthepassword\u201d | base64 The resulting value is used in your configuration for the password. Now find the base64 encoded value of the two settings combined, separated by a colon. For example if your Bind DN is CN=SametimeBind,O=Example and the password is thepassword then find the base64 encoded value of CN=SametimeBind,O=Example:thepassword : echo -n \u201cCN=SametimeBind,O=Example:thepassword\u201d | base64 Update the secret for sametime-global-secrets . Edit the sametime-global-secrets file. Run the following command. kubectl edit secret sametime-global-secrets Locate LdapBindEntryDn and LdapBindEntryPassword in the helm/templates/sametime-secrets.yaml file. Set their values to the base64 encoded value of your name and password respectively. LdapBindEntryDn: base64\\_encoded\\_DN LdapBindEntryPassword: base64\\_encoded\\_password Save and close the file. Press Esc, w, q, ! on the keyboard to save your changes. Update the extra-community-config secret. Determine if there is already a extra-community-config secret by issuing the following command. kubectl get secrets If you are using a namespace for Sametime, you must include the -n namespace argument on the command to view the secrets scoped to the Sametime namespace. If there is a secret, delete it. Otherwise skip to the next step. Run the following command to delete the secret. kubectl delete secret extra-community-configs Create a new directory named extra-community-configs on the machine that is used to run kubectl commands. Change directories to the extra-community-configs you just created. Locate the pod name of the Community pod to be used in the next step by running following the command. kubectl get pods The name has hashes in it, for example: community-845d5d5755-z7zf7 . Pull a copy of the StCommunityConfigs.xml from the Community pod by running the below command, where podname is the Community pod name found in the previous step. kubectl exec -it podname --container community -- cat /local/notesdata/StCommunityConfig >./StCommunityConfig.xml For example, if the Community pod name is community-845d5d5755-z7zf7, the command to run is kubectl exec -it community-845d5d5755-z7zf7 --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml Pull a copy of the UserInfoConfig.xml file from the Community pod, by running the below command. Substitute the name of your Community pod for podname. podname: kubectl exec -it <podname> --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml For example, if the Community pod name is community-845d5d5755-z7zf7, the command to run is kubectl exec -it community-845d5d5755-z7zf7 --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml After adding the two files to your machine, the new LDAP DN and password must be defined. Open the local copy of the StCommunityConfig.xml file using a file editor. Locate the parameters to be changed and set them to their actual unencoded values. Do not specify the base64 encode values. Set BindEntryDn = to the Bind DN Set BindEntryPwd= set to the new Bind password Save and close the file. Open the UserInfoConfig.xml file. Next change the UserEncodedAuth value. Locate UserEncodedAuth in the file. Change the current value to the base64 encoded values of the DN and password. Combine the two values with a colon (:) between them. For example: echo -n DN:password echo -n 'DN:password' | base64 Save and close the file. Create the extra-community-configs secret by issuing the following command. kubectl create secret generic extra-community-config --from-file=./ Update the configuration files. If you did not have an extra-community-configs secret before you must update the values.yaml file for Sametime to use the secret. Change to the helm directory, where the Sametime installation image was unzipped. Open the values.yaml file with a text editor. Add the following parameter to the global section. overrideCommunityConfigSecret: \"extra-community-config\" Save and close the file. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Configuring LDAP","title":"Changing the LDAP service account password in Kubernetes {#configuring_ldap_password .task}"},{"location":"admin/configuring_ldap_password.html#configuring_ldap_password","text":"If you are using an authenticated bind for LDAP, with a password that expires periodically, you'll need to update the LDAP bind credentials for Sametime clusters in Kubernetes with a new password. The LDAP bind credentials are Base64 encoded and defined in the configuration as secrets. When updating the password, you'll need to complete the following tasks: Find the Base64 encoded values of your credentials. Update the bind credentials in the Kubernetes secrets. The LDAP bind credentials are located in Kubernetes secrets: sametime-global-secrets extra-community-config (optional) There is an optional configuration to override the default settings for LDAP and for business cards in a secret called extra-community-config. If you have implemented this secret, the LDAP Bind credentials must be updated in the XML configuration files and the extra-community-config secret should be deleted and recreated The changes in this task affect the following pods: Community Find the Base64 encoded values of your credentials. If your LDAP DN is changing, you need to Base64 encode the complete DN. For example, if your LDAP DN is CN=SametimeBind,O=Example take your DN and run the below command: echo -n \u201cCN=SametimeBind,O=Example\u201d | base64 For this example, the resulting value is shown below and must be configured for the LdapBindEntryDn parameter in the sametime-secrets.yaml file. LdapBindEntryDn: 4oCcQ049U2FtZXRpbWVCaW5kLE89RXhhbXBsZeKAnQ== If your LDAP bind password is changing, you need to base64 encode the password. For example, if your password is thepassword, then run the below command to base64 encode it: echo -n \u201cthepassword\u201d | base64 The resulting value is used in your configuration for the password. Now find the base64 encoded value of the two settings combined, separated by a colon. For example if your Bind DN is CN=SametimeBind,O=Example and the password is thepassword then find the base64 encoded value of CN=SametimeBind,O=Example:thepassword : echo -n \u201cCN=SametimeBind,O=Example:thepassword\u201d | base64 Update the secret for sametime-global-secrets . Edit the sametime-global-secrets file. Run the following command. kubectl edit secret sametime-global-secrets Locate LdapBindEntryDn and LdapBindEntryPassword in the helm/templates/sametime-secrets.yaml file. Set their values to the base64 encoded value of your name and password respectively. LdapBindEntryDn: base64\\_encoded\\_DN LdapBindEntryPassword: base64\\_encoded\\_password Save and close the file. Press Esc, w, q, ! on the keyboard to save your changes. Update the extra-community-config secret. Determine if there is already a extra-community-config secret by issuing the following command. kubectl get secrets If you are using a namespace for Sametime, you must include the -n namespace argument on the command to view the secrets scoped to the Sametime namespace. If there is a secret, delete it. Otherwise skip to the next step. Run the following command to delete the secret. kubectl delete secret extra-community-configs Create a new directory named extra-community-configs on the machine that is used to run kubectl commands. Change directories to the extra-community-configs you just created. Locate the pod name of the Community pod to be used in the next step by running following the command. kubectl get pods The name has hashes in it, for example: community-845d5d5755-z7zf7 . Pull a copy of the StCommunityConfigs.xml from the Community pod by running the below command, where podname is the Community pod name found in the previous step. kubectl exec -it podname --container community -- cat /local/notesdata/StCommunityConfig >./StCommunityConfig.xml For example, if the Community pod name is community-845d5d5755-z7zf7, the command to run is kubectl exec -it community-845d5d5755-z7zf7 --container community -- cat /local/notesdata/StCommunityConfig.xml >./StCommunityConfig.xml Pull a copy of the UserInfoConfig.xml file from the Community pod, by running the below command. Substitute the name of your Community pod for podname. podname: kubectl exec -it <podname> --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml For example, if the Community pod name is community-845d5d5755-z7zf7, the command to run is kubectl exec -it community-845d5d5755-z7zf7 --container community -- cat /local/notesdata/UserInfoConfig.xml >./UserInfoConfig.xml After adding the two files to your machine, the new LDAP DN and password must be defined. Open the local copy of the StCommunityConfig.xml file using a file editor. Locate the parameters to be changed and set them to their actual unencoded values. Do not specify the base64 encode values. Set BindEntryDn = to the Bind DN Set BindEntryPwd= set to the new Bind password Save and close the file. Open the UserInfoConfig.xml file. Next change the UserEncodedAuth value. Locate UserEncodedAuth in the file. Change the current value to the base64 encoded values of the DN and password. Combine the two values with a colon (:) between them. For example: echo -n DN:password echo -n 'DN:password' | base64 Save and close the file. Create the extra-community-configs secret by issuing the following command. kubectl create secret generic extra-community-config --from-file=./ Update the configuration files. If you did not have an extra-community-configs secret before you must update the values.yaml file for Sametime to use the secret. Change to the helm directory, where the Sametime installation image was unzipped. Open the values.yaml file with a text editor. Add the following parameter to the global section. overrideCommunityConfigSecret: \"extra-community-config\" Save and close the file. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Configuring LDAP","title":"Changing the LDAP service account password in Kubernetes"},{"location":"admin/configuring_multi_tenacy.html","text":"Enabling multi-tenancy Multi-tenancy allows multiple organizations to be part of the Sametime community. With multi-tenancy, Sametime users can chat, add users and groups to contact lists, and have awareness of users in their organization or in other organizations that are configured to be visible to them. The multi-tenancy feature uses customized Java\u2122 code to dynamically generate a filter and base distinguished names for LDAP searches on the Sametime Community Server. The CustomizedMultitenancy.class and ConfigLoader.class Java files containing the required code are automatically installed during the Sametime Community Server installation. The CustomizedMultitenancy.ini file is also installed and contains the configuration settings and the configuration instructions for the multi-tenancy feature. These files are located in the java directory where Domino is installed. For example, on Windows \ufeffC:\\Program Files\\HCL\\Domino\\java. The multi-tenancy feature is disabled by default. Prerequisite LDAP Requirements Users from all organizations should reside under one tree, with multiple branches. For example: If the base DN is CN=ORGANIZATIONS,OU=COLLAB,DC=HCL,DC=COM An individual organization would be found at this baseDN(s): O=Organization A,CN=ORGANIZATIONS,OU=COLLAB,DC=HCL,DC=COM O=Organization B,CN=ORGANIZATIONS,OU=COLLAB,DC=HCL,DC=COM Additionally, each user\u2019s entry in LDAP must contain an attribute that also contains the name of the organization that the user belongs to. For example, you can create an attribute called \u201corganizationName\u201d and the value set to the name of the organization. organizationName=Organization A. Before making edits to the configuration, review your LDAP base DNs to determine which values should be used inside the CustomizedMultitenancy.ini . Complete the worksheet below to assist in completing the configuration: Setting Name Description Example Your Value Base DN This is the top of your LDAP tree, where to start searching the directory CN=ORGANIZATIONS,OU=COLLAB, DC=HCL,DC=COM Organization BaseDN This is the location of the individual organizations. O=Organization A,CN=ORGANIZATIONS, OU=COLLAB,DC=HCL,DC=COM \ufeffORG_PART_OF_DN The attribute in the LDAP DN that contains the organization name. O \ufeffPEOPLE_ROOT_BASE_DN This is the DN of the entry where to start searching for people. It should contain the lowest LDAP entry under which the entries of all the people in the organization are available. O=%S,CN=ORGANIZATIONS, OU=COLLAB,DC=HCL,DC=COM \ufeffGROUPS_ROOT_BASE_DN This is the DN of the entry where to start searching for groups. It should contain the lowest LDAP entry under which the entries of all the people in the organization are available. O=%S,CN=ORGANIZATIONS, OU=COLLAB,DC=HCL,DC=COM \ufeffPEOPLE_BASE_DN_TEMPLATE \ufeffThe DN of the entry at which to start the people or the groups LDAP search when the search is done in a sub tree of a particular organization. %S should always be present in the value. It will be dynamically replaced by the organization name during the resolve operation. O=%S \ufeffGROUPS_BASE_DN_TEMPLATE The DN of the entry at which to start the people or the groups LDAP search when the search is done in a sub tree of a particular organization. %S should always be present in the value. It will be dynamically replaced by the organization name during the resolve operation. O=%S \ufeffLDAP_ORG_ATTR \ufeffThe attribute in the LDAP directory that is present in every person and group entry and contains the organization name that this person or group belongs to. ORGANIZATIONNAME Note: Every value in the customizedMultitenancy.ini must be in upper case. Using the values that have been identified, populate the settings in the customizedMultitenancy.ini file, following the examples inside the file. The customizedMultitenancy.ini is in the java folder inside the Domino program directory. Save and close the customizedMultitenancy.ini file when complete. Open the sametime.ini file using a text editor. Locate the existing [Config] section of the file. For Windows installs, add the following line, ensuring the correct path to the java directory: ST_JAVA_CUSTOM_PATH=C:\\Program Files\\HCL\\Domino\\java For Linux installs, add the following line, ensuring the correct path to the java directory: ST_JAVA_CUSTOM_PATH=/local/notesdata/java Review the ST_JAVA_CLASS_PATH line and confirm that the path you entered in the above step is listed first on this line. Save and Close the sametime.ini file. Launch the HCL Notes or Administrator client. Click Open > Applications > Open an Application In the server name field, enter the Sametime Community server name. In the filename field enter \u201cstconfig.nsf\u201d . Double-click the LDAPServer document. Inside the LDAPServer document, double-click to place in edit mode. Change the following fields to the values shown below: Search filter for resolving person names:CustomizedMultitenancy.peopleResolveFilter() Search filter for resolving group names: CustomizedMultitenancy.groupsResolveFilter() Base object when searching for person entries: CustomizedMultitenancy.peopleBaseDn() Base object when searching for group entries: CustomizedMultitenancy.groupsBaseDn() Click File > Save to save the document. Restart the Community Server for these settings to take effect. On the Sametime Proxy server, add the following section to the stproxyconfig.xml file with the appropriate values for your configuration. <multiTenancy> <key>O</key> <attr>ORGANIZATIONNAME</attr> </multiTenancy> </configuration> On the Sametime Meeting server , add the JWT_ORGID_KEY attribute to the custom.env file with the appropriate values for your configuration. The value for JWT_ORGID_KEY must be the same key value used in the proxy configuration for the multiTency. <multiTenancy> <key>O</key> <attr>JWT_ORGID_KEY=O</attr> </multiTenancy> </configuration> Restart the Sametime Proxy server for the settings to take affect. Parent topic: Administering","title":"Enabling multi-tenancy {#configuring_multi_tenacy .task}"},{"location":"admin/configuring_multi_tenacy.html#configuring_multi_tenacy","text":"Multi-tenancy allows multiple organizations to be part of the Sametime community. With multi-tenancy, Sametime users can chat, add users and groups to contact lists, and have awareness of users in their organization or in other organizations that are configured to be visible to them. The multi-tenancy feature uses customized Java\u2122 code to dynamically generate a filter and base distinguished names for LDAP searches on the Sametime Community Server. The CustomizedMultitenancy.class and ConfigLoader.class Java files containing the required code are automatically installed during the Sametime Community Server installation. The CustomizedMultitenancy.ini file is also installed and contains the configuration settings and the configuration instructions for the multi-tenancy feature. These files are located in the java directory where Domino is installed. For example, on Windows \ufeffC:\\Program Files\\HCL\\Domino\\java. The multi-tenancy feature is disabled by default. Prerequisite LDAP Requirements Users from all organizations should reside under one tree, with multiple branches. For example: If the base DN is CN=ORGANIZATIONS,OU=COLLAB,DC=HCL,DC=COM An individual organization would be found at this baseDN(s): O=Organization A,CN=ORGANIZATIONS,OU=COLLAB,DC=HCL,DC=COM O=Organization B,CN=ORGANIZATIONS,OU=COLLAB,DC=HCL,DC=COM Additionally, each user\u2019s entry in LDAP must contain an attribute that also contains the name of the organization that the user belongs to. For example, you can create an attribute called \u201corganizationName\u201d and the value set to the name of the organization. organizationName=Organization A. Before making edits to the configuration, review your LDAP base DNs to determine which values should be used inside the CustomizedMultitenancy.ini . Complete the worksheet below to assist in completing the configuration: Setting Name Description Example Your Value Base DN This is the top of your LDAP tree, where to start searching the directory CN=ORGANIZATIONS,OU=COLLAB, DC=HCL,DC=COM Organization BaseDN This is the location of the individual organizations. O=Organization A,CN=ORGANIZATIONS, OU=COLLAB,DC=HCL,DC=COM \ufeffORG_PART_OF_DN The attribute in the LDAP DN that contains the organization name. O \ufeffPEOPLE_ROOT_BASE_DN This is the DN of the entry where to start searching for people. It should contain the lowest LDAP entry under which the entries of all the people in the organization are available. O=%S,CN=ORGANIZATIONS, OU=COLLAB,DC=HCL,DC=COM \ufeffGROUPS_ROOT_BASE_DN This is the DN of the entry where to start searching for groups. It should contain the lowest LDAP entry under which the entries of all the people in the organization are available. O=%S,CN=ORGANIZATIONS, OU=COLLAB,DC=HCL,DC=COM \ufeffPEOPLE_BASE_DN_TEMPLATE \ufeffThe DN of the entry at which to start the people or the groups LDAP search when the search is done in a sub tree of a particular organization. %S should always be present in the value. It will be dynamically replaced by the organization name during the resolve operation. O=%S \ufeffGROUPS_BASE_DN_TEMPLATE The DN of the entry at which to start the people or the groups LDAP search when the search is done in a sub tree of a particular organization. %S should always be present in the value. It will be dynamically replaced by the organization name during the resolve operation. O=%S \ufeffLDAP_ORG_ATTR \ufeffThe attribute in the LDAP directory that is present in every person and group entry and contains the organization name that this person or group belongs to. ORGANIZATIONNAME Note: Every value in the customizedMultitenancy.ini must be in upper case. Using the values that have been identified, populate the settings in the customizedMultitenancy.ini file, following the examples inside the file. The customizedMultitenancy.ini is in the java folder inside the Domino program directory. Save and close the customizedMultitenancy.ini file when complete. Open the sametime.ini file using a text editor. Locate the existing [Config] section of the file. For Windows installs, add the following line, ensuring the correct path to the java directory: ST_JAVA_CUSTOM_PATH=C:\\Program Files\\HCL\\Domino\\java For Linux installs, add the following line, ensuring the correct path to the java directory: ST_JAVA_CUSTOM_PATH=/local/notesdata/java Review the ST_JAVA_CLASS_PATH line and confirm that the path you entered in the above step is listed first on this line. Save and Close the sametime.ini file. Launch the HCL Notes or Administrator client. Click Open > Applications > Open an Application In the server name field, enter the Sametime Community server name. In the filename field enter \u201cstconfig.nsf\u201d . Double-click the LDAPServer document. Inside the LDAPServer document, double-click to place in edit mode. Change the following fields to the values shown below: Search filter for resolving person names:CustomizedMultitenancy.peopleResolveFilter() Search filter for resolving group names: CustomizedMultitenancy.groupsResolveFilter() Base object when searching for person entries: CustomizedMultitenancy.peopleBaseDn() Base object when searching for group entries: CustomizedMultitenancy.groupsBaseDn() Click File > Save to save the document. Restart the Community Server for these settings to take effect. On the Sametime Proxy server, add the following section to the stproxyconfig.xml file with the appropriate values for your configuration. <multiTenancy> <key>O</key> <attr>ORGANIZATIONNAME</attr> </multiTenancy> </configuration> On the Sametime Meeting server , add the JWT_ORGID_KEY attribute to the custom.env file with the appropriate values for your configuration. The value for JWT_ORGID_KEY must be the same key value used in the proxy configuration for the multiTency. <multiTenancy> <key>O</key> <attr>JWT_ORGID_KEY=O</attr> </multiTenancy> </configuration> Restart the Sametime Proxy server for the settings to take affect. Parent topic: Administering","title":"Enabling multi-tenancy"},{"location":"admin/configuring_policies.html","text":"Configuring policies In previous versions of Sametime there was a graphical user interface available to configure policies. In Sametime 12.0 configuring policies are done in the policies.user.xml file, which is located on the Sametime server. You can use the policies.user.xml file to restrict or grant access to users depending upon their level of need. For example, the maximum size for a file being transferred helps manage traffic over the servers. However, you might have a group of users who have a business need to transfer larger files. You can set a new policy specific to those users that has a higher maximum. You need operating system access to the Sametime server for this task. The file is organized into templates: Instant Messaging default (im.default.policy) Instant Messaging Anonymous (im.anonymous.policy) If you open the file using a text or XML editor, you will also notice a template that has been commented with <!- notation. This section is to be used as template to create new policies. When making changes to policies ensure you are in the correct policy template. Note: Do not use the following special characters in the policy's name or in any one of the values of policy attributes: Ampersand ( & ) Apostrophe ( ' ) Quotation mark ( \" ) Greater than character ( > ) Less than character ( < ) backslash character ( \\ ) Forward slash ( / ) spaces (``) Note: You will be making changes to an .XML file. To check the syntax after making changes to the server, you can preview the file using a browser. If there is a problem in the XML formatting it will be easier to identify. If the XML has incorrect syntax, it will result in policy service failure. Policies are divided into attribute groups: Attribute group name What is inside imserver.policygroup.chat Persistent Chat enableOffline Messages im.thirdPartyMeetingEnabled = Set to true to enable Sametime 11.6 meetings im.metingsEnabled = Set to true to enable Sametime 11.6 meetings im.2019.label = User must set this community as the default server community (IC) im.2011.label = Allow user to add multiple server communities (IC) im.2001.label = Allow user to add external users using Sametime gateway communities im.2002.label = Allow user to save chat transcripts (IC) im.2004.label = Automatically save chat transcripts (IC) im.2006.label = Maximum days to save automatically saved chat transcripts (IC) im.2014.label = Limit contact list size im.2015.label = Contacts im.2010.label = Allow mobile client im.2012.label = Sametime update site URL (IC) im.3000.label = Allow all Sametime Connect features to be used with integrated clients (IC) | |imserver.policygroup.image|im.2008.label = Allow custom emoticons (IC) im.2009.label = Allow screen capture and images (IC) im.2020.label = Set maximum image size for custom emoticons, screen captures, and inline images (IC) im.2021.label = KB | |imserver.policygroup.filetransfer|im.1.label = Allow user to transfer files through server (IC) im.2.label = Maximum individual file transfer size, in Kilobytes, for files sent through the server (IC) im.3.label = Use exclude file types transfer list, for files sent through the server (IC) im.4.label = Types to exclude from transfer. Type the three-letter extension of each file type, separated by a comma or semicolon (IC) im.2005.label = Allow client-to-client file transfer (IC) im.allowTransferringMutipleFilesAndFolders = allows users to transfer multiple files and folders in a chat im.allowTransferringFiletoNWayParticipants = allows users to transfer files to all participants in a n-way chat im.maxNumberUsersToReceiveSingleFileInOneFileTransferSession = set a maximum numbers of users in the n-way chat to receive files during a file transfer. | |imserver.policygroup.plugin|im.2013.label = Allow user to install plug-ins (IC) im.2022.label = Sametime optional plug-in site URLs. Type the URLs separated by a comma or semicolon (IC) | |imserver.policygroup.mobile|im.mobile.allowLocationReporting.label = Allow location reporting im.mobile.disableUntrustedSsl.label = Disable untrusted SSL im.mobile.disablePasswordSave.label = Disable password save im.mobile.AllowSendFiles - Allows the mobile to send files if file transfer policy is also enabled im.mobile.AllowReceiveFiles - Allows the mobile to receive files if file transfer policy is also enabled (means files received over chat will be stored in Files app for iOS and on the synonymous thing for Android. If you don't want files outside the app, turn this off and all we have to do is not advertise the capability and no one can send to you.) im.mobile.restrictClipboard - Clipboard will be cleared when you go to the background. im.mobile.allowShareChatImages - Means that images sent to a user in a chat can be shared outside the container. To photos, Files, other apps, etc. im.mobile.allowSendImages - Allows the mobile to send photos if im.2009 (Allow screen capture and images) policy is also enabled. im.mobile.mamPolicySignature - Enables an administrator to require that mobile devices running HCL Sametime be managed. | To enable or disable a feature, locate the feature\u2019s current-value and change to either 0 for disabled, or 1 for enabled. For example, to disable \u201cUser must set this community as the default server community\u201d, locate the feature \u2018s label (im.2019) then change the XML syntax from current-value=\u201d0\u201d <p:policy-attribute id=\"im.2019\" type=\"boolean\" current-value=\"0\" default-value=\"0\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" label=\"im.2019.label\" description=\"im.2019.desc\" visible=\"true\"/> Change to current-value=\u201d1\u201d <p:policy-attribute id=\"im.2019\" type=\"boolean\" current-value=\"1\" default-value=\"0\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" label=\"im.2019.label\" description=\"im.2019.desc\" visible=\"true\"/> Managing policies on Docker This section outlines the steps on how to manage policies in a Docker environment. Managing policies on Kubernetes As administrators, you define what end-users can do on a cluster to comply with organization requirements. This section outlines the steps on how to manage policies in a Kubernetes environment. Parent topic: Managing policies","title":"Configuring policies {#configuring_policies .task}"},{"location":"admin/configuring_policies.html#configuring_policies","text":"In previous versions of Sametime there was a graphical user interface available to configure policies. In Sametime 12.0 configuring policies are done in the policies.user.xml file, which is located on the Sametime server. You can use the policies.user.xml file to restrict or grant access to users depending upon their level of need. For example, the maximum size for a file being transferred helps manage traffic over the servers. However, you might have a group of users who have a business need to transfer larger files. You can set a new policy specific to those users that has a higher maximum. You need operating system access to the Sametime server for this task. The file is organized into templates: Instant Messaging default (im.default.policy) Instant Messaging Anonymous (im.anonymous.policy) If you open the file using a text or XML editor, you will also notice a template that has been commented with <!- notation. This section is to be used as template to create new policies. When making changes to policies ensure you are in the correct policy template. Note: Do not use the following special characters in the policy's name or in any one of the values of policy attributes: Ampersand ( & ) Apostrophe ( ' ) Quotation mark ( \" ) Greater than character ( > ) Less than character ( < ) backslash character ( \\ ) Forward slash ( / ) spaces (``) Note: You will be making changes to an .XML file. To check the syntax after making changes to the server, you can preview the file using a browser. If there is a problem in the XML formatting it will be easier to identify. If the XML has incorrect syntax, it will result in policy service failure. Policies are divided into attribute groups: Attribute group name What is inside imserver.policygroup.chat Persistent Chat enableOffline Messages im.thirdPartyMeetingEnabled = Set to true to enable Sametime 11.6 meetings im.metingsEnabled = Set to true to enable Sametime 11.6 meetings im.2019.label = User must set this community as the default server community (IC) im.2011.label = Allow user to add multiple server communities (IC) im.2001.label = Allow user to add external users using Sametime gateway communities im.2002.label = Allow user to save chat transcripts (IC) im.2004.label = Automatically save chat transcripts (IC) im.2006.label = Maximum days to save automatically saved chat transcripts (IC) im.2014.label = Limit contact list size im.2015.label = Contacts im.2010.label = Allow mobile client im.2012.label = Sametime update site URL (IC) im.3000.label = Allow all Sametime Connect features to be used with integrated clients (IC) | |imserver.policygroup.image|im.2008.label = Allow custom emoticons (IC) im.2009.label = Allow screen capture and images (IC) im.2020.label = Set maximum image size for custom emoticons, screen captures, and inline images (IC) im.2021.label = KB | |imserver.policygroup.filetransfer|im.1.label = Allow user to transfer files through server (IC) im.2.label = Maximum individual file transfer size, in Kilobytes, for files sent through the server (IC) im.3.label = Use exclude file types transfer list, for files sent through the server (IC) im.4.label = Types to exclude from transfer. Type the three-letter extension of each file type, separated by a comma or semicolon (IC) im.2005.label = Allow client-to-client file transfer (IC) im.allowTransferringMutipleFilesAndFolders = allows users to transfer multiple files and folders in a chat im.allowTransferringFiletoNWayParticipants = allows users to transfer files to all participants in a n-way chat im.maxNumberUsersToReceiveSingleFileInOneFileTransferSession = set a maximum numbers of users in the n-way chat to receive files during a file transfer. | |imserver.policygroup.plugin|im.2013.label = Allow user to install plug-ins (IC) im.2022.label = Sametime optional plug-in site URLs. Type the URLs separated by a comma or semicolon (IC) | |imserver.policygroup.mobile|im.mobile.allowLocationReporting.label = Allow location reporting im.mobile.disableUntrustedSsl.label = Disable untrusted SSL im.mobile.disablePasswordSave.label = Disable password save im.mobile.AllowSendFiles - Allows the mobile to send files if file transfer policy is also enabled im.mobile.AllowReceiveFiles - Allows the mobile to receive files if file transfer policy is also enabled (means files received over chat will be stored in Files app for iOS and on the synonymous thing for Android. If you don't want files outside the app, turn this off and all we have to do is not advertise the capability and no one can send to you.) im.mobile.restrictClipboard - Clipboard will be cleared when you go to the background. im.mobile.allowShareChatImages - Means that images sent to a user in a chat can be shared outside the container. To photos, Files, other apps, etc. im.mobile.allowSendImages - Allows the mobile to send photos if im.2009 (Allow screen capture and images) policy is also enabled. im.mobile.mamPolicySignature - Enables an administrator to require that mobile devices running HCL Sametime be managed. | To enable or disable a feature, locate the feature\u2019s current-value and change to either 0 for disabled, or 1 for enabled. For example, to disable \u201cUser must set this community as the default server community\u201d, locate the feature \u2018s label (im.2019) then change the XML syntax from current-value=\u201d0\u201d <p:policy-attribute id=\"im.2019\" type=\"boolean\" current-value=\"0\" default-value=\"0\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" label=\"im.2019.label\" description=\"im.2019.desc\" visible=\"true\"/> Change to current-value=\u201d1\u201d <p:policy-attribute id=\"im.2019\" type=\"boolean\" current-value=\"1\" default-value=\"0\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" label=\"im.2019.label\" description=\"im.2019.desc\" visible=\"true\"/> Managing policies on Docker This section outlines the steps on how to manage policies in a Docker environment. Managing policies on Kubernetes As administrators, you define what end-users can do on a cluster to comply with organization requirements. This section outlines the steps on how to manage policies in a Kubernetes environment. Parent topic: Managing policies","title":"Configuring policies"},{"location":"admin/configuring_sso_saml.html","text":"Configuration settings related to SAML authentication Use these optional configuration settings with SAML authentication. If the Sametime\u00ae server is running when you set or modify a sametime.ini file setting, the setting takes effect after you restart the Sametime server. FIPS 140-2 compliance The default Sametime configuration is not FIPS 140-2 compliant. If your Sametime deployment requires FIPS 140-2 compliance, set \"FIPS 140-2 compliance\" to true in the TLS configuration, under the \"Server application connections\" column. This affects both TLS and SAML. For more information about applying settings in a TLS configuration, see the topic Implementing the Global TLS Scope . Security level The default configuration imposes no restrictions on the use of cryptographic algorithms and certificate strength. If strong cryptography is required, change the Minimum security level setting in the TLS configuration, in the Server application connections column. This affects both TLS and SAML. For more information about applying settings in a TLS configuration, see Implementing the Global TLS Scope . Alternatively, you can set a specific value for SAML, using the following SAML settings in the [Config] section of sametime.ini file: STSAML_SECURITY_LEVEL=numeric value between 0 and 4, inclusive A value of 0 implies no restriction on the cryptographic algorithms or certificate strength. The higher the value, the stronger the security level enforcement. Any security strength higher than 0 causes SAML validation to fail in case the SAML signature validation involves weak cryptography that does not comply with the minimum security level. For a list of available security levels, see the topic Implementing the Global TLS Scope. Trusted audiences The SAML identity provider (IdP) may optionally address the assertion to a limited set of audiences. This information is included in the assertion element, according to the SAML standard, and typically contains one or more URLs that identify the trusted audiences. By default, Sametime ignores this information, and validates the assertion whether or not the Sametime Community Server is a member of the specified audiences. If the trusted audiences setting is present in a configuration, and the assertion contains a trusted audience condition, the Community Server matches the assertion audience condition against the trusted audiences setting, and validation fails if there is no match. The trusted audiences are set in the [Config] section of the sametime.ini file: STSAML_TRUSTED_AUDIENCES=trusted-audiences The value of this setting is a comma-separated list of one or more host names. Each audience in the assertion condition is matched against each trusted audience in the configuration. At least one match is needed for passing the condition. Audience matching is performed by comparing the host portion of the audience URL to the host name in the configuration. If the strings are equal (ignoring letter case) there is a match. It is possible to set a trusted-audience string with wild card domain components, using the asterisk character (\"*\") to represent a wild card domain component. For example, this setting uses the asterisk: STSAML_TRUSTED_AUDIENCES=*.example.com And the following audience condition in the SAML assertion: <saml:Audience>https://sametime.example.com/saml/<saml:Audience> Given this configuration and audience condition, matching passes, because \"sametime.example.com\" matches \"*.example.com\". In another example, \"sametime.example.com\" would not match \"*.com\" because the number of domain components is different - sametime.example.com contains 3 components, while *.com contains only 2. Response signature validation The SAML authentication token contains a SAML response element, which in turn contains a child assertion element. According to the SAML standard, either element can be signed. The default Sametime configuration does not require a valid response signature if the underlying assertion has a valid signature. You can change the Sametime Community Server to require a valid response signature, regardless of the underlying assertion signature, by setting this flag in the [Config] section of the sametime.ini file: STSAML_REQUIRE_SIGNED_RESPONSE=1 Parent topic: Setting up SSO using SAML","title":"Configuration settings related to SAML authentication {#configuring_sso_saml .task}"},{"location":"admin/configuring_sso_saml.html#configuring_sso_saml","text":"Use these optional configuration settings with SAML authentication. If the Sametime\u00ae server is running when you set or modify a sametime.ini file setting, the setting takes effect after you restart the Sametime server. FIPS 140-2 compliance The default Sametime configuration is not FIPS 140-2 compliant. If your Sametime deployment requires FIPS 140-2 compliance, set \"FIPS 140-2 compliance\" to true in the TLS configuration, under the \"Server application connections\" column. This affects both TLS and SAML. For more information about applying settings in a TLS configuration, see the topic Implementing the Global TLS Scope . Security level The default configuration imposes no restrictions on the use of cryptographic algorithms and certificate strength. If strong cryptography is required, change the Minimum security level setting in the TLS configuration, in the Server application connections column. This affects both TLS and SAML. For more information about applying settings in a TLS configuration, see Implementing the Global TLS Scope . Alternatively, you can set a specific value for SAML, using the following SAML settings in the [Config] section of sametime.ini file: STSAML_SECURITY_LEVEL=numeric value between 0 and 4, inclusive A value of 0 implies no restriction on the cryptographic algorithms or certificate strength. The higher the value, the stronger the security level enforcement. Any security strength higher than 0 causes SAML validation to fail in case the SAML signature validation involves weak cryptography that does not comply with the minimum security level. For a list of available security levels, see the topic Implementing the Global TLS Scope. Trusted audiences The SAML identity provider (IdP) may optionally address the assertion to a limited set of audiences. This information is included in the assertion element, according to the SAML standard, and typically contains one or more URLs that identify the trusted audiences. By default, Sametime ignores this information, and validates the assertion whether or not the Sametime Community Server is a member of the specified audiences. If the trusted audiences setting is present in a configuration, and the assertion contains a trusted audience condition, the Community Server matches the assertion audience condition against the trusted audiences setting, and validation fails if there is no match. The trusted audiences are set in the [Config] section of the sametime.ini file: STSAML_TRUSTED_AUDIENCES=trusted-audiences The value of this setting is a comma-separated list of one or more host names. Each audience in the assertion condition is matched against each trusted audience in the configuration. At least one match is needed for passing the condition. Audience matching is performed by comparing the host portion of the audience URL to the host name in the configuration. If the strings are equal (ignoring letter case) there is a match. It is possible to set a trusted-audience string with wild card domain components, using the asterisk character (\"*\") to represent a wild card domain component. For example, this setting uses the asterisk: STSAML_TRUSTED_AUDIENCES=*.example.com And the following audience condition in the SAML assertion: <saml:Audience>https://sametime.example.com/saml/<saml:Audience> Given this configuration and audience condition, matching passes, because \"sametime.example.com\" matches \"*.example.com\". In another example, \"sametime.example.com\" would not match \"*.com\" because the number of domain components is different - sametime.example.com contains 3 components, while *.com contains only 2. Response signature validation The SAML authentication token contains a SAML response element, which in turn contains a child assertion element. According to the SAML standard, either element can be signed. The default Sametime configuration does not require a valid response signature if the underlying assertion has a valid signature. You can change the Sametime Community Server to require a valid response signature, regardless of the underlying assertion signature, by setting this flag in the [Config] section of the sametime.ini file: STSAML_REQUIRE_SIGNED_RESPONSE=1 Parent topic: Setting up SSO using SAML","title":"Configuration settings related to SAML authentication"},{"location":"admin/configuring_stun.html","text":"Configuring alternate STUN servers Sametime Meetings uses public Google STUN servers by default. To use different STUN servers, you must complete this procedure before installing Sametime Meetings. For more information about STUN, see Session Traversal Utilities for NAT (STUN) Kubernetes To configure alternate STUN servers if you use Kubernetes, edit the following file: heml/values.yaml Change the following line to refer to your preferred servers, following the same pattern. jvbStunServers: stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 Docker To configure alternate STUN servers if you use Docker, edit the following file: .env Change the following line to refer to your preferred servers, following the same pattern. # STUN servers used to discover the server's public IP. JVB_STUN_SERVERS=stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 Parent topic: Configuring","title":"Configuring alternate STUN servers {#configuring_stun .task}"},{"location":"admin/configuring_stun.html#configuring_stun","text":"Sametime Meetings uses public Google STUN servers by default. To use different STUN servers, you must complete this procedure before installing Sametime Meetings. For more information about STUN, see Session Traversal Utilities for NAT (STUN) Kubernetes To configure alternate STUN servers if you use Kubernetes, edit the following file: heml/values.yaml Change the following line to refer to your preferred servers, following the same pattern. jvbStunServers: stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 Docker To configure alternate STUN servers if you use Docker, edit the following file: .env Change the following line to refer to your preferred servers, following the same pattern. # STUN servers used to discover the server's public IP. JVB_STUN_SERVERS=stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 Parent topic: Configuring","title":"Configuring alternate STUN servers"},{"location":"admin/connections_photos.html","text":"Using HCL Connections photos for the Sametime business card You can use the HCL Connections profiles photos for the Sametime business cards. A benefits for using this method is that updated photos in Connections are automatically updated in Sametime. Calculating the Connections Profiles Photo URL The Connections user photo can be retrieved from /profiles/photo.do API (REST: GET) which can process different key values from the parameter sent to uniquely identify the user details. <protocol>://<connections server>:<port>/profiles/photo.do?parametername=value The following parameters can be included on the API. distinguishedName email= uid= userid= key= This configuration depends on which unique user identifier (userId) has been configured in the LDAP settings. The default setting is distinguishedName. In many cases the Sametime server is configured to use the DN as the Sametime userId. For example: the DN is: CN=Foo Bar,OU=Users,O=Example,C=US In this case the distinguishedName key should be used. The protocol is either HTTP or HTTPS. For example: http://connections.example.com:9080/profiles/photo.do?distinguishedName= If the Connections server protocol is HTTP and the port is 9080, below is an example of the resulting URL after appending the user\u2019s DN and encoding the spaces: http://connections.example.com:9080/profiles/photo.do?distinguishedName=CN%3DFoo%20Bar%2COU%3DUsers%2CO%3DExample%2CC%3DUS The community service requires the absolute URL to be added to the person document or LDAP record as an attribute. Many LDAP servers including Domino LDAP and Microsoft Active Directory have an attribute that exists for this purpose called photoURL. Populate the full URL for the photo in the photoURL for each person record in the directory. For Domino LDAP directories, the photoURL is located on the person document, Miscellaneous tab. Some LDAP servers may not display the photoURL attribute to an anonymous bind, for example, Domino LDAP. Use an authenticated bind to the LDAP server when configuring LDAP services, or configure the LDAP server to render the photoURL to anonymous users. If the photoURL is a protected resource, Single Sign On (SSO) must be configured between the Sametime serve and Connections server. If the URL is available to anonymous users, SSO is not required. When configuring SSO, the Connections server and Sametime server must share a common directory. For additional information, see Configuring SSO between Connections and Sametime . If you have not already configured the UserInfoConfig.xml file, review the applicable topic for your environment and complete the configuration before setting the photoURL. Parent topic: Setting up business cards","title":"Using HCL Connections photos for the Sametime business card {#connections_photos .concept}"},{"location":"admin/connections_photos.html#connections_photos","text":"You can use the HCL Connections profiles photos for the Sametime business cards. A benefits for using this method is that updated photos in Connections are automatically updated in Sametime. Calculating the Connections Profiles Photo URL The Connections user photo can be retrieved from /profiles/photo.do API (REST: GET) which can process different key values from the parameter sent to uniquely identify the user details. <protocol>://<connections server>:<port>/profiles/photo.do?parametername=value The following parameters can be included on the API. distinguishedName email= uid= userid= key= This configuration depends on which unique user identifier (userId) has been configured in the LDAP settings. The default setting is distinguishedName. In many cases the Sametime server is configured to use the DN as the Sametime userId. For example: the DN is: CN=Foo Bar,OU=Users,O=Example,C=US In this case the distinguishedName key should be used. The protocol is either HTTP or HTTPS. For example: http://connections.example.com:9080/profiles/photo.do?distinguishedName= If the Connections server protocol is HTTP and the port is 9080, below is an example of the resulting URL after appending the user\u2019s DN and encoding the spaces: http://connections.example.com:9080/profiles/photo.do?distinguishedName=CN%3DFoo%20Bar%2COU%3DUsers%2CO%3DExample%2CC%3DUS The community service requires the absolute URL to be added to the person document or LDAP record as an attribute. Many LDAP servers including Domino LDAP and Microsoft Active Directory have an attribute that exists for this purpose called photoURL. Populate the full URL for the photo in the photoURL for each person record in the directory. For Domino LDAP directories, the photoURL is located on the person document, Miscellaneous tab. Some LDAP servers may not display the photoURL attribute to an anonymous bind, for example, Domino LDAP. Use an authenticated bind to the LDAP server when configuring LDAP services, or configure the LDAP server to render the photoURL to anonymous users. If the photoURL is a protected resource, Single Sign On (SSO) must be configured between the Sametime serve and Connections server. If the URL is available to anonymous users, SSO is not required. When configuring SSO, the Connections server and Sametime server must share a common directory. For additional information, see Configuring SSO between Connections and Sametime . If you have not already configured the UserInfoConfig.xml file, review the applicable topic for your environment and complete the configuration before setting the photoURL. Parent topic: Setting up business cards","title":"Using HCL Connections photos for the Sametime business card"},{"location":"admin/control_mongodb.html","text":"Changing MongoDB log file size This section provides information on how to control MongoDB log file size. This seems to be a limitation on MongoDB side , in that there are no parameters or settings to automatically control this. You can do a couple of things to help keep it under control - in etc/mongod.conf add logRotate: rename and anytime the mongod service is restarted, it will create a new log file (and older ones can be deleted or archived) You can also manually rotate log files in the mongo shell by giving the command db.adminCommand( { logRotate : 1 } ) There are more details here - https://docs.mongodb.com/v3.6/tutorial/rotate-log-files/%22%20rel=%22nofollow%22%20style=%22box-sizing:%20border-box;%20text-decoration-line:%20none;%20padding:%200px;%20cursor:%20pointer;%20color:%20rgb(31,%20132,%20118);%20background:%20transparent;%20https://docs.mongodb.com/v3.6/tutorial/rotate-log-files/ Parent topic: MongoDB","title":"Changing MongoDB log file size {#control_mongodb .task}"},{"location":"admin/control_mongodb.html#control_mongodb","text":"This section provides information on how to control MongoDB log file size. This seems to be a limitation on MongoDB side , in that there are no parameters or settings to automatically control this. You can do a couple of things to help keep it under control - in etc/mongod.conf add logRotate: rename and anytime the mongod service is restarted, it will create a new log file (and older ones can be deleted or archived) You can also manually rotate log files in the mongo shell by giving the command db.adminCommand( { logRotate : 1 } ) There are more details here - https://docs.mongodb.com/v3.6/tutorial/rotate-log-files/%22%20rel=%22nofollow%22%20style=%22box-sizing:%20border-box;%20text-decoration-line:%20none;%20padding:%200px;%20cursor:%20pointer;%20color:%20rgb(31,%20132,%20118);%20background:%20transparent;%20https://docs.mongodb.com/v3.6/tutorial/rotate-log-files/ Parent topic: MongoDB","title":"Changing MongoDB log file size"},{"location":"admin/control_validity_length.html","text":"Managing user sign-on You can control how long your Sametime meeting credentials are maintained to reduce the number of times you have to sign-in. A token is maintained by the meeting sever to control how often you sign-in to your Sametime Meeting. The default value is 30 days. You can modify this value or turn off the feature by including the JWT_REFRESH_DURATION_DAYS environment variable in the YAML file. You can specify any number of whole days to retain login credentials. To disable this feature, set the value to 0. Note: When you modify the docker-compose.yml file, follow the syntax rules for YAML files to prevent coding errors. When you modify the YAML file, the indentations of entries are spaces, not tab characters. Parent topic: Managing Sametime Meetings Managing user sign-on in Docker Edit the docker-compose.yml file and locate the auth section within the file. The file is in the root directory . Add the JWT_REFRESH_DURATION_DAYS environment variable. Specify the duration in this format environment_variable=number_of_days. JWT_REFRESH_DURATION_DAYS=number\\_of\\_days The following example shows the auth section with the JWT_REFRESH_DURATION_DAYS environment variable set to 10 days. Run the following commands for changes to activate the YAML file. docker-compose down delete jitsi-config folder docker-compose up -d Managing user sign-on in Kubernetes You can change settings temporarily or permanently. To temporarily change the setting, run the following command to change the setting in a deployed environment: kubectl set env deploy/auth JWT_REFRESH_DURATION_DAYS=number\\_of\\_days To permanently change the setting, complete the following steps: Edit the deployment.yaml file, which contains the auth environment variables. You can find the file in the helm/charts/auth/templates directory. Add the JWT_REFRESH_DURATION_DAYS environment variable. Specify the duration in this format environment_variable: number_of_days. name: JWT_REFRESH_DURATION_DAYS value: number\\_of\\_days The following example shows the auth section with the JWT_REFRESH_DURATION_DAYS environment variable set to 10 days. Run the following commands to activate the YAML: helm uninstall sametime-meetings helm install sametime-meetings","title":"Managing user sign-on {#control_validity_length .task}"},{"location":"admin/control_validity_length.html#control_validity_length","text":"You can control how long your Sametime meeting credentials are maintained to reduce the number of times you have to sign-in. A token is maintained by the meeting sever to control how often you sign-in to your Sametime Meeting. The default value is 30 days. You can modify this value or turn off the feature by including the JWT_REFRESH_DURATION_DAYS environment variable in the YAML file. You can specify any number of whole days to retain login credentials. To disable this feature, set the value to 0. Note: When you modify the docker-compose.yml file, follow the syntax rules for YAML files to prevent coding errors. When you modify the YAML file, the indentations of entries are spaces, not tab characters. Parent topic: Managing Sametime Meetings","title":"Managing user sign-on"},{"location":"admin/control_validity_length.html#task_vf2_mqz_xrb","text":"Edit the docker-compose.yml file and locate the auth section within the file. The file is in the root directory . Add the JWT_REFRESH_DURATION_DAYS environment variable. Specify the duration in this format environment_variable=number_of_days. JWT_REFRESH_DURATION_DAYS=number\\_of\\_days The following example shows the auth section with the JWT_REFRESH_DURATION_DAYS environment variable set to 10 days. Run the following commands for changes to activate the YAML file. docker-compose down delete jitsi-config folder docker-compose up -d","title":"Managing user sign-on in Docker"},{"location":"admin/control_validity_length.html#task_p3b_nqz_xrb","text":"You can change settings temporarily or permanently. To temporarily change the setting, run the following command to change the setting in a deployed environment: kubectl set env deploy/auth JWT_REFRESH_DURATION_DAYS=number\\_of\\_days To permanently change the setting, complete the following steps: Edit the deployment.yaml file, which contains the auth environment variables. You can find the file in the helm/charts/auth/templates directory. Add the JWT_REFRESH_DURATION_DAYS environment variable. Specify the duration in this format environment_variable: number_of_days. name: JWT_REFRESH_DURATION_DAYS value: number\\_of\\_days The following example shows the auth section with the JWT_REFRESH_DURATION_DAYS environment variable set to 10 days. Run the following commands to activate the YAML: helm uninstall sametime-meetings helm install sametime-meetings","title":"Managing user sign-on in Kubernetes"},{"location":"admin/creating_custom_java.html","text":"Creating custom Java classes for searching LDAP These topic are in progress Create custom Java\u2122 classes that provide greater control over how Sametime\u00ae conducts name searches of an LDAP directory and how results are formatted. Implementing a custom Java class file to transform LDAP searches helps with performance when the LDAP service has a complex directory schema. If your configuration is using the UUID attribute as the attribute of the person entry that defines the internal ID of a Sametime user, include UUID in your customized filter. Example: Writing a Java class to format names returned in a search To return a user name in a format that is not available in an LDAP directory entry attribute, you can write a Java\u2122 class that manipulates existing information in the LDAP directory to produce the user name in the desired format. Example: Writing a Java class to filter searches for people and groups If a single search filter is not adequate to resolve user or group name searches, you can write a Java\u2122 class containing a method that specifies exactly how directory searches are conducted. The class can invoke different LDAP search filters depending on search criteria entered by users. Configuring the class file on Docker Use a custom Java class file to transform your searches for LDAP for the community pod. Configuring the class file on Kubernetes You can use a custom Java class file to transform your searches for LDAP for the community pod. Parent topic: Configuring LDAP","title":"Creating custom Java classes for searching LDAP {#creating_custom_java .task}"},{"location":"admin/creating_custom_java.html#creating_custom_java","text":"These topic are in progress Create custom Java\u2122 classes that provide greater control over how Sametime\u00ae conducts name searches of an LDAP directory and how results are formatted. Implementing a custom Java class file to transform LDAP searches helps with performance when the LDAP service has a complex directory schema. If your configuration is using the UUID attribute as the attribute of the person entry that defines the internal ID of a Sametime user, include UUID in your customized filter. Example: Writing a Java class to format names returned in a search To return a user name in a format that is not available in an LDAP directory entry attribute, you can write a Java\u2122 class that manipulates existing information in the LDAP directory to produce the user name in the desired format. Example: Writing a Java class to filter searches for people and groups If a single search filter is not adequate to resolve user or group name searches, you can write a Java\u2122 class containing a method that specifies exactly how directory searches are conducted. The class can invoke different LDAP search filters depending on search criteria entered by users. Configuring the class file on Docker Use a custom Java class file to transform your searches for LDAP for the community pod. Configuring the class file on Kubernetes You can use a custom Java class file to transform your searches for LDAP for the community pod. Parent topic: Configuring LDAP","title":"Creating custom Java classes for searching LDAP"},{"location":"admin/creating_new_policy.html","text":"Creating a new policy other than the default policy Sametime policies are configured in the policies.user.xml file. Remote into the Sametime server. Browse to the policies.user.xml file located in the Domino program directory. Open the file using a text or XML editor. To create a new instant messaging policy, locate the sample at the top of the file. It is inside of the commented lines that begin with <!\u2014 and end with --!> . Remove the comment syntax <! \u2013 and --!> . Make modifications as desired to the sample. Save and close the file. For the policy to take immediate effect, restart the Sametime server. Otherwise, the policy refresh happens once per hour. \" Parent topic: Managing policies","title":"Creating a new policy other than the default policy {#creating_new_policy .task}"},{"location":"admin/creating_new_policy.html#creating_new_policy","text":"Sametime policies are configured in the policies.user.xml file. Remote into the Sametime server. Browse to the policies.user.xml file located in the Domino program directory. Open the file using a text or XML editor. To create a new instant messaging policy, locate the sample at the top of the file. It is inside of the commented lines that begin with <!\u2014 and end with --!> . Remove the comment syntax <! \u2013 and --!> . Make modifications as desired to the sample. Save and close the file. For the policy to take immediate effect, restart the Sametime server. Otherwise, the policy refresh happens once per hour. \" Parent topic: Managing policies","title":"Creating a new policy other than the default policy"},{"location":"admin/customize_branding.html","text":"Adding corporate branding to meeting pages You can customize meetings to reflect your company's branding and visual presence. You can include several levels of customizing for meetings to present a visual representation of your company. You can customize all or any combination of the three. Add a company name and logo. The logo image is displayed on the login, in-meeting, and logout pages. Change the Favicon and application icons. Change the background image for meeting tile view. Adding corporate branding to meeting pages using Kubernetes Adding corporate branding to meeting pages using Docker Parent topic: Configuring","title":"Adding corporate branding to meeting pages {#customize_branding .task}"},{"location":"admin/customize_branding.html#customize_branding","text":"You can customize meetings to reflect your company's branding and visual presence. You can include several levels of customizing for meetings to present a visual representation of your company. You can customize all or any combination of the three. Add a company name and logo. The logo image is displayed on the login, in-meeting, and logout pages. Change the Favicon and application icons. Change the background image for meeting tile view. Adding corporate branding to meeting pages using Kubernetes Adding corporate branding to meeting pages using Docker Parent topic: Configuring","title":"Adding corporate branding to meeting pages"},{"location":"admin/customize_docker.html","text":"Adding corporate branding to meeting pages using Docker To customize the product name, product logo, and banner edit the custom.env file in the directory where the installation package was decompressed. Add the appropriate statements to the custom.env file to reflect your changes. To change the product name, add the following statement specifying the new product name. REACT_APP_PRODUCT_NAME=new\\_product\\_name To change the logo, add the following statement specifying the location and name of the new logo. The image file can be any size. It is re-sized to approximately 260x260 pixels. REACT_APP_PRODUCT_LOGO_URL=https://meetings.hcl-showcase.com/images/branding/Showcase_Logo.jpg The logo can either be a URL to an accessible image like https://mycompany.com/assets/logo.png or it can be an absolute path like /images/branding/my-logo.png. If you use the absolute path, the image must be placed on the system using the following command. cp my-logo.png sametime-config/web/branding/. Add the following statement containing the URL to the Sametime server where you access meetings. This is used for gathering meeting reports. REACT_APP_PRODUCT_LOGO_URL=https://meetings.hcl-showcase.com/images/branding/Showcase_Logo.jpg\" To change the meeting banner, add the following statement specifying the location and name of the new banner. REACT_APP_MEETING_BANNER_IMAGE=banner\\_image To change the meeting background, add the following statement specifying the location and name of the new background. REACT_APP_MEETING_BACKGROUND_IMAGE=background\\_image The background image can be a URL to an accessible image like https://mycompany.com/assets/theme.png or it can be an absolute path like /images/branding/my-logo.png. If you use the absolute path, the image must be placed on the system using the following command. cp my-theme.png sametime-config/web/branding/. Run docker-compose up -d command to apply all changes. To update the favicon, replace the following files with your version. favicon.ico favicon-16x16.ico favicon-24x24.ico favicon-32x32.ico favicon-64x64.ico You must specify at a minimum the favicon.ico file. When it is the only file available, it is used for each of the other .ico files. To update the app icons, copy the files to the persistent volume. This replaces the following files. app-512x512.png app-192x192.png You must specify at a minimum the app-app-512x512.png file. When it is the only file available, it also used for the app-192x192.png file. Parent topic: Adding corporate branding to meeting pages","title":"Adding corporate branding to meeting pages using Docker {#customize_docker .task}"},{"location":"admin/customize_docker.html#customize_docker","text":"To customize the product name, product logo, and banner edit the custom.env file in the directory where the installation package was decompressed. Add the appropriate statements to the custom.env file to reflect your changes. To change the product name, add the following statement specifying the new product name. REACT_APP_PRODUCT_NAME=new\\_product\\_name To change the logo, add the following statement specifying the location and name of the new logo. The image file can be any size. It is re-sized to approximately 260x260 pixels. REACT_APP_PRODUCT_LOGO_URL=https://meetings.hcl-showcase.com/images/branding/Showcase_Logo.jpg The logo can either be a URL to an accessible image like https://mycompany.com/assets/logo.png or it can be an absolute path like /images/branding/my-logo.png. If you use the absolute path, the image must be placed on the system using the following command. cp my-logo.png sametime-config/web/branding/. Add the following statement containing the URL to the Sametime server where you access meetings. This is used for gathering meeting reports. REACT_APP_PRODUCT_LOGO_URL=https://meetings.hcl-showcase.com/images/branding/Showcase_Logo.jpg\" To change the meeting banner, add the following statement specifying the location and name of the new banner. REACT_APP_MEETING_BANNER_IMAGE=banner\\_image To change the meeting background, add the following statement specifying the location and name of the new background. REACT_APP_MEETING_BACKGROUND_IMAGE=background\\_image The background image can be a URL to an accessible image like https://mycompany.com/assets/theme.png or it can be an absolute path like /images/branding/my-logo.png. If you use the absolute path, the image must be placed on the system using the following command. cp my-theme.png sametime-config/web/branding/. Run docker-compose up -d command to apply all changes. To update the favicon, replace the following files with your version. favicon.ico favicon-16x16.ico favicon-24x24.ico favicon-32x32.ico favicon-64x64.ico You must specify at a minimum the favicon.ico file. When it is the only file available, it is used for each of the other .ico files. To update the app icons, copy the files to the persistent volume. This replaces the following files. app-512x512.png app-192x192.png You must specify at a minimum the app-app-512x512.png file. When it is the only file available, it also used for the app-192x192.png file. Parent topic: Adding corporate branding to meeting pages","title":"Adding corporate branding to meeting pages using Docker"},{"location":"admin/customize_kubernetes.html","text":"Adding corporate branding to meeting pages using Kubernetes To customize the product name, product logo, and banner edit the values.yaml file in the /helm directory. Add the appropriate statements to the YAML file to reflect your changes. To change the product name, add the following statement specifying the new product name. productName: new\\_product\\_name To change the logo, add the following statement specifying the location and name of the new logo. The image file can be any size. It is re-sized to approximately 260x260 pixels. productLogo: /images/branding/<your\\_logo\\_file\\> Note: /images/branding is static and you can not edit this part. It also does not represent where the referenced file resides outside the Kubernetes pods. Copy the logo to the persistent volume and start the web pod again. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <your_image_file> $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Note: Alternatively, you can use an accessible URL that you do not have to copy to the persistent volume. productLogo: \"http://mycompany.com/assets/<your_logo_file>\" To change the meeting banner, add the following statement specifying the location and name of the new banner. meetingBannerImage: /images/branding/<your\\_logo\\_file\\> Note: /images/branding is static and you can not edit this part. It also does not represent where the referenced file resides outside the Kubernetes pods. Copy the image to the persistent volume and restart the web pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <your_image_file> $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Note: Alternatively, you can use an accessible URL that you do not have to copy to the persistent volume. meetingBannerImage: http://mycompany.com/assets/<your\\_logo\\_file\\> To change the meeting background, add the following statement specifying the location and name of the new background. meetingBackgroundImage: /images/branding/<your\\_logo\\_file\\> Note: /images/branding is static and you can not edit this part. It also does not represent where the referenced file resides outside the Kubernetes pods. Copy the image to the persistent volume and restart the web pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <your_image_file> $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Note: Alternatively, you can use an accessible URL that you do not have to copy to the persistent volume. meetingBackgroundImage: http://mycompany.com/assets/<your\\_logo\\_file\\> Run a helm upgrade command to apply the changes to your registry. helm upgrade {release-name} helm/. To update the favicon, do the following. Copy the files to the persistent volume. This replaces the following files with your version. favicon.ico favicon-16x16.ico favicon-24x24.ico favicon-32x32.ico favicon-64x64.ico You must specify at a minimum the favicon.ico file. When it is the only file available, it is used for each of the other .ico files. For the best resolution, keep the favicon.ico file to 64x64. For the other files, use the size indicated as part of the file name. A PNG file type image can be used, just renamed to ICO file type. Restart the pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp favicon.ico $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. To update the app icons, do the following. Copy the files to the persistent volume. This replaces the following files. For the app icons, replace the following files with your version. app-512x512.png app-192x192.png You must specify at a minimum the app-app-512x512.png file. When it is the only file available, it also used for the app-192x192.png file. Restart the pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp app-512x512.png $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Parent topic: Adding corporate branding to meeting pages","title":"Adding corporate branding to meeting pages using Kubernetes {#customize_kubernetes .task}"},{"location":"admin/customize_kubernetes.html#customize_kubernetes","text":"To customize the product name, product logo, and banner edit the values.yaml file in the /helm directory. Add the appropriate statements to the YAML file to reflect your changes. To change the product name, add the following statement specifying the new product name. productName: new\\_product\\_name To change the logo, add the following statement specifying the location and name of the new logo. The image file can be any size. It is re-sized to approximately 260x260 pixels. productLogo: /images/branding/<your\\_logo\\_file\\> Note: /images/branding is static and you can not edit this part. It also does not represent where the referenced file resides outside the Kubernetes pods. Copy the logo to the persistent volume and start the web pod again. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <your_image_file> $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Note: Alternatively, you can use an accessible URL that you do not have to copy to the persistent volume. productLogo: \"http://mycompany.com/assets/<your_logo_file>\" To change the meeting banner, add the following statement specifying the location and name of the new banner. meetingBannerImage: /images/branding/<your\\_logo\\_file\\> Note: /images/branding is static and you can not edit this part. It also does not represent where the referenced file resides outside the Kubernetes pods. Copy the image to the persistent volume and restart the web pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <your_image_file> $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Note: Alternatively, you can use an accessible URL that you do not have to copy to the persistent volume. meetingBannerImage: http://mycompany.com/assets/<your\\_logo\\_file\\> To change the meeting background, add the following statement specifying the location and name of the new background. meetingBackgroundImage: /images/branding/<your\\_logo\\_file\\> Note: /images/branding is static and you can not edit this part. It also does not represent where the referenced file resides outside the Kubernetes pods. Copy the image to the persistent volume and restart the web pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <your_image_file> $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Note: Alternatively, you can use an accessible URL that you do not have to copy to the persistent volume. meetingBackgroundImage: http://mycompany.com/assets/<your\\_logo\\_file\\> Run a helm upgrade command to apply the changes to your registry. helm upgrade {release-name} helm/. To update the favicon, do the following. Copy the files to the persistent volume. This replaces the following files with your version. favicon.ico favicon-16x16.ico favicon-24x24.ico favicon-32x32.ico favicon-64x64.ico You must specify at a minimum the favicon.ico file. When it is the only file available, it is used for each of the other .ico files. For the best resolution, keep the favicon.ico file to 64x64. For the other files, use the size indicated as part of the file name. A PNG file type image can be used, just renamed to ICO file type. Restart the pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp favicon.ico $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. To update the app icons, do the following. Copy the files to the persistent volume. This replaces the following files. For the app icons, replace the following files with your version. app-512x512.png app-192x192.png You must specify at a minimum the app-app-512x512.png file. When it is the only file available, it also used for the app-192x192.png file. Restart the pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp app-512x512.png $POD:/usr/share/jitsi-meet/images/branding/. kubectl delete po $POD Attention: Check the access rights after copying the files by running chmod 744 inside of the server-brandingdirectory on the Sametime NFS. Parent topic: Adding corporate branding to meeting pages","title":"Adding corporate branding to meeting pages using Kubernetes"},{"location":"admin/disable_background.html","text":"Disabling virtual background By default, you can use a filter, blur your background, or use a default or custom image or video to obscure your surroundings. Depending on your organization's requirements, you can disable the virtual background feature by modifying the applicable file. Docker .env Kubernetes values.yaml To restrict all users from using virtual backgrounds during a meeting, follow these steps: Modify the configuration file. The default value is TRUE. For Docker, update the value of the ENABLE_VIRTUAL_BACKGROUND parameter: ENABLE_VIRTUAL_BACKGROUND=false For Kubernetes, update the value of the VirtualBackgroundEnabled parameter: virtualBackgroundEnabled: false Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Managing Sametime Meetings","title":"Disabling virtual background {#disable_background .task}"},{"location":"admin/disable_background.html#disable_background","text":"By default, you can use a filter, blur your background, or use a default or custom image or video to obscure your surroundings. Depending on your organization's requirements, you can disable the virtual background feature by modifying the applicable file. Docker .env Kubernetes values.yaml To restrict all users from using virtual backgrounds during a meeting, follow these steps: Modify the configuration file. The default value is TRUE. For Docker, update the value of the ENABLE_VIRTUAL_BACKGROUND parameter: ENABLE_VIRTUAL_BACKGROUND=false For Kubernetes, update the value of the VirtualBackgroundEnabled parameter: virtualBackgroundEnabled: false Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Managing Sametime Meetings","title":"Disabling virtual background"},{"location":"admin/disable_guest_access.html","text":"Disabling guest access You can disable guest access and remove the option from the meeting attend page. Set the following policy to 0: policy - anonymous - im.meetingsEnabled = 0. Enter the following commands to remove guest access from the meeting attend page: Docker In the .env file, specify the following setting: ENABLE_GUESTS=0 Kubernetes Specify the following setting in meetings-configmap.yaml : ReactAppShowGuestLoginByDefault in meetings-configmap.yaml (helm/templates) Parent topic: Managing Sametime Meetings","title":"Disabling guest access {#disable_guest_access .task}"},{"location":"admin/disable_guest_access.html#disable_guest_access","text":"You can disable guest access and remove the option from the meeting attend page. Set the following policy to 0: policy - anonymous - im.meetingsEnabled = 0. Enter the following commands to remove guest access from the meeting attend page: Docker In the .env file, specify the following setting: ENABLE_GUESTS=0 Kubernetes Specify the following setting in meetings-configmap.yaml : ReactAppShowGuestLoginByDefault in meetings-configmap.yaml (helm/templates) Parent topic: Managing Sametime Meetings","title":"Disabling guest access"},{"location":"admin/disable_sharing_meetings.html","text":"Disable sharing of meetings recording By default meeting recordings can be shared with others. You can change a setting to disable sharing of meeting recordings. To disable sharing of meetings recordings, set the SHARE_RECORDINGS_BY_DEFAULT parameter to false on the Meetings server. When the value is set to false, the option to share recordings when editing meeting settings or stopping a recording is not available. For Docker, change SHARE_RECORDINGS_BY_DEFAULT setting in the custom.env file. SHARE_RECORDINGS_BY_DEFAULT=false For Kubernetes, add the following to the helm/values.yaml file. shareRecordingsByDefault=false Parent topic: Meetings","title":"Disable sharing of meetings recording {#disable_sharing_meetings .task}"},{"location":"admin/disable_sharing_meetings.html#disable_sharing_meetings","text":"By default meeting recordings can be shared with others. You can change a setting to disable sharing of meeting recordings. To disable sharing of meetings recordings, set the SHARE_RECORDINGS_BY_DEFAULT parameter to false on the Meetings server. When the value is set to false, the option to share recordings when editing meeting settings or stopping a recording is not available. For Docker, change SHARE_RECORDINGS_BY_DEFAULT setting in the custom.env file. SHARE_RECORDINGS_BY_DEFAULT=false For Kubernetes, add the following to the helm/values.yaml file. shareRecordingsByDefault=false Parent topic: Meetings","title":"Disable sharing of meetings recording"},{"location":"admin/enable_dial_out.html","text":"Enabling meeting dial-out You can enable the dial-out option on Docker and Kubernetes. The meeting dial-out feature leverages a third party product from http://www.ilink.de iLink called Teamcall Meeting Gateway (TMG), as well as a SIP provider or carrier of your choice to allow users in the meeting to call other participants. When dial-out is enabled, a new button appears in the meeting allowing a meeting participant to enter a phone number for dial out. The call is established with the SIP provider or carrier, and when the call is answered, the person called is joined to the meeting in an audio-only mode. Enabling meeting dial-out on Docker Enabling meeting dial-out on Kubernetes Parent topic: Meetings","title":"Enabling meeting dial-out {#enable_dial_out .task}"},{"location":"admin/enable_dial_out.html#enable_dial_out","text":"You can enable the dial-out option on Docker and Kubernetes. The meeting dial-out feature leverages a third party product from http://www.ilink.de iLink called Teamcall Meeting Gateway (TMG), as well as a SIP provider or carrier of your choice to allow users in the meeting to call other participants. When dial-out is enabled, a new button appears in the meeting allowing a meeting participant to enter a phone number for dial out. The call is established with the SIP provider or carrier, and when the call is answered, the person called is joined to the meeting in an audio-only mode. Enabling meeting dial-out on Docker Enabling meeting dial-out on Kubernetes Parent topic: Meetings","title":"Enabling meeting dial-out"},{"location":"admin/enable_dialout_docker.html","text":"Enabling meeting dial-out on Docker Edit the .env file and save the changes. Do not include the comments which are in parentheses (). JIGASI_SIP_SERVER= (This is the SIP server/proxy IP or hostname. For hostname, this must be in DNS or added as extra_hosts entry in docker-compose.yml for the jigasi service.) JIGASI_SIP_PORT=5060 (This is the SIP server/proxy port) JIGASI_SIP_TRANSPORT=UDP (This is SIP server/proxy protocol) JIGASI_SIP_URI= (This is the SIP URI, in plain text. Example: [mailto:mysipuser@mysipserver.com mysipuser@mysipserver.com] ) JIGASI_SIP_PASSWORD= (This is the SIP user password, in plain text.) Edit the docker_compose.yml and save the changes. Note: The \u201c-\u201c is required in front of the parameter. Under the JIGASI environment section, add the statement: \u2013 JIGASI_PROXY_BYPASS . Under NGINX environment section, add the statement: - ENABLE_INVITE_OTHERS=true . Under JICOFO environment section, add the statement: - JIGASI_SIP_URI . Apply the settings to Docker. To apply these settings to Docker, perform the following: cd to directory holding docker-compose.yml > docker-compose down > rm -rf jitsi-config/jigasi > docker-compose up -d Parent topic: Enabling meeting dial-out Kubernetes Edit the helm/values.yaml file and change the enableJigasi to true. The default is false. Add the following settings. Do not include the comments which are in parentheses (). jigasiSipServer: (This is the SIP server/proxy IP or hostname. For hostname, this must be in DNS or added to CoreDNS config of Kubernetes.) jigasiSipPort: 5060 (This is the SIP server/proxy port) jigasiSipTransport: UDP (This is the SIP server/proxy protocol) jigasiProxyBypass: true (If the SIP proxy is the only network path to the SIP infrastructure, this must be \u201cfalse\u201d. If the meeting infrastructure can directly hit the SIP endpoints, such as the SIP gateway to the PSTN, \u201ctrue\u201d can be set to bypass the proxy after a call is set up.) ENABLE_INVITE_OTHERS: true Configure the SIP user account. The TMG server has a randomly generated passcode that should be shared with the meeting server. This is known as the secret. To share the secret with the meeting server, the value needs to base-64 encoded along with the name. From a command prompt enter the command: echo -n '{\"ilink-TMG\": \"<secret\\>\"}' | base64 Substitute the full secret for the <secret> variable in the command. The resulting value that is echoed to the screen is the credential that needs to be configured on the meeting server. Open the /helm/templates/auth-config-secret.yaml file in edit mode. Locate the application-registry.json and remove the existing eyB9 value and replace it with the encoded secret. Run the helm list command to find out the deployment name and current version. This is needed in the event a roll-back is needed. To apply the changes, change directories to the helm directory where the Sametime Meeting installer was decompressed, then run the following command: helm upgrade sametime-meetings","title":"Enabling meeting dial-out on Docker {#enable_dialout_docker .task}"},{"location":"admin/enable_dialout_docker.html#enable_dialout_docker","text":"Edit the .env file and save the changes. Do not include the comments which are in parentheses (). JIGASI_SIP_SERVER= (This is the SIP server/proxy IP or hostname. For hostname, this must be in DNS or added as extra_hosts entry in docker-compose.yml for the jigasi service.) JIGASI_SIP_PORT=5060 (This is the SIP server/proxy port) JIGASI_SIP_TRANSPORT=UDP (This is SIP server/proxy protocol) JIGASI_SIP_URI= (This is the SIP URI, in plain text. Example: [mailto:mysipuser@mysipserver.com mysipuser@mysipserver.com] ) JIGASI_SIP_PASSWORD= (This is the SIP user password, in plain text.) Edit the docker_compose.yml and save the changes. Note: The \u201c-\u201c is required in front of the parameter. Under the JIGASI environment section, add the statement: \u2013 JIGASI_PROXY_BYPASS . Under NGINX environment section, add the statement: - ENABLE_INVITE_OTHERS=true . Under JICOFO environment section, add the statement: - JIGASI_SIP_URI . Apply the settings to Docker. To apply these settings to Docker, perform the following: cd to directory holding docker-compose.yml > docker-compose down > rm -rf jitsi-config/jigasi > docker-compose up -d Parent topic: Enabling meeting dial-out","title":"Enabling meeting dial-out on Docker"},{"location":"admin/enable_dialout_docker.html#task_psy_m3h_wrb","text":"Edit the helm/values.yaml file and change the enableJigasi to true. The default is false. Add the following settings. Do not include the comments which are in parentheses (). jigasiSipServer: (This is the SIP server/proxy IP or hostname. For hostname, this must be in DNS or added to CoreDNS config of Kubernetes.) jigasiSipPort: 5060 (This is the SIP server/proxy port) jigasiSipTransport: UDP (This is the SIP server/proxy protocol) jigasiProxyBypass: true (If the SIP proxy is the only network path to the SIP infrastructure, this must be \u201cfalse\u201d. If the meeting infrastructure can directly hit the SIP endpoints, such as the SIP gateway to the PSTN, \u201ctrue\u201d can be set to bypass the proxy after a call is set up.) ENABLE_INVITE_OTHERS: true Configure the SIP user account. The TMG server has a randomly generated passcode that should be shared with the meeting server. This is known as the secret. To share the secret with the meeting server, the value needs to base-64 encoded along with the name. From a command prompt enter the command: echo -n '{\"ilink-TMG\": \"<secret\\>\"}' | base64 Substitute the full secret for the <secret> variable in the command. The resulting value that is echoed to the screen is the credential that needs to be configured on the meeting server. Open the /helm/templates/auth-config-secret.yaml file in edit mode. Locate the application-registry.json and remove the existing eyB9 value and replace it with the encoded secret. Run the helm list command to find out the deployment name and current version. This is needed in the event a roll-back is needed. To apply the changes, change directories to the helm directory where the Sametime Meeting installer was decompressed, then run the following command: helm upgrade sametime-meetings","title":"Kubernetes"},{"location":"admin/enable_dialout_kubernetes.html","text":"Enabling meeting dial-out on Kubernetes Edit the helm/values.yaml file and change the enableJigasi to true. The default is false. Add the following settings. Do not include the comments which are in parentheses (). jigasiSipServer: (This is the SIP server/proxy IP or hostname. For hostname, this must be in DNS or added to CoreDNS config of Kubernetes.) jigasiSipPort: 5060 (This is the SIP server/proxy port) jigasiSipTransport: UDP (This is the SIP server/proxy protocol) jigasiProxyBypass: true (If the SIP proxy is the only network path to the SIP infrastructure, this must be \u201cfalse\u201d. If the meeting infrastructure can directly hit the SIP endpoints, such as the SIP gateway to the PSTN, \u201ctrue\u201d can be set to bypass the proxy after a call is set up.) ENABLE_INVITE_OTHERS: true Configure the SIP user account. The TMG server has a randomly generated passcode that should be shared with the meeting server. This is known as the secret. To share the secret with the meeting server, the value needs to base-64 encoded along with the name. From a command prompt enter the command: echo -n '{\"ilink-TMG\": \"<secret\\>\"}' | base64 Substitute the full secret for the <secret> variable in the command. The resulting value that is echoed to the screen is the credential that needs to be configured on the meeting server. Open the /helm/templates/auth-config-secret.yaml file in edit mode. Locate the application-registry.json and remove the existing eyB9 value and replace it with the encoded secret. Run the helm list command to find out the deployment name and current version. This is needed in the event a roll-back is needed. To apply the changes, change directories to the helm directory where the Sametime Meeting installer was decompressed, then run the following command: helm upgrade sametime-meetings Parent topic: Enabling meeting dial-out","title":"Enabling meeting dial-out on Kubernetes {#enable_dialout_kubernetes .task}"},{"location":"admin/enable_dialout_kubernetes.html#enable_dialout_kubernetes","text":"Edit the helm/values.yaml file and change the enableJigasi to true. The default is false. Add the following settings. Do not include the comments which are in parentheses (). jigasiSipServer: (This is the SIP server/proxy IP or hostname. For hostname, this must be in DNS or added to CoreDNS config of Kubernetes.) jigasiSipPort: 5060 (This is the SIP server/proxy port) jigasiSipTransport: UDP (This is the SIP server/proxy protocol) jigasiProxyBypass: true (If the SIP proxy is the only network path to the SIP infrastructure, this must be \u201cfalse\u201d. If the meeting infrastructure can directly hit the SIP endpoints, such as the SIP gateway to the PSTN, \u201ctrue\u201d can be set to bypass the proxy after a call is set up.) ENABLE_INVITE_OTHERS: true Configure the SIP user account. The TMG server has a randomly generated passcode that should be shared with the meeting server. This is known as the secret. To share the secret with the meeting server, the value needs to base-64 encoded along with the name. From a command prompt enter the command: echo -n '{\"ilink-TMG\": \"<secret\\>\"}' | base64 Substitute the full secret for the <secret> variable in the command. The resulting value that is echoed to the screen is the credential that needs to be configured on the meeting server. Open the /helm/templates/auth-config-secret.yaml file in edit mode. Locate the application-registry.json and remove the existing eyB9 value and replace it with the encoded secret. Run the helm list command to find out the deployment name and current version. This is needed in the event a roll-back is needed. To apply the changes, change directories to the helm directory where the Sametime Meeting installer was decompressed, then run the following command: helm upgrade sametime-meetings Parent topic: Enabling meeting dial-out","title":"Enabling meeting dial-out on Kubernetes"},{"location":"admin/enable_disable.html","text":"Configuring live streaming If you have a high number of users that need to attend a meeting without two-way interaction, you can live stream the conference to YouTube. It will only be a listen and watch experience for attendees in the live stream. The users will attend this meeting using a YouTube URL. Most of the live stream requirements are on the YouTube account that belongs to the user who moderates the meeting. In the context of YouTube live streaming, consider the Sametime Meeting server as an \u201cencoder\u201d for YouTube. There is no requirement to install additional software. Prerequisites for Livestream: To use the live stream feature, you must have meeting recordings enabled on the Sametime Meeting Server. If you do not have a meeting recorder, a live stream will not be available. Only meeting moderators can start the live stream. Meeting moderators are indicated with a small star on their participant tile. YouTube Requirements for Live Streaming The person who moderates the meeting must have a YouTube publishing enabled account. It can take up to 24 hours for YouTube to enable this feature on an account. Users should plan accordingly. Your YouTube channel needs to be verified. See the YouTube Studio help for details. You require a YouTube Studio tool to create a live stream and obtain a streaming key. The stream name/key and YouTube Live URL are necessary for the Sametime meeting.s Disabling Live stream: Disabling live stream is a server-wide setting; there is no user-based policy available to disable the feature. The live stream will be disabled if you do not have a Sametime meeting recorder. This page describes the requirements for live streaming, as well as the steps to disable the feature. If you need meeting recordings enabled and live stream disabled, follow this procedure: Note: All commands provided require running as ROOT or SUDO access. If not running as root user, preface all commands with \u2018sudo'. Procedure for Docker based Meeting Servers Place the custom.env in edit mode. vi custom.env Add the following line: REACT_APP_LIVE_STREAMING_ENABLED=false Save the custom.env file. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Procedure for Kubernetes based Meeting Servers Place the helm/values.yaml in edit mode. vi helm/values.yaml Change the following line to false . enableLiveStreaming=false Update the deployment use the helm command: helm upgrade deployment helm/. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Parent topic: Managing Sametime Meetings","title":"Configuring live streaming {#enable_disable .task}"},{"location":"admin/enable_disable.html#enable_disable","text":"If you have a high number of users that need to attend a meeting without two-way interaction, you can live stream the conference to YouTube. It will only be a listen and watch experience for attendees in the live stream. The users will attend this meeting using a YouTube URL. Most of the live stream requirements are on the YouTube account that belongs to the user who moderates the meeting. In the context of YouTube live streaming, consider the Sametime Meeting server as an \u201cencoder\u201d for YouTube. There is no requirement to install additional software. Prerequisites for Livestream: To use the live stream feature, you must have meeting recordings enabled on the Sametime Meeting Server. If you do not have a meeting recorder, a live stream will not be available. Only meeting moderators can start the live stream. Meeting moderators are indicated with a small star on their participant tile. YouTube Requirements for Live Streaming The person who moderates the meeting must have a YouTube publishing enabled account. It can take up to 24 hours for YouTube to enable this feature on an account. Users should plan accordingly. Your YouTube channel needs to be verified. See the YouTube Studio help for details. You require a YouTube Studio tool to create a live stream and obtain a streaming key. The stream name/key and YouTube Live URL are necessary for the Sametime meeting.s Disabling Live stream: Disabling live stream is a server-wide setting; there is no user-based policy available to disable the feature. The live stream will be disabled if you do not have a Sametime meeting recorder. This page describes the requirements for live streaming, as well as the steps to disable the feature. If you need meeting recordings enabled and live stream disabled, follow this procedure: Note: All commands provided require running as ROOT or SUDO access. If not running as root user, preface all commands with \u2018sudo'. Procedure for Docker based Meeting Servers Place the custom.env in edit mode. vi custom.env Add the following line: REACT_APP_LIVE_STREAMING_ENABLED=false Save the custom.env file. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Procedure for Kubernetes based Meeting Servers Place the helm/values.yaml in edit mode. vi helm/values.yaml Change the following line to false . enableLiveStreaming=false Update the deployment use the helm command: helm upgrade deployment helm/. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Parent topic: Managing Sametime Meetings","title":"Configuring live streaming"},{"location":"admin/enable_microsoft_outlook.html","text":"Enabling Microsoft Outlook Add-in To use the Sametime Meetings add-in for Microsoft Outlook it must be enabled on the Sametime server. The add-in is provided as part of Sametime installation package. For additonal information about Microsoft add-ins, see the following Microsoft documentation: Deploy and publish Office Add-ins Publish add-ins via Centralized Deployment Parent topic: Meetings Enabling the add-in on Docker Edit the .envfile. Change the ENABLE_OUTLOOK_ADDIN parameter from false to true. Find the parameter COMPOSE_PROFILES=outlookAddin parmater and remove the comment character (#). Save your changes and restart the server to apply the changes. See Starting and stopping Meeting servers for additional information. Enabling the add-in on Kubernetes Edit the values.yaml file. Change the enableOutlookAddin parameter from false to true. Save your changes and restart the server to apply the changes. See Starting and stopping Meeting servers for additional information.","title":"Enabling Microsoft Outlook Add-in {#enable_microsoft_outlook .task}"},{"location":"admin/enable_microsoft_outlook.html#enable_microsoft_outlook","text":"To use the Sametime Meetings add-in for Microsoft Outlook it must be enabled on the Sametime server. The add-in is provided as part of Sametime installation package. For additonal information about Microsoft add-ins, see the following Microsoft documentation: Deploy and publish Office Add-ins Publish add-ins via Centralized Deployment Parent topic: Meetings","title":"Enabling Microsoft Outlook Add-in"},{"location":"admin/enable_microsoft_outlook.html#task_yck_p4k_3tb","text":"Edit the .envfile. Change the ENABLE_OUTLOOK_ADDIN parameter from false to true. Find the parameter COMPOSE_PROFILES=outlookAddin parmater and remove the comment character (#). Save your changes and restart the server to apply the changes. See Starting and stopping Meeting servers for additional information.","title":"Enabling the add-in on Docker"},{"location":"admin/enable_microsoft_outlook.html#task_yqx_q4k_3tb","text":"Edit the values.yaml file. Change the enableOutlookAddin parameter from false to true. Save your changes and restart the server to apply the changes. See Starting and stopping Meeting servers for additional information.","title":"Enabling the add-in on Kubernetes"},{"location":"admin/enable_video_bridge.html","text":"Enable Videobridge for TCP This section provides steps to configure TCP for media streams using TCP port 4443. The following external port must be opened on a firewall. You can use any network command to verify. For example: - netstat #4443/tcp is used for Real-time Transport Protocol (RTP) media over TCP. Two types of communication can be configured: Transmission Control Protocol (TCP) and User Datagram Protocol (UDP). You can configure the video bridge for one or both. Parent topic: Meetings Docker Use these settings to allow both UDP and TCP. The client tries UDP first and if it fails, TCP is used. Open the .env file, look for \u201cJVB_TCP_HARVESTER_DISABLED\u201d configuration and change the value to false . JVB_TCP_HARVESTER_DISABLED=false In the .env file, locate the entry for JVB_TCP_PORT field. If the value has a # in front, remove the comment # to enable the setting. JVB_TCP_PORT=4443 Note: #JVB_TCP_PORT is TCP port for media used by Jitsi Videobridge when the TCP Harvester is enabled. Open the docker-compose.yaml. Add JVB_TCP_PORT section for the JVB component: # Video bridge jvb: ports: - '${JVB_PORT}:${JVB_PORT}/udp' - '${JVB_TCP_PORT}:${JVB_TCP_PORT}' With above configuration, A/V media successfully flows through 4443 media-port and media-port state changes from Listening to Established tcp6 0 475 a82b7a871950:4443 192.168.75.1:49295 ESTABLISHED * Use these settings to force TCP only. *** If there is need to completely switch to the TCP protocol and remove support for UDP, then complete the settings above, remove JVB_PORT in docker-compose.yaml file and remove the entry from .env file. # Video bridge jvb: ports: #- '${JVB_PORT}:${JVB_PORT}/udp' - '${JVB_TCP_PORT}:${JVB_TCP_PORT}' To enforce the changes made, follow the steps in Applying configuration changes in Docker . Kubernetes Use these settings to allow both UDP and TCP. UDP will be attempted first and if it fails, then TCP will be used. If you need to disable UDP entirely, UDP will need to be blocked at the network. Open the helm/charts/video/templates/deployment.yaml, add the following as environment variables. Search for JVB_PORT to see where to insert them: - name: JVB_TCP_PORT value: \"4443\" - name: JVB_TCP_HARVESTER_DISABLED value: \"false\" These steps are required for AWS EKS only. In helm/charts/video/templates/deployment.yaml, find the lifecycle section. Below it you will see a preStop: section. Insert the following as a sibling section to preStop: postStart: exec: command: [\"/bin/sh\", \"-c\", \"echo 'org.ice4j.ice.harvest.ALLOWED_INTERFACES=eth0' >> /defaults/sip-communicator.properties\"] Save the settings and redeploy using the steps in Applying configuration changes in Kubernetes . To update a live deployment, use the following command: kubectl set env deploy/video -e JVB_TCP_PORT=4443 -e JVB_TCP_HARVESTER_DISABLED=false Use these commands to update a live deployment if you are deployed on AWS: kubectl patch deploy/video -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"jvb\",\"lifecycle\":{\"postStart\":{\"exec\":{\"command\":[\"/bin/sh\", \"-c\", \"echo \\\"org.ice4j.ice.harvest.ALLOWED_INTERFACES=eth0\\\" >> /defaults/sip-communicator.properties\"]}}}}]}}}}' Use these steps to remove UDP port 30000 from AWS: Open the AWS Console and navigate to your EC2 Dashboard. Click Security Groups. Find the Security Group named eksctl-<your cluster name>-nodegroup-video/SG. Locate port 30000 / UDP from the list and click the remove icon. Click Save.","title":"Enable Videobridge for TCP {#enable_video_bridge .task}"},{"location":"admin/enable_video_bridge.html#enable_video_bridge","text":"This section provides steps to configure TCP for media streams using TCP port 4443. The following external port must be opened on a firewall. You can use any network command to verify. For example: - netstat #4443/tcp is used for Real-time Transport Protocol (RTP) media over TCP. Two types of communication can be configured: Transmission Control Protocol (TCP) and User Datagram Protocol (UDP). You can configure the video bridge for one or both. Parent topic: Meetings","title":"Enable Videobridge for TCP"},{"location":"admin/enable_video_bridge.html#task_m5l_hfj_5tb","text":"Use these settings to allow both UDP and TCP. The client tries UDP first and if it fails, TCP is used. Open the .env file, look for \u201cJVB_TCP_HARVESTER_DISABLED\u201d configuration and change the value to false . JVB_TCP_HARVESTER_DISABLED=false In the .env file, locate the entry for JVB_TCP_PORT field. If the value has a # in front, remove the comment # to enable the setting. JVB_TCP_PORT=4443 Note: #JVB_TCP_PORT is TCP port for media used by Jitsi Videobridge when the TCP Harvester is enabled. Open the docker-compose.yaml. Add JVB_TCP_PORT section for the JVB component: # Video bridge jvb: ports: - '${JVB_PORT}:${JVB_PORT}/udp' - '${JVB_TCP_PORT}:${JVB_TCP_PORT}' With above configuration, A/V media successfully flows through 4443 media-port and media-port state changes from Listening to Established tcp6 0 475 a82b7a871950:4443 192.168.75.1:49295 ESTABLISHED * Use these settings to force TCP only. *** If there is need to completely switch to the TCP protocol and remove support for UDP, then complete the settings above, remove JVB_PORT in docker-compose.yaml file and remove the entry from .env file. # Video bridge jvb: ports: #- '${JVB_PORT}:${JVB_PORT}/udp' - '${JVB_TCP_PORT}:${JVB_TCP_PORT}' To enforce the changes made, follow the steps in Applying configuration changes in Docker .","title":"Docker"},{"location":"admin/enable_video_bridge.html#task_gvf_gfj_5tb","text":"Use these settings to allow both UDP and TCP. UDP will be attempted first and if it fails, then TCP will be used. If you need to disable UDP entirely, UDP will need to be blocked at the network. Open the helm/charts/video/templates/deployment.yaml, add the following as environment variables. Search for JVB_PORT to see where to insert them: - name: JVB_TCP_PORT value: \"4443\" - name: JVB_TCP_HARVESTER_DISABLED value: \"false\" These steps are required for AWS EKS only. In helm/charts/video/templates/deployment.yaml, find the lifecycle section. Below it you will see a preStop: section. Insert the following as a sibling section to preStop: postStart: exec: command: [\"/bin/sh\", \"-c\", \"echo 'org.ice4j.ice.harvest.ALLOWED_INTERFACES=eth0' >> /defaults/sip-communicator.properties\"] Save the settings and redeploy using the steps in Applying configuration changes in Kubernetes . To update a live deployment, use the following command: kubectl set env deploy/video -e JVB_TCP_PORT=4443 -e JVB_TCP_HARVESTER_DISABLED=false Use these commands to update a live deployment if you are deployed on AWS: kubectl patch deploy/video -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"jvb\",\"lifecycle\":{\"postStart\":{\"exec\":{\"command\":[\"/bin/sh\", \"-c\", \"echo \\\"org.ice4j.ice.harvest.ALLOWED_INTERFACES=eth0\\\" >> /defaults/sip-communicator.properties\"]}}}}]}}}}' Use these steps to remove UDP port 30000 from AWS: Open the AWS Console and navigate to your EC2 Dashboard. Click Security Groups. Find the Security Group named eksctl-<your cluster name>-nodegroup-video/SG. Locate port 30000 / UDP from the list and click the remove icon. Click Save.","title":"Kubernetes"},{"location":"admin/enabling_saml.html","text":"Enabling SAML authentication in client installation packages Ensure that Sametime\u00ae Connect and Embedded clients can connect to the Sametime Community Server using SAML by adding the new trusted audience URL to the client preferences before installing or updating the clients. Enable SAML authentication for the deployment as explained in Enabling SAML authentication on the Sametime Community Server . This task only applies to the Sametime Connect and Embedded clients; it does not affect web or mobile clients. During SAML login, Sametime redirects client connections from the initial IdP URL. If the redirected URL is not listed as a trusted site, Sametime stops loading the page and generates the following error message in the log: URL redirected_url is not in the trusted sites list. Ensure that Sametime Connect and Embedded clients can connect using SAML by adding the trusted site's URL to the client preferences before installing or updating the clients. This is the URL that you assigned in the STSAML_TRUSTED_AUDIENCES setting, as explained in Configuration settings related to SAML authentication . For more information on configuring client installation packages, see Configuring Sametime Connect client preferences with the Expeditor managed settings framework . Alternatively, users can enable SAML authentication themselves by modifying settings in the client. For more information, see Enabling SAML authentication in installed clients Determine your company's SAML IdP URL. The IdP URL is based on your Sametime Community Server host name, and provides the HTML page with at least 3 <input> tags for the User name, Password, and Submit fields. Upon a submit action, the URL might redirect to one or more URLs and receive the SAML token in response. Decide whether you want to use form or browser as the IdP log-in type. If you want to log in to your company's authentication server by typing a user name and password in a Sametime dialog box, use form as the idp.type ; otherwise use browser. Determine your company's SAML authentication settings by completing the following steps. Browse to your IdP URL, view the HTML source of the log-in form, and collect the following values. idp.form.username.tag is the value in the name attribute of the Intranet ID label's input statement; this value is userID idp.form.password.tag is the value in the name attribute of the Password label's input statement; this value is password idp.form.submit.tag is the value in the name attribute of the Sign in input statement; this value is submit For example, if you browse to the example Community Server IdP URL, the following graphic shows where the values appear in the sample HTML source. Add the information collected in the previous steps to the Sametime plugin_customization.ini file by completing the following steps. Open the plugin_customization.ini file. Windows\u2122: the file is located inside the client installation package, in the deploy directory Mac: the file is located separately from the client installation package Set the samlTrustedSites preference to the list all of the redirecting URLs used by your IdP; separate multiple URLs with a comma (,). If you have multiple SAML communities, include all of the redirecting URLs used by all of the SAML communities. If your IdP does not use redirecting URLs, leave this setting blank. Each URL can be as simple as https://host_name , or you can include a path as in https://host_name/path as shown in the following example. com.hcl.collaboration.realtime.community/samlTrustedSites=https://host1,https://host2/path Set the samlCommunities preference to the list of fully qualified host names of all of your SAML communities; separate multiple host names with a semicolon (;). Set the sametime.example.com.idp to the IdP URL that you determined in Step 1. For example, if the Community Server's host name is sametime.example.com, then the appropriate setting is the IdP URL determined in the example from Step 1, and shown in the following statement: com.ibm.collaboration.realtime.community/sametime.example.com.idp=https://www.example.com/FIM/sps/SAML20/logininitial?TARGET=https://sametime.example.com&PROTOCOL=POST Add the log-in type that you selected in Step 2 to the idp.type setting. Add the tag settings that you collected from the HTML for the log-in page source in Step 3 to the following settings: idp.form.username.tag idp.form.password.tag idp.form.submit.tag The following example shows completed settings using a log-in type of form and the tag settings from the sample HTML source shown in Step 2: com.hcl.collaboration.realtime.community/sametime.example.com.idp.type=form com.hcl.collaboration.realtime.community/sametime.example.com.idp.form.username.tag=userID com.hcl.collaboration.realtime.community/sametime.example.com.idp.form.password.tag=password com.hcl.collaboration.realtime.community/sametime.example.com.idp.form.submit.tag=submit_button Save and close the file. (Mac clients only): If you can install clients with the plugin_customization.ini file located outside of the client package, skip to step 5. If your deployment mechanism requires a single file, add the plugin_customization.ini file to the client installation package as explained in the following steps. Expand the client installation package. Add the plugin_customization.ini file. Compress the revised package. Email the revised package to support@collabserv.com and request that HCL sign the package and return it to you. Distribute the updated installation packages to your users. The SAML configuration information is automatically populated when your users install the client. Parent topic: Setting up SSO using SAML","title":"Enabling SAML authentication in client installation packages {#enabling_saml .task}"},{"location":"admin/enabling_saml.html#enabling_saml","text":"Ensure that Sametime\u00ae Connect and Embedded clients can connect to the Sametime Community Server using SAML by adding the new trusted audience URL to the client preferences before installing or updating the clients. Enable SAML authentication for the deployment as explained in Enabling SAML authentication on the Sametime Community Server . This task only applies to the Sametime Connect and Embedded clients; it does not affect web or mobile clients. During SAML login, Sametime redirects client connections from the initial IdP URL. If the redirected URL is not listed as a trusted site, Sametime stops loading the page and generates the following error message in the log: URL redirected_url is not in the trusted sites list. Ensure that Sametime Connect and Embedded clients can connect using SAML by adding the trusted site's URL to the client preferences before installing or updating the clients. This is the URL that you assigned in the STSAML_TRUSTED_AUDIENCES setting, as explained in Configuration settings related to SAML authentication . For more information on configuring client installation packages, see Configuring Sametime Connect client preferences with the Expeditor managed settings framework . Alternatively, users can enable SAML authentication themselves by modifying settings in the client. For more information, see Enabling SAML authentication in installed clients Determine your company's SAML IdP URL. The IdP URL is based on your Sametime Community Server host name, and provides the HTML page with at least 3 <input> tags for the User name, Password, and Submit fields. Upon a submit action, the URL might redirect to one or more URLs and receive the SAML token in response. Decide whether you want to use form or browser as the IdP log-in type. If you want to log in to your company's authentication server by typing a user name and password in a Sametime dialog box, use form as the idp.type ; otherwise use browser. Determine your company's SAML authentication settings by completing the following steps. Browse to your IdP URL, view the HTML source of the log-in form, and collect the following values. idp.form.username.tag is the value in the name attribute of the Intranet ID label's input statement; this value is userID idp.form.password.tag is the value in the name attribute of the Password label's input statement; this value is password idp.form.submit.tag is the value in the name attribute of the Sign in input statement; this value is submit For example, if you browse to the example Community Server IdP URL, the following graphic shows where the values appear in the sample HTML source. Add the information collected in the previous steps to the Sametime plugin_customization.ini file by completing the following steps. Open the plugin_customization.ini file. Windows\u2122: the file is located inside the client installation package, in the deploy directory Mac: the file is located separately from the client installation package Set the samlTrustedSites preference to the list all of the redirecting URLs used by your IdP; separate multiple URLs with a comma (,). If you have multiple SAML communities, include all of the redirecting URLs used by all of the SAML communities. If your IdP does not use redirecting URLs, leave this setting blank. Each URL can be as simple as https://host_name , or you can include a path as in https://host_name/path as shown in the following example. com.hcl.collaboration.realtime.community/samlTrustedSites=https://host1,https://host2/path Set the samlCommunities preference to the list of fully qualified host names of all of your SAML communities; separate multiple host names with a semicolon (;). Set the sametime.example.com.idp to the IdP URL that you determined in Step 1. For example, if the Community Server's host name is sametime.example.com, then the appropriate setting is the IdP URL determined in the example from Step 1, and shown in the following statement: com.ibm.collaboration.realtime.community/sametime.example.com.idp=https://www.example.com/FIM/sps/SAML20/logininitial?TARGET=https://sametime.example.com&PROTOCOL=POST Add the log-in type that you selected in Step 2 to the idp.type setting. Add the tag settings that you collected from the HTML for the log-in page source in Step 3 to the following settings: idp.form.username.tag idp.form.password.tag idp.form.submit.tag The following example shows completed settings using a log-in type of form and the tag settings from the sample HTML source shown in Step 2: com.hcl.collaboration.realtime.community/sametime.example.com.idp.type=form com.hcl.collaboration.realtime.community/sametime.example.com.idp.form.username.tag=userID com.hcl.collaboration.realtime.community/sametime.example.com.idp.form.password.tag=password com.hcl.collaboration.realtime.community/sametime.example.com.idp.form.submit.tag=submit_button Save and close the file. (Mac clients only): If you can install clients with the plugin_customization.ini file located outside of the client package, skip to step 5. If your deployment mechanism requires a single file, add the plugin_customization.ini file to the client installation package as explained in the following steps. Expand the client installation package. Add the plugin_customization.ini file. Compress the revised package. Email the revised package to support@collabserv.com and request that HCL sign the package and return it to you. Distribute the updated installation packages to your users. The SAML configuration information is automatically populated when your users install the client. Parent topic: Setting up SSO using SAML","title":"Enabling SAML authentication in client installation packages"},{"location":"admin/enabling_saml_clients.html","text":"Enabling SAML authentication in installed clients Enable SAML authentication from within the HCL\u00ae Sametime\u00ae Connect or Embedded client that is already installed on a computer. Enabling SAML authentication in an installed client requires the following information, which the Sametime administrator can provide to users: URL of the authentication server HTML tag ID or tag name for the following fields depending on the type of login: User name, Password, Submit These instructions only apply to a client that is already installed on a computer (the stand-alone Connect client or the Embedded client that runs in HCL Notes\u00ae). Procedure Open the Sametime Preferences dialog box. In the stand-alone Connect client, click Actions and Preferences > Preferences . In the client embedded in HCL Notes, click File > Preferences > Sametime . In the Preferences list, click Server Communities . On the Server Communities page, click New Server Community . On the New Server Community page, fill in the information listed in Table 1. Option Description Server Community type Select Sametime . Server Community name Type the community name. Click the Log In tab and fill in the information listed in Table 2. Option Description Use token-based single sign-on Select this option. Authentication server Type the authentication server's URL, which you can obtain from your administrator. Authentication type Select SAML . Login > Browser If users log in to your company's authentication server by typing a user name and password in the browser login page, select Browser and ignore the User name and Password fields. The Submit tag field is optional: if you want to enable automatic log-ins after network interruptions, provide either the HTML tag ID or the tag name of the submit field in the IdP. If you omit the Submit tag , then passwords are not retained from one log-in to the next. Login > Form If users log in to your company's authentication server by typing a user name and password in a Sametime dialog box, select Form and fill in the following fields: User name tag: Provide either the HTML tag ID or the tag name of the user name field in the IdP. Password tag: Provide either the HTML tag ID or the tag name of the password field in the IdP. Submit tag: Provide either the HTML tag ID or the tag name of the submit field in the IdP. | Click the Server tab and provide the information listed in Table 3. Option Description Host server Type the fully qualified host name of the Sametime Community Server. Server community port Type 1533. Click OK to save your changes and close the dialog box. Parent topic: Setting up SSO using SAML","title":"Enabling SAML authentication in installed clients {#enabling_saml_clients .task}"},{"location":"admin/enabling_saml_clients.html#enabling_saml_clients","text":"Enable SAML authentication from within the HCL\u00ae Sametime\u00ae Connect or Embedded client that is already installed on a computer. Enabling SAML authentication in an installed client requires the following information, which the Sametime administrator can provide to users: URL of the authentication server HTML tag ID or tag name for the following fields depending on the type of login: User name, Password, Submit These instructions only apply to a client that is already installed on a computer (the stand-alone Connect client or the Embedded client that runs in HCL Notes\u00ae). Procedure Open the Sametime Preferences dialog box. In the stand-alone Connect client, click Actions and Preferences > Preferences . In the client embedded in HCL Notes, click File > Preferences > Sametime . In the Preferences list, click Server Communities . On the Server Communities page, click New Server Community . On the New Server Community page, fill in the information listed in Table 1. Option Description Server Community type Select Sametime . Server Community name Type the community name. Click the Log In tab and fill in the information listed in Table 2. Option Description Use token-based single sign-on Select this option. Authentication server Type the authentication server's URL, which you can obtain from your administrator. Authentication type Select SAML . Login > Browser If users log in to your company's authentication server by typing a user name and password in the browser login page, select Browser and ignore the User name and Password fields. The Submit tag field is optional: if you want to enable automatic log-ins after network interruptions, provide either the HTML tag ID or the tag name of the submit field in the IdP. If you omit the Submit tag , then passwords are not retained from one log-in to the next. Login > Form If users log in to your company's authentication server by typing a user name and password in a Sametime dialog box, select Form and fill in the following fields: User name tag: Provide either the HTML tag ID or the tag name of the user name field in the IdP. Password tag: Provide either the HTML tag ID or the tag name of the password field in the IdP. Submit tag: Provide either the HTML tag ID or the tag name of the submit field in the IdP. | Click the Server tab and provide the information listed in Table 3. Option Description Host server Type the fully qualified host name of the Sametime Community Server. Server community port Type 1533. Click OK to save your changes and close the dialog box. Parent topic: Setting up SSO using SAML","title":"Enabling SAML authentication in installed clients"},{"location":"admin/enabling_saml_docker.html","text":"Configuring SAML on Docker Before getting started, create a trust store with the LDAP certificate from the LDAP server. Name the file ldaptruststore.p12 and place it into the directory where the docker-compose.yml file is located. The steps in the following procedure must be completed with root access or you can use sudo which allows you to run commands as root. Change directories to the root directory where the Sametime installation package was decompressed. Create a file with the name saml.env. vi saml.env Add the following lines to the saml.env file. STI__Config__STSAML_TRUST_STORE_TYPE=p12 STI__Config__STSAML_TRUST_STORE_FILE=/local/notesdata/samltruststore.p12 STI__Config__STSAML_TRUST_STORE_PASSWORD=samltruststorepass Open the docker-compose.yaml file for editing. Locate the env_file: parameter in the file and move custom.env to a new line. Add saml.env to the next line after custom.env. env_file: - custom.env - saml.env Add a path to the SAML trust store. If you do not have a volumes section in the docker-compose.yml file, create one under the networks section and add the following line to the section. If you already have a volumes section, add the following line to the section. - ./samltruststore.p12:/local/notesdata/samltruststore.p12 The section should look like the following example. Ensure that the indentations look like the example. networks: - sametime.test volumes: - ./samltruststore.p12:/local/notesdata/samltruststore.p12 Start the Sametime server to apply the changes. docker-compose up -d Parent topic: Setting up SSO using SAML","title":"Configuring SAML on Docker {#enabling_saml_docker .task}"},{"location":"admin/enabling_saml_docker.html#enabling_saml_docker","text":"Before getting started, create a trust store with the LDAP certificate from the LDAP server. Name the file ldaptruststore.p12 and place it into the directory where the docker-compose.yml file is located. The steps in the following procedure must be completed with root access or you can use sudo which allows you to run commands as root. Change directories to the root directory where the Sametime installation package was decompressed. Create a file with the name saml.env. vi saml.env Add the following lines to the saml.env file. STI__Config__STSAML_TRUST_STORE_TYPE=p12 STI__Config__STSAML_TRUST_STORE_FILE=/local/notesdata/samltruststore.p12 STI__Config__STSAML_TRUST_STORE_PASSWORD=samltruststorepass Open the docker-compose.yaml file for editing. Locate the env_file: parameter in the file and move custom.env to a new line. Add saml.env to the next line after custom.env. env_file: - custom.env - saml.env Add a path to the SAML trust store. If you do not have a volumes section in the docker-compose.yml file, create one under the networks section and add the following line to the section. If you already have a volumes section, add the following line to the section. - ./samltruststore.p12:/local/notesdata/samltruststore.p12 The section should look like the following example. Ensure that the indentations look like the example. networks: - sametime.test volumes: - ./samltruststore.p12:/local/notesdata/samltruststore.p12 Start the Sametime server to apply the changes. docker-compose up -d Parent topic: Setting up SSO using SAML","title":"Configuring SAML on Docker"},{"location":"admin/enabling_saml_kubernetes.html","text":"Configuring SAML in Kubernetes The changes in this task affect the following pods: community mux proxy Find the idpUrl value. Modify the user access URL that was provided by your identity provider so that users are redirected properly. Append the IdP user access URL with ?TARGET=https://fully_qualified_hostname/chat . For example, if the following exists: IdP user access URL is https://idp.example.com/example_tenant&appid=1234 Sametime fully qualified host name is sametime.example.com. The resulting URL is https://idp.example.com/example_tenant&appid=1234?TARGET=https://sametime.example.com/chat If you are using a different host name for meetings and webchat, use the host name for th e webchat client. https://idp.example.com/exampletenant&appid=1234?TARGET=https://webchat.example.com/chat Configure the Sametime server to use SAML. Retrieve the certificate from your IdP and create a trust store in p12 format named samltruststore.p12 . If your IdP provides more than one certificate, all certificates must be added to the trust store. Create a secret with your trust store. kubectl create secret generic saml-secret --from-literal=KeyStorePassword=password --from-file=samltruststore.p12 Where password is the password for the keystore. If you are using a namespace for Sametime, include the namespace argument in the command to ensure the secret is located in the same namespace as Sametime. Change directories to helm in the location where the Sametime install was decompressed. Open the values.yaml file in edit mode. Remove the comment character (#) from the following line. # samlConfigSecret: saml-secret Type the IdP URL as the value for the idpUrl parameter. Add the following line below the idpUrl line. ReactAppShowGuestLoginByDefault: true Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Setting up SSO using SAML","title":"Configuring SAML in Kubernetes {#enabling_saml_kubernetes .task}"},{"location":"admin/enabling_saml_kubernetes.html#enabling_saml_kubernetes","text":"The changes in this task affect the following pods: community mux proxy Find the idpUrl value. Modify the user access URL that was provided by your identity provider so that users are redirected properly. Append the IdP user access URL with ?TARGET=https://fully_qualified_hostname/chat . For example, if the following exists: IdP user access URL is https://idp.example.com/example_tenant&appid=1234 Sametime fully qualified host name is sametime.example.com. The resulting URL is https://idp.example.com/example_tenant&appid=1234?TARGET=https://sametime.example.com/chat If you are using a different host name for meetings and webchat, use the host name for th e webchat client. https://idp.example.com/exampletenant&appid=1234?TARGET=https://webchat.example.com/chat Configure the Sametime server to use SAML. Retrieve the certificate from your IdP and create a trust store in p12 format named samltruststore.p12 . If your IdP provides more than one certificate, all certificates must be added to the trust store. Create a secret with your trust store. kubectl create secret generic saml-secret --from-literal=KeyStorePassword=password --from-file=samltruststore.p12 Where password is the password for the keystore. If you are using a namespace for Sametime, include the namespace argument in the command to ensure the secret is located in the same namespace as Sametime. Change directories to helm in the location where the Sametime install was decompressed. Open the values.yaml file in edit mode. Remove the comment character (#) from the following line. # samlConfigSecret: saml-secret Type the IdP URL as the value for the idpUrl parameter. Add the following line below the idpUrl line. ReactAppShowGuestLoginByDefault: true Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Setting up SSO using SAML","title":"Configuring SAML in Kubernetes"},{"location":"admin/enabling_sso.html","text":"Enabling Single Sign-on The HCL Sametime server installer enables required JSON Web Token (JWT) authentication. Additionally, the Sametime server supports Security Assertion Markup Language (SAML) and Lightweight Third Party Authentication (LTPA) Single Sign-on (SSO). SSO is required by the Sametime Community, Proxy, and Meeting services. Typically no further configuration is required, but in some situations you might need to configure SSO to work with other servers. For example, if you have Sametime Integration with Verse, you need to share the same SSO with the Verse servers. With SSO configured, users who log in to any server within the configured DNS domain do not have to log in again when they access another participating server. Note: When using SSO all servers must use the fully qualified host names, such as server.example.com for the LTPA tokens to be created correctly. Setting up SSO using LTPA You can implement SSO into your environment using Lightweight Third Party Authentication (LTPA) which requires LTPA keys. Setting up SSO using SAML You can implement SSO into your environment using Security Assertion Markup Language (SAML). The process is different for Kubernetes and Docker. Parent topic: Securing","title":"Enabling Single Sign-on {#enabling_sso .task}"},{"location":"admin/enabling_sso.html#enabling_sso","text":"The HCL Sametime server installer enables required JSON Web Token (JWT) authentication. Additionally, the Sametime server supports Security Assertion Markup Language (SAML) and Lightweight Third Party Authentication (LTPA) Single Sign-on (SSO). SSO is required by the Sametime Community, Proxy, and Meeting services. Typically no further configuration is required, but in some situations you might need to configure SSO to work with other servers. For example, if you have Sametime Integration with Verse, you need to share the same SSO with the Verse servers. With SSO configured, users who log in to any server within the configured DNS domain do not have to log in again when they access another participating server. Note: When using SSO all servers must use the fully qualified host names, such as server.example.com for the LTPA tokens to be created correctly. Setting up SSO using LTPA You can implement SSO into your environment using Lightweight Third Party Authentication (LTPA) which requires LTPA keys. Setting up SSO using SAML You can implement SSO into your environment using Security Assertion Markup Language (SAML). The process is different for Kubernetes and Docker. Parent topic: Securing","title":"Enabling Single Sign-on"},{"location":"admin/enabling_sso_ltpa.html","text":"Setting up SSO using LTPA You can implement SSO into your environment using Lightweight Third Party Authentication (LTPA) which requires LTPA keys. If you connecting to a HCL Connections server, the LTPA keys is generated by Connections. For other implementations, you'll need to generate the LTPA keys. It doesn't matter whether Sametime is running in Docker or Kubernetes, you can use the process is the same to generate the keys. To complete the SSO connections, the LTPA keys must be configured in Docker or Kubernetes where Sametime is running. The process to configure LTPA on Docker and Kubernetes is different. Generating LTPA keys Lightweight Third Party Authentication (LTPA) uses keys to encrypt and decrypt data being passed. Configuring LTPA in Docker This topic includes the steps to configure LTPA keys on Docker. Configuring LTPA in Kubernetes This topic includes the steps to configure LTPA keys on Kubernetes. Integrating with HCL Connections You can integrate Sametime to enable chat services in HCL Connections. Integrating Sametime with HCL Domino This topic includes the procedure to enable LTPA when Sametime is integrated with the Domino server for use with web based mail, Verse and iNotes. Parent topic: Enabling Single Sign-on","title":"Setting up SSO using LTPA {#enabling_sso_ltpa .task}"},{"location":"admin/enabling_sso_ltpa.html#enabling_sso_ltpa","text":"You can implement SSO into your environment using Lightweight Third Party Authentication (LTPA) which requires LTPA keys. If you connecting to a HCL Connections server, the LTPA keys is generated by Connections. For other implementations, you'll need to generate the LTPA keys. It doesn't matter whether Sametime is running in Docker or Kubernetes, you can use the process is the same to generate the keys. To complete the SSO connections, the LTPA keys must be configured in Docker or Kubernetes where Sametime is running. The process to configure LTPA on Docker and Kubernetes is different. Generating LTPA keys Lightweight Third Party Authentication (LTPA) uses keys to encrypt and decrypt data being passed. Configuring LTPA in Docker This topic includes the steps to configure LTPA keys on Docker. Configuring LTPA in Kubernetes This topic includes the steps to configure LTPA keys on Kubernetes. Integrating with HCL Connections You can integrate Sametime to enable chat services in HCL Connections. Integrating Sametime with HCL Domino This topic includes the procedure to enable LTPA when Sametime is integrated with the Domino server for use with web based mail, Verse and iNotes. Parent topic: Enabling Single Sign-on","title":"Setting up SSO using LTPA"},{"location":"admin/enabling_sso_saml.html","text":"Setting up SSO using SAML You can implement SSO into your environment using Security Assertion Markup Language (SAML). The process is different for Kubernetes and Docker. One user access URL for the Sametime server is needed for the identity provider (IdP). An IdP is a service that stores and verifies the identity of users. In previous Sametime releases, the community services for rich clients was separate from the webchat and meeting services. In Sametime 12, all services are under the Sametime server. Because there is only one server, only one host name is required for all three types of user access: rich clients, webchat and meetings. To use SAML, the IdP administrator must create a federated partnership or relying party trust for the Sametime server. Additionally, the user access URL for the Sametime configuration and a certificate to be trusted by the Sametime server must be provided. If you are upgrading from a previous Sametime version, you might want to keep using the same host names. Use the following scenarios for IdP requirement guidance. Scenario 1 : If one host name is used for accessing rich clients, webchat clients, and meeting clients, only one SAML partnership or relying party trust is needed. Scenario 2 : If using a different host name for rich clients and webchat clients, include the following SAML partnerships or relying party trusts: - One for the chat host name that is exposed to the Sametime Mux service - One for the webchat host name defined for ingress Scenario 3 : If using a different host name for rich client, webchat clients and meeting clients, include the following SAML partnerships or relying party trusts: - One for the chat host name that is exposed to the Sametime Mux service - One for the webchat host name defined for ingress **Note:** Meeting authentication is processed through the webchat proxy and no specific SAML partnership is required for the meeting host name. Each IdP varies in implementation and terminology, below are some guidelines for configuring your IdP. Only IdP initiated sign-on is supported. SAML assertion consumer service URL : The fully-qualified URL of the Sametime server, add /stwebapi/user/connect. For example, https://sametime.example.com/stwebapi/user/connect at the end of the URL. : If you are using a separate name for the webchat client, you can use the webchat host name in the URL. For example: https://webchat.example.con/stwebapi/user/connect. : If the Community chat server has a separate host name from webchat or rich clients, use the community host name in the URL, for example: https://chat.example.com . Relay State : Specify the same value as the what is specified for the SAML assertion consumer service URL. Log out URL : Do not specify a value for this property. The SAML logout specification is not supported in Sametime. Name ID : Specify the attribute from the IdP that contains the user's email address. Certificate for TLS : A secure connection to the IdP is required and the IdP administrator must provide the certificate for Sametime to trust. If you have multiple relying party trusts, the IdP might have separate certificates for each host name trusted or a single certificate. Such as in the case of separated host names. If there are more than one certificate, each certificate and its full chain must be added to the trust store. Configuring SAML on Docker Configuring SAML in Kubernetes Configuration settings related to SAML authentication Enabling SAML authentication in client installation packages Ensure that Sametime\u00ae Connect and Embedded clients can connect to the Sametime Community Server using SAML by adding the new trusted audience URL to the client preferences before installing or updating the clients. Enabling SAML authentication in installed clients Enable SAML authentication from within the HCL\u00ae Sametime\u00ae Connect or Embedded client that is already installed on a computer. Parent topic: Enabling Single Sign-on","title":"Setting up SSO using SAML {#enabling_sso_saml .task}"},{"location":"admin/enabling_sso_saml.html#enabling_sso_saml","text":"You can implement SSO into your environment using Security Assertion Markup Language (SAML). The process is different for Kubernetes and Docker. One user access URL for the Sametime server is needed for the identity provider (IdP). An IdP is a service that stores and verifies the identity of users. In previous Sametime releases, the community services for rich clients was separate from the webchat and meeting services. In Sametime 12, all services are under the Sametime server. Because there is only one server, only one host name is required for all three types of user access: rich clients, webchat and meetings. To use SAML, the IdP administrator must create a federated partnership or relying party trust for the Sametime server. Additionally, the user access URL for the Sametime configuration and a certificate to be trusted by the Sametime server must be provided. If you are upgrading from a previous Sametime version, you might want to keep using the same host names. Use the following scenarios for IdP requirement guidance. Scenario 1 : If one host name is used for accessing rich clients, webchat clients, and meeting clients, only one SAML partnership or relying party trust is needed. Scenario 2 : If using a different host name for rich clients and webchat clients, include the following SAML partnerships or relying party trusts: - One for the chat host name that is exposed to the Sametime Mux service - One for the webchat host name defined for ingress Scenario 3 : If using a different host name for rich client, webchat clients and meeting clients, include the following SAML partnerships or relying party trusts: - One for the chat host name that is exposed to the Sametime Mux service - One for the webchat host name defined for ingress **Note:** Meeting authentication is processed through the webchat proxy and no specific SAML partnership is required for the meeting host name. Each IdP varies in implementation and terminology, below are some guidelines for configuring your IdP. Only IdP initiated sign-on is supported. SAML assertion consumer service URL : The fully-qualified URL of the Sametime server, add /stwebapi/user/connect. For example, https://sametime.example.com/stwebapi/user/connect at the end of the URL. : If you are using a separate name for the webchat client, you can use the webchat host name in the URL. For example: https://webchat.example.con/stwebapi/user/connect. : If the Community chat server has a separate host name from webchat or rich clients, use the community host name in the URL, for example: https://chat.example.com . Relay State : Specify the same value as the what is specified for the SAML assertion consumer service URL. Log out URL : Do not specify a value for this property. The SAML logout specification is not supported in Sametime. Name ID : Specify the attribute from the IdP that contains the user's email address. Certificate for TLS : A secure connection to the IdP is required and the IdP administrator must provide the certificate for Sametime to trust. If you have multiple relying party trusts, the IdP might have separate certificates for each host name trusted or a single certificate. Such as in the case of separated host names. If there are more than one certificate, each certificate and its full chain must be added to the trust store. Configuring SAML on Docker Configuring SAML in Kubernetes Configuration settings related to SAML authentication Enabling SAML authentication in client installation packages Ensure that Sametime\u00ae Connect and Embedded clients can connect to the Sametime Community Server using SAML by adding the new trusted audience URL to the client preferences before installing or updating the clients. Enabling SAML authentication in installed clients Enable SAML authentication from within the HCL\u00ae Sametime\u00ae Connect or Embedded client that is already installed on a computer. Parent topic: Enabling Single Sign-on","title":"Setting up SSO using SAML"},{"location":"admin/example_preferences.html","text":"Deploy managed-settings.xml or managed-community-configs.xml file to a web server Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. The web server that hosts the managed-settings.xml and/or managed-community-configs.xml must allow these two files to be accessed anonymously. Procedure Prior to placing the managed-settings.xml and/or managed-community-configs.xml on the web server, open the file using a browser and ensure it is not producing any syntax errors. If errors are present, they should be resolved first. If choosing Domino for the web server it must be running the http task. Place the managed-settings.xml file in the Domino web server directory: For windows: c:\\Program Files\\HCL\\Domino\\data\\domino\\html For Linux: /local/notesdata/domino/html Example resulting URL: http://www.example.com/managed-settings.xml The managed-settings.xml file must be named \u201cmanaged-settings.xml\u201d. If you require more than one managed-settings.xml file, they can be placed in different folders on the web server, for example (on Windows): c:\\Program Files\\HCL\\Domino\\data\\domino\\html\\default\\managed-settings.xml c:\\Program Files\\HCL\\Domino\\data\\domino\\html\\nomeetings\\managed-settings.xml Example resulting URLs: http://www.example.com/default/managed-settings.xml http://www.example.com/nomeetings/managed-settings.xml The Sametime server will look in the folder specified in the URL for both a managed-settings.xml and a managed-community-configs.xml. If you are using both types of files, your URL defined in the policy must be scoped to the folder path where the two files reside. For example: http://www.example.com/default http://www.example.com/nomeetings Note: Do not use the following special characters in your folder names Ampersand (&) Apostrophe(\u2018) Quotation mark (\u201c) Greater than character (>) Less than character (<) backslash character (\\) Forward slash (/) spaces ( ) hash symbol (#) Updating the client policy to include the managed settings URL . Parent topic: Defining preferences in the managed-settings.xml file","title":"Deploy managed-settings.xml or managed-community-configs.xml file to a web server {#example_preferences .task}"},{"location":"admin/example_preferences.html#example_preferences","text":"Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. The web server that hosts the managed-settings.xml and/or managed-community-configs.xml must allow these two files to be accessed anonymously. Procedure Prior to placing the managed-settings.xml and/or managed-community-configs.xml on the web server, open the file using a browser and ensure it is not producing any syntax errors. If errors are present, they should be resolved first. If choosing Domino for the web server it must be running the http task. Place the managed-settings.xml file in the Domino web server directory: For windows: c:\\Program Files\\HCL\\Domino\\data\\domino\\html For Linux: /local/notesdata/domino/html Example resulting URL: http://www.example.com/managed-settings.xml The managed-settings.xml file must be named \u201cmanaged-settings.xml\u201d. If you require more than one managed-settings.xml file, they can be placed in different folders on the web server, for example (on Windows): c:\\Program Files\\HCL\\Domino\\data\\domino\\html\\default\\managed-settings.xml c:\\Program Files\\HCL\\Domino\\data\\domino\\html\\nomeetings\\managed-settings.xml Example resulting URLs: http://www.example.com/default/managed-settings.xml http://www.example.com/nomeetings/managed-settings.xml The Sametime server will look in the folder specified in the URL for both a managed-settings.xml and a managed-community-configs.xml. If you are using both types of files, your URL defined in the policy must be scoped to the folder path where the two files reside. For example: http://www.example.com/default http://www.example.com/nomeetings Note: Do not use the following special characters in your folder names Ampersand (&) Apostrophe(\u2018) Quotation mark (\u201c) Greater than character (>) Less than character (<) backslash character (\\) Forward slash (/) spaces ( ) hash symbol (#) Updating the client policy to include the managed settings URL . Parent topic: Defining preferences in the managed-settings.xml file","title":"Deploy managed-settings.xml or managed-community-configs.xml file to a web server"},{"location":"admin/hcl_sametime_clients.html","text":"Sametime clients Several client types are supported providing flexibility in how users can access chats and meetings. A single deployment can implement several client types. The following Sametime client types are supported: Connect client : The Connect client is a stand-alone client that allows for connection to the Sametime server for meetings and chat. It is installed on the user's desktop and requires administrative privileges to perform the install. It can be installed on a Windows or MacOS platform. Provides access to chat features. Documentation for this client is provided as the Help within the client. Embedded client : An Embedded client provides for connection to the Sametime server within another product. HCL Verse, HCL iNotes, HCL Connections, and HCL Digital contained an embedded Sametime client. Because it is part of the product, starting and using Sametime is done within the product it is embedded. Provides access to chat features. Documentation for this client is provided as the Help within the client. Mobile client : Mobile clients provide access to a Sametime server using an iOS and Android mobile device. An HCL Sametime app must be installed on the mobile device to connect to the server. Provides access to chat and meeting features. : - HCL Sametime iOS Users Guide - HCL Sametime Android Users Guide Progressive Web App (PWA) client : The PWA is a standalone app that than be installed from the Web client onto your machine. It allows you to access chat and meeting features from the installed app. Provides access to chat and meeting features. Web client : The Web client provides for access to the Sametime server using a web browser. Provides access to chat and meeting features. : - Sametime Meetings Users Guide - Sametime Chat Users Guide Parent topic: Planning","title":"Sametime clients {#hcl_sametime_clients .concept}"},{"location":"admin/hcl_sametime_clients.html#hcl_sametime_clients","text":"Several client types are supported providing flexibility in how users can access chats and meetings. A single deployment can implement several client types. The following Sametime client types are supported: Connect client : The Connect client is a stand-alone client that allows for connection to the Sametime server for meetings and chat. It is installed on the user's desktop and requires administrative privileges to perform the install. It can be installed on a Windows or MacOS platform. Provides access to chat features. Documentation for this client is provided as the Help within the client. Embedded client : An Embedded client provides for connection to the Sametime server within another product. HCL Verse, HCL iNotes, HCL Connections, and HCL Digital contained an embedded Sametime client. Because it is part of the product, starting and using Sametime is done within the product it is embedded. Provides access to chat features. Documentation for this client is provided as the Help within the client. Mobile client : Mobile clients provide access to a Sametime server using an iOS and Android mobile device. An HCL Sametime app must be installed on the mobile device to connect to the server. Provides access to chat and meeting features. : - HCL Sametime iOS Users Guide - HCL Sametime Android Users Guide Progressive Web App (PWA) client : The PWA is a standalone app that than be installed from the Web client onto your machine. It allows you to access chat and meeting features from the installed app. Provides access to chat and meeting features. Web client : The Web client provides for access to the Sametime server using a web browser. Provides access to chat and meeting features. : - Sametime Meetings Users Guide - Sametime Chat Users Guide Parent topic: Planning","title":"Sametime clients"},{"location":"admin/implement_tls_configuration.html","text":"Implementing the Global TLS Scope GSKit must already be installed. You must have a key store and trust store as a .p12 or .jks file. Both third party and self-signed certificates are supported. Note: If you have a Sametime Proxy server, it should use third-party certificates if you plan to support mobile clients. Concepts: There is a trust store needed for creating outbound connections. The trust store is used by the client side of a TLS connection to validate the server's certificate. With mutual authentication, the trust store is also used by the server to validate the client's certificate. There is a key store needed for accepting inbound connections. The key store is used by the server side of a TLS connection to store the server certificate as well as chain certificates, if any chain certificates exist. During client authentication, the key store is used by the client to store its client certificate and chain certificates, if any exist. All Sametime encryption is done at TLS 1.2, which can be overridden if a lower version is required. Configure these required parameters into the [Config] section of sametime.ini Setting Description Example Value ST_TLS_TRUST_STORE_TYPE The trust store type p12= use for files ending with .p12 or .pfx (p12 is recommended) jks= use for files ending with .jks p12 ST_TLS_KEY_STORE_TYPE This is for the key store type. p12= use for files ending with .p12 or .pfx (p12 is recommended) jks= use for files ending with .jks p12 ST_TLS_TRUST_STORE_FILE Enter the full path and name of the trust store file. C:\\Program Files\\HCL\\Domino\\truststore.p12 ST_TLS_TRUST_STORE_PASSWORD Enter the password to the trust store. This will be stored in clear text, if desired a stash file can be used instead. Refer to the optional parameters section. SecureSametimePassw0rd ST_TLS_KEY_STORE_FILE Enter the full path and name of the key store. C:\\Program Files\\HCL\\Domino\\keystore.p12 ST_TLS_KEY_STORE_PASSWORD Enter the password to the keystore SecureSametimePassw0rd Optional: Additional Sametime.ini parameters Example Description ST_TLS_FIPS_COMPLIANCE Set to 1 to enable FIPS compliance. ST_TLS_SECURITY_LEVEL The required security level. The minimum security level controls compliance with the security standards NIST SP800-131a and NSA Suite B. 0 = No requirement 1 = NIST SP800 -131a \u201cTransition mode\u201d 2 = NIST SP800-131a \u201cStrict mode\u201d 3 = NSA Suite B 128-bit level 4 = NSA Suite B 192-bit level | |ST_TLS_MAX_SESSION_AGE|The amount of time before re-negotiating a session. The time to keep a session, in seconds, before deleting it from cache. The default of -1 implies no cache, which is generally sufficient for most Sametime deployments. A 0 implies no limit on the age of cached sessions.| |ST_TLS_SESSION_CACHE_SIZE|Ignored for outbound connections, only applies to inbound connections. The number of TLS sessions that a server keeps in memory, for session reuse. This option tells the server to keep a cache of the TLS session state after the connection is closed. It is useful after temporary network outage, when the client attempts to reconnect to the server, by reusing the session that was established earlier. If the server finds the session in cache, the handshake is abbreviated, consuming less resources. If the session is not in cache, a new session is established, including the full handshake. The default value of -1 implies no session caching, which is generally sufficient for most Sametime deployments. A value of 0 imposes no limit on the number of cached sessions.| |ST_TLS_SESSION_CACHE_TIME|Ignored for outbound connections, only applies to inbound connections. Time before renegotiating a session - The maximum age of a TLS session, in seconds. If the same session is used longer than this setting, a new session is renegotiated over the same connection. The default value of 0 implies no session renegotiation.| |ST_TLS_MIN_PROTOCOL_VERSION=|The oldest version of the SSL/TLS protocol to negotiate during handshake. To set a TLS protocol other than 1.2, use Set the value to your needs: For SSL v3: 0x300 For TLS v1.0 = 0x301 For TLS v1.1 = 0x302 For TLS v1.2 = 0x303 (or leave blank for default to TLS 1.2) | |ST_TLS_MAX_PROTOCOL_VERSION|To set a maximum TLS protocol other than 1.2, use Set the value to your needs: For SSL v3: 0x300 For TLS v1.0 = 0x301 For TLS v1.1 = 0x302 For TLS v1.2 = 0x303 (or leave blank for default to TLS 1.2) | |ST_TLS_CIPHER_SUITES|A comma-separated list of cipher suites. Leave blank to enable the default cipher suites. | |ST_TLS_CLIENT_AUTH|Request a certificate from the client, does not apply to outbound connections. 0 = None: The server will not request a certificate from the client. This is the default value. 1 = Want: The server will request a certificate from the client, but will proceed with the handshake even if the client does not present one. 2 = Need: The server will request a certificate from the client, and will fail the connection if the client does not present one. | |ST_TLS_TRUSTED_HOSTS|A list of trusted certificate hostnames. A comma-separated list of one or more trusted hosts, to compare against the peer certificate. This comparison takes place during the TLS handshake, when receiving a certificate from the peer -- either when the client receives the server certificate, or when the server receives a client certificate. The name in the peer certificate is typically specified in either the subject CN (common name) or the subjectAltName field. Validation passes if there is at least one match between the name in the peer certificate and a name in the trusted hosts list. A trusted host name may contain the wildcard character *, indicating comparison of domain components rather than the entire string as a whole. This follows the matching rules of RFC 2818 section 3.1. Certificate subject validation only applies when receiving a certificate from the peer. In order to ensure that a server performs this comparison, the server must require a client certificate, by setting ST_TLS_CLIENT_AUTH=2 .| |ST_TLS_MIRROR_TRUSTED_HOSTS|Necessary only if you have a key store with multiple key certificates. In which case, each certificate has a different alias in the key store. On the server side, specify the alias of the certificate that identifies the server. If the key store is used on the client side of TLS connections, specify the alias of the certificate that identifies the client.| |ST_TLS_KEY_LABEL|Ignored if ST_TLS_KEY_STORE_FILE is missing, or if there is only one key in the keystore. Necessary only if you have a key store with multiple key certificates. In which case, each certificate has a different alias in the key store. On the server side, specify the alias of the certificate that identifies the server. If the key store is used on the client side of TLS connections, specify the alias of the certificate that identifies the client. | Note: When you enable TLS for the Sametime server connections, TLS version 1.2 is used by default. SSLv3 and TLSv1 have security vulnerabilities and should not be used. Parameters to use a stash file Storing the certificate store password in a stash file is useful for keeping sametime.ini file clean of passwords. The password stash file is not securely encrypted, and therefore it should be protected from unauthorized access. To create the password stash file for the first time, complete these steps: Set both the password parameters in the [Config] section of sametime.ini: ST_TLS_TRUST_STORE_PASSWORD=<your password> ST_TLS_KEY_STORE_PASSWORD=<your password> Set the path to the stash files, relative to the Domino directory: ST_TLS_KEY_STORE_PASSWORD_STASH_FILE=<C:\\Program Files\\HCL\\Domino\\key.sth> ST_TLS_TRUST_STORE_PASSWORD_STASH_FILE=<C:\\Program Files\\HCL\\Domino\\trust.sth> Make sure the password stash file does not exist in the file system. Start the Sametime server. Upon initialization, Sametime creates the password stash file and deletes the cleartext password from the configuration. The next time the server is started, the password is obtained from the password stash file. Note: The password stash file is not securely encrypted, it must be protected from unauthorized access. Parent topic: Choosing the TLS configuration scope","title":"Implementing the Global TLS Scope {#implement_tls_configuration .task}"},{"location":"admin/implement_tls_configuration.html#implement_tls_configuration","text":"GSKit must already be installed. You must have a key store and trust store as a .p12 or .jks file. Both third party and self-signed certificates are supported. Note: If you have a Sametime Proxy server, it should use third-party certificates if you plan to support mobile clients. Concepts: There is a trust store needed for creating outbound connections. The trust store is used by the client side of a TLS connection to validate the server's certificate. With mutual authentication, the trust store is also used by the server to validate the client's certificate. There is a key store needed for accepting inbound connections. The key store is used by the server side of a TLS connection to store the server certificate as well as chain certificates, if any chain certificates exist. During client authentication, the key store is used by the client to store its client certificate and chain certificates, if any exist. All Sametime encryption is done at TLS 1.2, which can be overridden if a lower version is required. Configure these required parameters into the [Config] section of sametime.ini Setting Description Example Value ST_TLS_TRUST_STORE_TYPE The trust store type p12= use for files ending with .p12 or .pfx (p12 is recommended) jks= use for files ending with .jks p12 ST_TLS_KEY_STORE_TYPE This is for the key store type. p12= use for files ending with .p12 or .pfx (p12 is recommended) jks= use for files ending with .jks p12 ST_TLS_TRUST_STORE_FILE Enter the full path and name of the trust store file. C:\\Program Files\\HCL\\Domino\\truststore.p12 ST_TLS_TRUST_STORE_PASSWORD Enter the password to the trust store. This will be stored in clear text, if desired a stash file can be used instead. Refer to the optional parameters section. SecureSametimePassw0rd ST_TLS_KEY_STORE_FILE Enter the full path and name of the key store. C:\\Program Files\\HCL\\Domino\\keystore.p12 ST_TLS_KEY_STORE_PASSWORD Enter the password to the keystore SecureSametimePassw0rd Optional: Additional Sametime.ini parameters Example Description ST_TLS_FIPS_COMPLIANCE Set to 1 to enable FIPS compliance. ST_TLS_SECURITY_LEVEL The required security level. The minimum security level controls compliance with the security standards NIST SP800-131a and NSA Suite B. 0 = No requirement 1 = NIST SP800 -131a \u201cTransition mode\u201d 2 = NIST SP800-131a \u201cStrict mode\u201d 3 = NSA Suite B 128-bit level 4 = NSA Suite B 192-bit level | |ST_TLS_MAX_SESSION_AGE|The amount of time before re-negotiating a session. The time to keep a session, in seconds, before deleting it from cache. The default of -1 implies no cache, which is generally sufficient for most Sametime deployments. A 0 implies no limit on the age of cached sessions.| |ST_TLS_SESSION_CACHE_SIZE|Ignored for outbound connections, only applies to inbound connections. The number of TLS sessions that a server keeps in memory, for session reuse. This option tells the server to keep a cache of the TLS session state after the connection is closed. It is useful after temporary network outage, when the client attempts to reconnect to the server, by reusing the session that was established earlier. If the server finds the session in cache, the handshake is abbreviated, consuming less resources. If the session is not in cache, a new session is established, including the full handshake. The default value of -1 implies no session caching, which is generally sufficient for most Sametime deployments. A value of 0 imposes no limit on the number of cached sessions.| |ST_TLS_SESSION_CACHE_TIME|Ignored for outbound connections, only applies to inbound connections. Time before renegotiating a session - The maximum age of a TLS session, in seconds. If the same session is used longer than this setting, a new session is renegotiated over the same connection. The default value of 0 implies no session renegotiation.| |ST_TLS_MIN_PROTOCOL_VERSION=|The oldest version of the SSL/TLS protocol to negotiate during handshake. To set a TLS protocol other than 1.2, use Set the value to your needs: For SSL v3: 0x300 For TLS v1.0 = 0x301 For TLS v1.1 = 0x302 For TLS v1.2 = 0x303 (or leave blank for default to TLS 1.2) | |ST_TLS_MAX_PROTOCOL_VERSION|To set a maximum TLS protocol other than 1.2, use Set the value to your needs: For SSL v3: 0x300 For TLS v1.0 = 0x301 For TLS v1.1 = 0x302 For TLS v1.2 = 0x303 (or leave blank for default to TLS 1.2) | |ST_TLS_CIPHER_SUITES|A comma-separated list of cipher suites. Leave blank to enable the default cipher suites. | |ST_TLS_CLIENT_AUTH|Request a certificate from the client, does not apply to outbound connections. 0 = None: The server will not request a certificate from the client. This is the default value. 1 = Want: The server will request a certificate from the client, but will proceed with the handshake even if the client does not present one. 2 = Need: The server will request a certificate from the client, and will fail the connection if the client does not present one. | |ST_TLS_TRUSTED_HOSTS|A list of trusted certificate hostnames. A comma-separated list of one or more trusted hosts, to compare against the peer certificate. This comparison takes place during the TLS handshake, when receiving a certificate from the peer -- either when the client receives the server certificate, or when the server receives a client certificate. The name in the peer certificate is typically specified in either the subject CN (common name) or the subjectAltName field. Validation passes if there is at least one match between the name in the peer certificate and a name in the trusted hosts list. A trusted host name may contain the wildcard character *, indicating comparison of domain components rather than the entire string as a whole. This follows the matching rules of RFC 2818 section 3.1. Certificate subject validation only applies when receiving a certificate from the peer. In order to ensure that a server performs this comparison, the server must require a client certificate, by setting ST_TLS_CLIENT_AUTH=2 .| |ST_TLS_MIRROR_TRUSTED_HOSTS|Necessary only if you have a key store with multiple key certificates. In which case, each certificate has a different alias in the key store. On the server side, specify the alias of the certificate that identifies the server. If the key store is used on the client side of TLS connections, specify the alias of the certificate that identifies the client.| |ST_TLS_KEY_LABEL|Ignored if ST_TLS_KEY_STORE_FILE is missing, or if there is only one key in the keystore. Necessary only if you have a key store with multiple key certificates. In which case, each certificate has a different alias in the key store. On the server side, specify the alias of the certificate that identifies the server. If the key store is used on the client side of TLS connections, specify the alias of the certificate that identifies the client. | Note: When you enable TLS for the Sametime server connections, TLS version 1.2 is used by default. SSLv3 and TLSv1 have security vulnerabilities and should not be used. Parameters to use a stash file Storing the certificate store password in a stash file is useful for keeping sametime.ini file clean of passwords. The password stash file is not securely encrypted, and therefore it should be protected from unauthorized access. To create the password stash file for the first time, complete these steps: Set both the password parameters in the [Config] section of sametime.ini: ST_TLS_TRUST_STORE_PASSWORD=<your password> ST_TLS_KEY_STORE_PASSWORD=<your password> Set the path to the stash files, relative to the Domino directory: ST_TLS_KEY_STORE_PASSWORD_STASH_FILE=<C:\\Program Files\\HCL\\Domino\\key.sth> ST_TLS_TRUST_STORE_PASSWORD_STASH_FILE=<C:\\Program Files\\HCL\\Domino\\trust.sth> Make sure the password stash file does not exist in the file system. Start the Sametime server. Upon initialization, Sametime creates the password stash file and deletes the cleartext password from the configuration. The next time the server is started, the password is obtained from the password stash file. Note: The password stash file is not securely encrypted, it must be protected from unauthorized access. Parent topic: Choosing the TLS configuration scope","title":"Implementing the Global TLS Scope"},{"location":"admin/implement_tls_configuration_individual.html","text":"Implementing the Individual TLS Scope GSKit must be installed. You must have a key store and trust store as a .p12 or .jks file. You can use the global TLS settings for some of the connections and override some or all of them. If you desire to use a combination of the global settings as well as override them for specific services, be sure to review and implement the topic Implementing the Global TLS Scope . It is also possible to have each individual type of connection use its own settings and not enable the global settings. When you are overriding or not using the global settings , pre-fix the configuration settings with the service name you are wanting to secure. The service pre-fixes take the place of \u201cST\u201d in the sametime.ini settings that are detailed in the topic Implementing the Global TLS Scope . These are the pre-fixes: Prefix Applies to Description ST_ Global Scope The global setting prefix that applies to all services unless one of the below settings overrides the global setting. STMUX_ Sametime Multiplexer These are for the Sametime Multiplexer both standalone and the one on the Community Server. These are client to server interactions on port 1533. STSRV_ St Community These are the settings for server side applications connecting to the Community Server on port 1516. Examples of this include the standalone Mux and the Sametime Proxy Server. STLDAP_ LDAP These are interactions between the Sametime Server and the LDAP server. In this case the Sametime server is a client to LDAP and the communications are typically secured on port 1516. STSAML_ SAML These settings are used to validate signed responses (encrypted assertions) from the IdP are valid. To use the prefix, review the setting from Implementing the Global TLS Scope table 1. Replace \u201cST_\u201d with the prefixes from the table above for each type of server interaction. For example, to configure the trust store for the Sametime Mux, take the setting \u201cST_TLS_TRUST_STORE_TYPE\u201d. Remove \u201cST_\u201d from the beginning and use \u201cSTMUX_\u201d prefix in front of the parameter. The resulting parameter is STMUX_TLS_TRUST_STORE_TYPE. This substitution concept works for all parameters listed on the Implementing the Global TLS Scope topic. Once the required sametime.ini parameters are in place be sure to finish configuring your service by completing the topic for the service you are wanting to secure. Parent topic: Choosing the TLS configuration scope","title":"Implementing the Individual TLS Scope {#implement_tls_configuration_individual .task}"},{"location":"admin/implement_tls_configuration_individual.html#implement_tls_configuration_individual","text":"GSKit must be installed. You must have a key store and trust store as a .p12 or .jks file. You can use the global TLS settings for some of the connections and override some or all of them. If you desire to use a combination of the global settings as well as override them for specific services, be sure to review and implement the topic Implementing the Global TLS Scope . It is also possible to have each individual type of connection use its own settings and not enable the global settings. When you are overriding or not using the global settings , pre-fix the configuration settings with the service name you are wanting to secure. The service pre-fixes take the place of \u201cST\u201d in the sametime.ini settings that are detailed in the topic Implementing the Global TLS Scope . These are the pre-fixes: Prefix Applies to Description ST_ Global Scope The global setting prefix that applies to all services unless one of the below settings overrides the global setting. STMUX_ Sametime Multiplexer These are for the Sametime Multiplexer both standalone and the one on the Community Server. These are client to server interactions on port 1533. STSRV_ St Community These are the settings for server side applications connecting to the Community Server on port 1516. Examples of this include the standalone Mux and the Sametime Proxy Server. STLDAP_ LDAP These are interactions between the Sametime Server and the LDAP server. In this case the Sametime server is a client to LDAP and the communications are typically secured on port 1516. STSAML_ SAML These settings are used to validate signed responses (encrypted assertions) from the IdP are valid. To use the prefix, review the setting from Implementing the Global TLS Scope table 1. Replace \u201cST_\u201d with the prefixes from the table above for each type of server interaction. For example, to configure the trust store for the Sametime Mux, take the setting \u201cST_TLS_TRUST_STORE_TYPE\u201d. Remove \u201cST_\u201d from the beginning and use \u201cSTMUX_\u201d prefix in front of the parameter. The resulting parameter is STMUX_TLS_TRUST_STORE_TYPE. This substitution concept works for all parameters listed on the Implementing the Global TLS Scope topic. Once the required sametime.ini parameters are in place be sure to finish configuring your service by completing the topic for the service you are wanting to secure. Parent topic: Choosing the TLS configuration scope","title":"Implementing the Individual TLS Scope"},{"location":"admin/increase_activecameras.html","text":"Increasing active cameras The default allowed active cameras is eight, with the most recent active cameras displaying. Including your own, by default the maximum number of videos that can be shown simultaneously in a meeting is nine . The default is the officially supported and recommended setting based on testing. Depending on your business needs, you can increase the value. Restore to the default setting if performance isses are encountered. Docker custom.env Kubernetes helm/values.yaml Note: These values are case sensitive and must be entered as shown below. Modify the configuration file. The default value is 8. For Docker environments, update the CHANNEL_LAST_N parameter to increase the number of active cameras. For example, CHANNEL_LAST_N = 11. When applied, you are able to view up to 12 simultaneous videos in a meeting including your own tile. For Kubernetes environments, update the channelLastN parameter to increase the number of active cameras. For example, channelLastN : 11. When applied, you are able to view up to 12 simultaneous videos in a meeting including your own tile. Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Managing Sametime Meetings","title":"Increasing active cameras {#increase_activecameras .task}"},{"location":"admin/increase_activecameras.html#increase_activecameras","text":"The default allowed active cameras is eight, with the most recent active cameras displaying. Including your own, by default the maximum number of videos that can be shown simultaneously in a meeting is nine . The default is the officially supported and recommended setting based on testing. Depending on your business needs, you can increase the value. Restore to the default setting if performance isses are encountered. Docker custom.env Kubernetes helm/values.yaml Note: These values are case sensitive and must be entered as shown below. Modify the configuration file. The default value is 8. For Docker environments, update the CHANNEL_LAST_N parameter to increase the number of active cameras. For example, CHANNEL_LAST_N = 11. When applied, you are able to view up to 12 simultaneous videos in a meeting including your own tile. For Kubernetes environments, update the channelLastN parameter to increase the number of active cameras. For example, channelLastN : 11. When applied, you are able to view up to 12 simultaneous videos in a meeting including your own tile. Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Managing Sametime Meetings","title":"Increasing active cameras"},{"location":"admin/installation_mongodb.html","text":"Installing the MongoDB The MongoDB Community Server can be downloaded from the MongoDB website. You can install MongDB on Windows and Linux platforms. For information on MongoDB about it's purpose for HCL Sametime and deployment options, see MongoDB . Installing MongoDB on Windows MongoDB can be downloaded from the MongoDB website. This topic guides you through the steps for installing MongoDB on Windows. Installing MongoDB on Linux MongoDB can be downloaded from the MongoDB website. This topic includes the steps for installing on a CentOS and RHEL environments. For information on installing MongoDB on other operating systems, refer to Install MongoDB on the MongoDB website. Configuring MongoDB for Sametime This topic describes how to configure MongoDB on both the Windows and Linux platform to support an HCL Sametime and HCL Sametime Premium deployment. Parent topic: Installing","title":"Installing the MongoDB"},{"location":"admin/installation_mongodb.html#installation_mongodb","text":"The MongoDB Community Server can be downloaded from the MongoDB website. You can install MongDB on Windows and Linux platforms. For information on MongoDB about it's purpose for HCL Sametime and deployment options, see MongoDB . Installing MongoDB on Windows MongoDB can be downloaded from the MongoDB website. This topic guides you through the steps for installing MongoDB on Windows. Installing MongoDB on Linux MongoDB can be downloaded from the MongoDB website. This topic includes the steps for installing on a CentOS and RHEL environments. For information on installing MongoDB on other operating systems, refer to Install MongoDB on the MongoDB website. Configuring MongoDB for Sametime This topic describes how to configure MongoDB on both the Windows and Linux platform to support an HCL Sametime and HCL Sametime Premium deployment. Parent topic: Installing","title":"Installing the MongoDB"},{"location":"admin/installation_prometheus.html","text":"Installing Prometheus Promethus provides monitoring on the system. It is used in the auto-scaling feature, but can also be used a monitor your system usage and performance. To deploy the autoscaler, Promethus must be enabled. From the cloud shell, run the following commands in the directory where you extracted the HCL Sametime install zip file. Add the prometheus-community helm repository. helm repo add prometheus-community https://prometheus-community.github.io/helm-charts Create a namespace for monitoring. kubectl create namespace monitoring Install Prometheus using the following command. The command must be entered as a single line. helm install -n monitoring prometheus --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false prometheus-community/kube-prometheus-stack Parent topic: Installing Sametime in a Kubernetes environment","title":"Installing Prometheus {#installation_prometheus .task}"},{"location":"admin/installation_prometheus.html#installation_prometheus","text":"Promethus provides monitoring on the system. It is used in the auto-scaling feature, but can also be used a monitor your system usage and performance. To deploy the autoscaler, Promethus must be enabled. From the cloud shell, run the following commands in the directory where you extracted the HCL Sametime install zip file. Add the prometheus-community helm repository. helm repo add prometheus-community https://prometheus-community.github.io/helm-charts Create a namespace for monitoring. kubectl create namespace monitoring Install Prometheus using the following command. The command must be entered as a single line. helm install -n monitoring prometheus --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false prometheus-community/kube-prometheus-stack Parent topic: Installing Sametime in a Kubernetes environment","title":"Installing Prometheus"},{"location":"admin/installation_prompt_descriptions.html","text":"Information to provide during installation During the install process, you are prompted for information used to tailor the installation for your environment. The Sametime install prompts for several details pertaining to the environment. Before initiating the process, gather the listed details. Sametime server name : The fully qualified name of the Sametime server. MongoDB : Mongo host : The host name of the MongoDB server. Mongo port : The port number used to communicate with the MongoDB server. Administrator user name : The user name of the MongoDB administrator defined when configuring the MongoDB. The default MongoDB administrator is sametimeUser. Password : The password for the the MongoDB administrator defined when configuring the MongoDB. The default MongoDB password is sametime. Connection URL : A secure URL to connect to the MongoDB server. The supplied URL overrides the default MongoDB URL. LDAP : LDAP server : The host name or IP address of the LDAP server. LDAP port : The port used to communicate with the LDAP server. Bind name and password : The bind account name and password for Sametime to access LDAP. Base DN : The base location where Sametime begins a search for users and groups. TLS access : If LDAP is access using TLS, provide the port number. JWT Secret : The Base64 encoded JWT_SECRET from the Sametime deployment. If migrating from another version of Sametime, you can re-use your existing secret. If you don't have one the install program generates it. TURN server : The fully-qualified host name of a TURN server. TCP configuration : The port number used for TCP communications. The default is port number 4443. LTPA configuration : If you plan to use LTPA, generate the LTPA keys and password before running the install program. See Setting up SSO using LTPA . Parent topic: Installing Sametime","title":"Information to provide during installation"},{"location":"admin/installation_prompt_descriptions.html#installation_prompt_descriptions","text":"During the install process, you are prompted for information used to tailor the installation for your environment. The Sametime install prompts for several details pertaining to the environment. Before initiating the process, gather the listed details. Sametime server name : The fully qualified name of the Sametime server. MongoDB : Mongo host : The host name of the MongoDB server. Mongo port : The port number used to communicate with the MongoDB server. Administrator user name : The user name of the MongoDB administrator defined when configuring the MongoDB. The default MongoDB administrator is sametimeUser. Password : The password for the the MongoDB administrator defined when configuring the MongoDB. The default MongoDB password is sametime. Connection URL : A secure URL to connect to the MongoDB server. The supplied URL overrides the default MongoDB URL. LDAP : LDAP server : The host name or IP address of the LDAP server. LDAP port : The port used to communicate with the LDAP server. Bind name and password : The bind account name and password for Sametime to access LDAP. Base DN : The base location where Sametime begins a search for users and groups. TLS access : If LDAP is access using TLS, provide the port number. JWT Secret : The Base64 encoded JWT_SECRET from the Sametime deployment. If migrating from another version of Sametime, you can re-use your existing secret. If you don't have one the install program generates it. TURN server : The fully-qualified host name of a TURN server. TCP configuration : The port number used for TCP communications. The default is port number 4443. LTPA configuration : If you plan to use LTPA, generate the LTPA keys and password before running the install program. See Setting up SSO using LTPA . Parent topic: Installing Sametime","title":"Information to provide during installation"},{"location":"admin/installation_roadmap.html","text":"Installation road map The installation road map list the high-level steps for installing your product. Reviewing the high-level steps before you start the install process helps you to be prepared when prompted for information during the installation. Verify that your computer meets the minimum hardware and software requirements for installing the product. Verify that your user ID meets the access requirements for installing and configuring the product. Install MongoDB as the Sametime database. Sametime uses MongoDB to store configuration information, contact lists, chat history and reserved meeting rooms. Setup and configure LDAP directory to authenticate and store user information. Setup a Docker or Kubernetes environment. Install the Sametime Premium or Sametime product. Configure the client. Manage clients with policies. Configure servers and open ports for mobile users. Item More information System requirements HCL Sametime\u00ae System Requirements Planning - Planning the network topology and connectivity - Sametime client preferences - Sametime client configuration options | |Installing|- Installing the MongoDB - Installing Sametime - Installing Sametime clients - Configuring LDAP | |Clustering and high availability|- Clustering and high availability | |Migrating and upgrading|- Migrating from older Sametime versions - Upgrading from Meetings 11.5 and 11.6 | Parent topic: Installing","title":"Installation road map"},{"location":"admin/installation_roadmap.html#installation_roadmap","text":"The installation road map list the high-level steps for installing your product. Reviewing the high-level steps before you start the install process helps you to be prepared when prompted for information during the installation. Verify that your computer meets the minimum hardware and software requirements for installing the product. Verify that your user ID meets the access requirements for installing and configuring the product. Install MongoDB as the Sametime database. Sametime uses MongoDB to store configuration information, contact lists, chat history and reserved meeting rooms. Setup and configure LDAP directory to authenticate and store user information. Setup a Docker or Kubernetes environment. Install the Sametime Premium or Sametime product. Configure the client. Manage clients with policies. Configure servers and open ports for mobile users. Item More information System requirements HCL Sametime\u00ae System Requirements Planning - Planning the network topology and connectivity - Sametime client preferences - Sametime client configuration options | |Installing|- Installing the MongoDB - Installing Sametime - Installing Sametime clients - Configuring LDAP | |Clustering and high availability|- Clustering and high availability | |Migrating and upgrading|- Migrating from older Sametime versions - Upgrading from Meetings 11.5 and 11.6 | Parent topic: Installing","title":"Installation road map"},{"location":"admin/installation_sametime.html","text":"Installing Sametime You can install Sametime Premium and Sametime in a Docker or Kubernetes container environment. Information to provide during installation During the install process, you are prompted for information used to tailor the installation for your environment. Installing Sametime in a Kubernetes environment A Sametime deployment on Kubernetes requires a properly configured cluster consisting of a minimum of four nodes: a control plane and three worker nodes with an Ingress Controller. Installing Sametime in a Docker environment Parent topic: Installing","title":"Installing Sametime"},{"location":"admin/installation_sametime.html#installation_sametime","text":"You can install Sametime Premium and Sametime in a Docker or Kubernetes container environment. Information to provide during installation During the install process, you are prompted for information used to tailor the installation for your environment. Installing Sametime in a Kubernetes environment A Sametime deployment on Kubernetes requires a properly configured cluster consisting of a minimum of four nodes: a control plane and three worker nodes with an Ingress Controller. Installing Sametime in a Docker environment Parent topic: Installing","title":"Installing Sametime"},{"location":"admin/installation_sametime_docker.html","text":"Installing Sametime in a Docker environment Installing Docker This section provides information on installing Docker. Installing Sametime on Docker Installing Sametime involves starting the install procedure and specifying configuration information for the server, such as the credentials, the ports, MongoDB, and LDAP that the server uses. Defining extra hosts for Docker deployments Extra hosts for Docker deployments can be defined when there are network or DNS issues. Defining extra hosts is optional and not a requirement to ensure the connections are successful. Parent topic: Installing Sametime","title":"Installing Sametime in a Docker environment {#installation_sametime_docker .concept}"},{"location":"admin/installation_sametime_docker.html#installation_sametime_docker","text":"Installing Docker This section provides information on installing Docker. Installing Sametime on Docker Installing Sametime involves starting the install procedure and specifying configuration information for the server, such as the credentials, the ports, MongoDB, and LDAP that the server uses. Defining extra hosts for Docker deployments Extra hosts for Docker deployments can be defined when there are network or DNS issues. Defining extra hosts is optional and not a requirement to ensure the connections are successful. Parent topic: Installing Sametime","title":"Installing Sametime in a Docker environment"},{"location":"admin/installation_sametime_kubernetes.html","text":"Installing Sametime in a Kubernetes environment A Sametime deployment on Kubernetes requires a properly configured cluster consisting of a minimum of four nodes: a control plane and three worker nodes with an Ingress Controller. The following white papers are available to review this setup for GKE (Google), AWS (Amazon) and on-premise configurations. Use these white papers for additional details on the installation and configuration steps for Kubernetes. HCL Sametime 11.6 - Full stack Kubernetes Implementation Deploying HCL Sametime Meetings on AWS Elastic Kubernetes Service (EKS) Deploying Sametime 12 on Google Kubernetes Engine References to the cluster.yaml file in the white papers are based on Sametime 11.6. For later Sametime versions, the file is located in the Sametime installation package directory: install_package_directory/ /kubernetes/stack/eks/cluster.yaml. See the HCL Sametime\u00ae System Requirements document for support Kubernetes and Helm versions. After the Kubernetes cluster is built, complete the following tasks to deploy Sametime. Prepare the network Load the Sametime image to Docker Creating the persistent volume Verify the service Note: The helm charts and templates provided were tested with 1.22. Later versions of Kubernetes might not be compatible. Preparing the network This section provides information on the network considerations needed to install Kubernetes. Loading the Sametime image to Docker This section provides information on the network considerations needed to install Kubernetes. Preparing the deployment This section provides information to configure secrets for deployment. Enabling multiple videobridges This section covers the steps on how to enable multiple videobridges. Below are a list of several secrets defined in the sametime-global-secrets resource. There are others not mentioned here as well. Refer to Managing secrets in Kubernetes for the basic guidelines regarding post-installation configuration. Creating the persistent volume This section provides information to create the persistent volume. Deploying Sametime to Kubernetes cluster This section provides information to deploy Sametime to the Kubernetes cluster. Installing Ingress When running Kubernetes on-prem, managing load-balancing must be considered for Sametime Meetings and Web Chat. Both of these Sametime features require the addition of an ingress controller. Verifying the service This section provides information to verify if you are able to join a meeting, see and hear the other participants. Installing Prometheus Promethus provides monitoring on the system. It is used in the auto-scaling feature, but can also be used a monitor your system usage and performance. Parent topic: Installing Sametime","title":"Installing Sametime in a Kubernetes environment"},{"location":"admin/installation_sametime_kubernetes.html#installation_sametime_kubernetes","text":"A Sametime deployment on Kubernetes requires a properly configured cluster consisting of a minimum of four nodes: a control plane and three worker nodes with an Ingress Controller. The following white papers are available to review this setup for GKE (Google), AWS (Amazon) and on-premise configurations. Use these white papers for additional details on the installation and configuration steps for Kubernetes. HCL Sametime 11.6 - Full stack Kubernetes Implementation Deploying HCL Sametime Meetings on AWS Elastic Kubernetes Service (EKS) Deploying Sametime 12 on Google Kubernetes Engine References to the cluster.yaml file in the white papers are based on Sametime 11.6. For later Sametime versions, the file is located in the Sametime installation package directory: install_package_directory/ /kubernetes/stack/eks/cluster.yaml. See the HCL Sametime\u00ae System Requirements document for support Kubernetes and Helm versions. After the Kubernetes cluster is built, complete the following tasks to deploy Sametime. Prepare the network Load the Sametime image to Docker Creating the persistent volume Verify the service Note: The helm charts and templates provided were tested with 1.22. Later versions of Kubernetes might not be compatible. Preparing the network This section provides information on the network considerations needed to install Kubernetes. Loading the Sametime image to Docker This section provides information on the network considerations needed to install Kubernetes. Preparing the deployment This section provides information to configure secrets for deployment. Enabling multiple videobridges This section covers the steps on how to enable multiple videobridges. Below are a list of several secrets defined in the sametime-global-secrets resource. There are others not mentioned here as well. Refer to Managing secrets in Kubernetes for the basic guidelines regarding post-installation configuration. Creating the persistent volume This section provides information to create the persistent volume. Deploying Sametime to Kubernetes cluster This section provides information to deploy Sametime to the Kubernetes cluster. Installing Ingress When running Kubernetes on-prem, managing load-balancing must be considered for Sametime Meetings and Web Chat. Both of these Sametime features require the addition of an ingress controller. Verifying the service This section provides information to verify if you are able to join a meeting, see and hear the other participants. Installing Prometheus Promethus provides monitoring on the system. It is used in the auto-scaling feature, but can also be used a monitor your system usage and performance. Parent topic: Installing Sametime","title":"Installing Sametime in a Kubernetes environment"},{"location":"admin/installing.html","text":"Installing This section provides information on installing and configuring the servers for HCL Sametime and HCL Sametime Premium. Installation road map The installation road map list the high-level steps for installing your product. Reviewing the high-level steps before you start the install process helps you to be prepared when prompted for information during the installation. Installing the MongoDB The MongoDB Community Server can be downloaded from the MongoDB website. You can install MongDB on Windows and Linux platforms. Installing Sametime You can install Sametime Premium and Sametime in a Docker or Kubernetes container environment. Installing Sametime clients Sametime clients can be installed on a Windows or Mac machines. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Installing {#installing .task}"},{"location":"admin/installing.html#installing","text":"This section provides information on installing and configuring the servers for HCL Sametime and HCL Sametime Premium. Installation road map The installation road map list the high-level steps for installing your product. Reviewing the high-level steps before you start the install process helps you to be prepared when prompted for information during the installation. Installing the MongoDB The MongoDB Community Server can be downloaded from the MongoDB website. You can install MongDB on Windows and Linux platforms. Installing Sametime You can install Sametime Premium and Sametime in a Docker or Kubernetes container environment. Installing Sametime clients Sametime clients can be installed on a Windows or Mac machines. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Installing"},{"location":"admin/installing_connectclient_slientinstall.html","text":"Installing the Connect client in silent mode The Connect client can be installed on a user's machine either by sending the install package to the user or by pushing the installation to the user's machine. In either case, the installation is an silent install. Silent install is available only on the Windows platform. The batch file used to start the install process is setup.bat. This batch file contains the setup.exe command with default parameter values to run the installer. You can modify the parameters. The following table shows the command parameters and default values. Parameter Description install.log The name of the log file created by the installer. The file is created in the same directory as the installer. INSTALLDIR=installation_directory The full path of the installation directory. STSILENTINIFILE=ini_file_name Name of the configuration INI file. The default is silentinstall.ini . STSILENTINSTALL=TRUE Indicates the install is a silent install. This value must be TRUE for silent execution. The setup.bat file contains several different commands that can be used to perform different installation functions. Some of the commands are commented out by default, you can remove the comment tag and updated if the function is needed. Detailed explanations are included in the setup.bat file. The silentinstall.ini file contains configuration parameters for the Connect client. The settings are used to populate the community-config.xml file with server connection information and other parameters required by the installer. The following table describes the configuration parameters. Parameter Description LAPAGREE=NO Specify whether to accept the license agreement. This value must be YES . The default value is NO . You must change this parameter to YES for silent install to work. | |CREATECOMMUNITYTEMPLATE=true|Specifies whether community properties such as STSERVERNAME and STCOMMUNITYNAME are ignored. When set to false, the community-config.xml is not created in the installation_directory\\rcp\\deploy folder. All community-config properties should be put in the plugin_customization.ini in the installation_media_root_directory-root_directory\\deploy directory. If using a custom plugin_customization.ini, ensure that the value is set to true . | |STSERVERNAME=stservername.domain.com|The fully qualified host name of the Sametime server. Normally this is the same as the home server specified in the person document.| |STCOMMUNITYNAME= community_name|The name of the community.| |STSERVERPORT=1533|The IP port number of the Sametime server.| |STSENDKEEPALIVE=true|Flag for sending keep-alive signal.| |STKEEPALIVETIME=60|Indicates how often to check the connectivity between the client and server, allowing timely notification if disconnected. The default is 60 seconds.| |STCONNECTIONTYPE75=direct|The type of connection. Valid values are: direct, useBrowserSettings, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, https-proxy, and reverse-proxy. The default value is direct.| |STPROXYHOST=proxy_host_name|The host name of the proxy server. If you are not using a proxy, leave this field blank.| |STPROXYPORT=proxy_port_number|The port number of the proxy sever. If you are not using a proxy, leave this field blank.| |STRESOLVELOCALY75=|The proxy resolves local flag . Specify true or false.| |STPROXYUSERNAME=|The user name for the proxy server. If you are not using a proxy, leave this field blank.| |STPROXYPASSWORD=|The password for the proxy server. If you are not using a proxy, leave this field blank.| | STCOUNTRYLANG=en |The language to be used by the Connect client. Specify the language code for the language to be used. The default vlaue is English. If a value is not specified, the client computer's default language is used. cs Czech da Danish de German el Greek en English es Spanish fi Finnish fr French hu Hungarian it Italian ja Japanese ko Korean nl Dutch no Norwegian pl Polish pt Portuguese (Portugal) pt_BR Portuguese (Brazil) ru Russian sv Swedish tr Turkish zh Chinese (simplified) zh_TW Chinese (traditional) | |STAUTHSERVERURL=|The URL of the authorization server for the SSO token log in. If you are not using an authorization server, leave this field blank.| |STLOGINBYTOKEN=false|Specify whether to use the Login By Token flag. The default value is false.| |STUSEAUTHSERVER=false|Specify whether to use the authorization server flag. The default is false.| |STLOGINATSTARTUP=false|Specify whether the client logins at startup. The default is false.| |STUNINSTALL75=1|Specify whether to uninstall an existing 7.5 client if present.1 : Uninstall 7.5.x client if found 0 : Leave 7.5.x client installed | |STUNINSTALLPRE75=1|Specify whether to uninstall an existing pre-7.5 client if present.1 : Uninstall pre-7.5 client if found. This is the default value. 0 : Leave pre-7.5 client installed | After you have edited the files to tailor the installer for your specific requirements, you can distribute the files to your end users. If the users are to run the installer, instruct them users to copy both of the files to the same directory and then execute setup.bat to install Sametime Connect. Download the client installation package. Copy the setup.bat and the silentinstall.ini files from the root of the download, and then update the files to meet your requirements. Update the setup.bat file if necessary. Update the silentinstall.ini file to match the environment. Send or copy the updated files to the user's computer. To start the install, run the following command: setup.bat -silentinstall.ini Parent topic: Installing Sametime clients","title":"Installing the Connect client in silent mode {#installing_connectclient_silentinstall .task}"},{"location":"admin/installing_connectclient_slientinstall.html#installing_connectclient_silentinstall","text":"The Connect client can be installed on a user's machine either by sending the install package to the user or by pushing the installation to the user's machine. In either case, the installation is an silent install. Silent install is available only on the Windows platform. The batch file used to start the install process is setup.bat. This batch file contains the setup.exe command with default parameter values to run the installer. You can modify the parameters. The following table shows the command parameters and default values. Parameter Description install.log The name of the log file created by the installer. The file is created in the same directory as the installer. INSTALLDIR=installation_directory The full path of the installation directory. STSILENTINIFILE=ini_file_name Name of the configuration INI file. The default is silentinstall.ini . STSILENTINSTALL=TRUE Indicates the install is a silent install. This value must be TRUE for silent execution. The setup.bat file contains several different commands that can be used to perform different installation functions. Some of the commands are commented out by default, you can remove the comment tag and updated if the function is needed. Detailed explanations are included in the setup.bat file. The silentinstall.ini file contains configuration parameters for the Connect client. The settings are used to populate the community-config.xml file with server connection information and other parameters required by the installer. The following table describes the configuration parameters. Parameter Description LAPAGREE=NO Specify whether to accept the license agreement. This value must be YES . The default value is NO . You must change this parameter to YES for silent install to work. | |CREATECOMMUNITYTEMPLATE=true|Specifies whether community properties such as STSERVERNAME and STCOMMUNITYNAME are ignored. When set to false, the community-config.xml is not created in the installation_directory\\rcp\\deploy folder. All community-config properties should be put in the plugin_customization.ini in the installation_media_root_directory-root_directory\\deploy directory. If using a custom plugin_customization.ini, ensure that the value is set to true . | |STSERVERNAME=stservername.domain.com|The fully qualified host name of the Sametime server. Normally this is the same as the home server specified in the person document.| |STCOMMUNITYNAME= community_name|The name of the community.| |STSERVERPORT=1533|The IP port number of the Sametime server.| |STSENDKEEPALIVE=true|Flag for sending keep-alive signal.| |STKEEPALIVETIME=60|Indicates how often to check the connectivity between the client and server, allowing timely notification if disconnected. The default is 60 seconds.| |STCONNECTIONTYPE75=direct|The type of connection. Valid values are: direct, useBrowserSettings, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, https-proxy, and reverse-proxy. The default value is direct.| |STPROXYHOST=proxy_host_name|The host name of the proxy server. If you are not using a proxy, leave this field blank.| |STPROXYPORT=proxy_port_number|The port number of the proxy sever. If you are not using a proxy, leave this field blank.| |STRESOLVELOCALY75=|The proxy resolves local flag . Specify true or false.| |STPROXYUSERNAME=|The user name for the proxy server. If you are not using a proxy, leave this field blank.| |STPROXYPASSWORD=|The password for the proxy server. If you are not using a proxy, leave this field blank.| | STCOUNTRYLANG=en |The language to be used by the Connect client. Specify the language code for the language to be used. The default vlaue is English. If a value is not specified, the client computer's default language is used. cs Czech da Danish de German el Greek en English es Spanish fi Finnish fr French hu Hungarian it Italian ja Japanese ko Korean nl Dutch no Norwegian pl Polish pt Portuguese (Portugal) pt_BR Portuguese (Brazil) ru Russian sv Swedish tr Turkish zh Chinese (simplified) zh_TW Chinese (traditional) | |STAUTHSERVERURL=|The URL of the authorization server for the SSO token log in. If you are not using an authorization server, leave this field blank.| |STLOGINBYTOKEN=false|Specify whether to use the Login By Token flag. The default value is false.| |STUSEAUTHSERVER=false|Specify whether to use the authorization server flag. The default is false.| |STLOGINATSTARTUP=false|Specify whether the client logins at startup. The default is false.| |STUNINSTALL75=1|Specify whether to uninstall an existing 7.5 client if present.1 : Uninstall 7.5.x client if found 0 : Leave 7.5.x client installed | |STUNINSTALLPRE75=1|Specify whether to uninstall an existing pre-7.5 client if present.1 : Uninstall pre-7.5 client if found. This is the default value. 0 : Leave pre-7.5 client installed | After you have edited the files to tailor the installer for your specific requirements, you can distribute the files to your end users. If the users are to run the installer, instruct them users to copy both of the files to the same directory and then execute setup.bat to install Sametime Connect. Download the client installation package. Copy the setup.bat and the silentinstall.ini files from the root of the download, and then update the files to meet your requirements. Update the setup.bat file if necessary. Update the silentinstall.ini file to match the environment. Send or copy the updated files to the user's computer. To start the install, run the following command: setup.bat -silentinstall.ini Parent topic: Installing Sametime clients","title":"Installing the Connect client in silent mode"},{"location":"admin/installing_docker.html","text":"Installing Docker This section provides information on installing Docker. All commands provided require running as ROOT or SUDO access. If not running as root user, preface all commands with sudo. Before installing Docker Compose, make sure Docker Engine is installed either locally or remote, depending on the environment. On Linux systems, install the Docker Engine for your OS provided in Install Docker Engine documentation. If you are following the Docker documentation to install the Docker Engine, docker-compose must also be installed. The following is an example of the install Docker Engine on CentrOS based on Docker documentation to support docker-compose commands used when installing Sametime. The example is for demonstration only. Note: CentOS ships with Docker installed, but not the most recent which is required. Install supported Docker version. See the HCL Sametime\u00ae System Requirements for details. Uninstall old versions using the yum remove command provided in the Docker Engine documentation. Install Docker Engine using a repository. First, install the yum-utils package which provides the yum-config-manager utility. sudo yum install -y yum-utils Then set up the stable repository. sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo Install the latest version of Docker Engine and container. yum install docker-ce docker-ce-cli containerd.io At this point, Docker is installed but might not be started. Start Docker. systemctl start docker Verify that Docker Engine is installed correctly by running the hello-world image. docker run hello-world Note: If you right click links like Install Docker Compose and choose Open link in Tab you can complete these tasks and then close that tab to start the next step. Install Docker Compose following steps and commands provided in Install Docker Compose topic in the Docker documentation. Docker Compose 1.29 or higher is required. The following is an example of the install Docker Engine on CentrOS based on Docker documentation. The example is for demostration only. Install Compose on Linux systems. curl -L \"https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Apply executable permissions to the binary. chmod +x /usr/local/bin/docker-compose Test the installation. docker-compose --version After the install is complete, use the following Linux shell command to confirm that Docker is running, which returns the docker information. docker info If Docker is not running, an error message is displayed indicating that a connection to Docker cannot be completed. To start the Docker service, run the following command. service docker start Parent topic: Installing Sametime in a Docker environment","title":"Installing Docker {#installing_docker .task}"},{"location":"admin/installing_docker.html#installing_docker","text":"This section provides information on installing Docker. All commands provided require running as ROOT or SUDO access. If not running as root user, preface all commands with sudo. Before installing Docker Compose, make sure Docker Engine is installed either locally or remote, depending on the environment. On Linux systems, install the Docker Engine for your OS provided in Install Docker Engine documentation. If you are following the Docker documentation to install the Docker Engine, docker-compose must also be installed. The following is an example of the install Docker Engine on CentrOS based on Docker documentation to support docker-compose commands used when installing Sametime. The example is for demonstration only. Note: CentOS ships with Docker installed, but not the most recent which is required. Install supported Docker version. See the HCL Sametime\u00ae System Requirements for details. Uninstall old versions using the yum remove command provided in the Docker Engine documentation. Install Docker Engine using a repository. First, install the yum-utils package which provides the yum-config-manager utility. sudo yum install -y yum-utils Then set up the stable repository. sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo Install the latest version of Docker Engine and container. yum install docker-ce docker-ce-cli containerd.io At this point, Docker is installed but might not be started. Start Docker. systemctl start docker Verify that Docker Engine is installed correctly by running the hello-world image. docker run hello-world Note: If you right click links like Install Docker Compose and choose Open link in Tab you can complete these tasks and then close that tab to start the next step. Install Docker Compose following steps and commands provided in Install Docker Compose topic in the Docker documentation. Docker Compose 1.29 or higher is required. The following is an example of the install Docker Engine on CentrOS based on Docker documentation. The example is for demostration only. Install Compose on Linux systems. curl -L \"https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Apply executable permissions to the binary. chmod +x /usr/local/bin/docker-compose Test the installation. docker-compose --version After the install is complete, use the following Linux shell command to confirm that Docker is running, which returns the docker information. docker info If Docker is not running, an error message is displayed indicating that a connection to Docker cannot be completed. To start the Docker service, run the following command. service docker start Parent topic: Installing Sametime in a Docker environment","title":"Installing Docker"},{"location":"admin/installing_mongodb_linux.html","text":"Installing MongoDB on Linux MongoDB can be downloaded from the MongoDB website. This topic includes the steps for installing on a CentOS and RHEL environments. For information on installing MongoDB on other operating systems, refer to Install MongoDB on the MongoDB website. If you already have MongDB installed and upgrading to MongoDB 4.4 or to the latest patch release, see the Upgrade to the Latest Revision of MongoDB document. The commands used during the install process require running as ROOT or SUDO access. If not running as root user, preface all commands with sudo. Note: In the following steps, MongoDB version 4.4 is used as an example. If you are using a different version of MongoDB, refer to the MongoDB documentation for how to issue commands for the version that you are using. Create a repository file for YUM to install MongoDB. Use the VI command to create and edit the mongodb-org-4.4.repo file. > cd /etc/yum.repos.d > vi mongodb-org-4.4.repo Note: The vi command is a screen-oriented text editor originally created for the Unix operating system. To edit the file, use Insert (I) and then copy and paste the following content: [mongodb-org-4.4] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-4.4.asc Note: When copying and pasting, ensure to include all characters. The dash (-) in the baseurl can be removed in certain scenarios. Press Esc to exit insert mode. To save and exit, use the wq command. Precede the command with a colon (:). If you receive a E212: Can\u2019t open file for writing error message, it means that a root user is not being or sudo acces is being used. If the repo URL is not available, manually download and install the rpm files. You can download load the files from the Index of RPMS download page. For example: mongodb-database-tools-100.5.1.x86_64.rpm mongodb-org-shell-4.4.9-1.el7.x86_64.rpm mongodb-org-tools-4.4.9-1.el7.x86_64.rpm mongodb-org-server-4.4.9-1.el7.x86_64.rpm mongodb-org-mongos-4.4.9-1.el7.x86_64.rpm mongodb-org-database-tools-extra-4.4.9-1.el7.x86_64.rpm mongodb-org-4.4.9-1.el7.x86_64.rpm After the download completes, install: yum localinstall mongodb-database-tools-100.5.1.x86_64.rpm -y yum localinstall -y mongodb-org-database-tools-extra-4.4.9-1.el7.x86_64.rpm yum localinstall -y mongodb-org-4.4.9-1.el7.x86_64.rpm mongodb-org-mongos-4.4.9-1.el7.x86_64.rpm mongodb-org-server-4.4.9-1.el7.x86_64.rpm mongodb-org-shell-4.4.9-1.el7.x86_64.rpm mongodb-org-tools-4.4.9-1.el7.x86_64.rpm -y Execute YUM to install the MongoDB package. >yum install mongodb-org Type y to confirm the download and installed size. Type y to accept the GPG key import. A Complete! message is displayed when the install process is finished. Verify that the MongoDB components, user, default log and data directories are created by checking if the following directories exist and are owned by mongod. /var/log/mongodb /var/lib/mongo To start the MongoDB server, enter the following command: > service mongod start To stop the MongoDB server, enter the command: > service mongod stop To verify the status of the MongoDB service, enter the command: > systemctl status mongod Configuring MongoDB for Sametime Parent topic: Installing the MongoDB","title":"Installing MongoDB on Linux"},{"location":"admin/installing_mongodb_linux.html#installing_mongodb_linux","text":"MongoDB can be downloaded from the MongoDB website. This topic includes the steps for installing on a CentOS and RHEL environments. For information on installing MongoDB on other operating systems, refer to Install MongoDB on the MongoDB website. If you already have MongDB installed and upgrading to MongoDB 4.4 or to the latest patch release, see the Upgrade to the Latest Revision of MongoDB document. The commands used during the install process require running as ROOT or SUDO access. If not running as root user, preface all commands with sudo. Note: In the following steps, MongoDB version 4.4 is used as an example. If you are using a different version of MongoDB, refer to the MongoDB documentation for how to issue commands for the version that you are using. Create a repository file for YUM to install MongoDB. Use the VI command to create and edit the mongodb-org-4.4.repo file. > cd /etc/yum.repos.d > vi mongodb-org-4.4.repo Note: The vi command is a screen-oriented text editor originally created for the Unix operating system. To edit the file, use Insert (I) and then copy and paste the following content: [mongodb-org-4.4] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-4.4.asc Note: When copying and pasting, ensure to include all characters. The dash (-) in the baseurl can be removed in certain scenarios. Press Esc to exit insert mode. To save and exit, use the wq command. Precede the command with a colon (:). If you receive a E212: Can\u2019t open file for writing error message, it means that a root user is not being or sudo acces is being used. If the repo URL is not available, manually download and install the rpm files. You can download load the files from the Index of RPMS download page. For example: mongodb-database-tools-100.5.1.x86_64.rpm mongodb-org-shell-4.4.9-1.el7.x86_64.rpm mongodb-org-tools-4.4.9-1.el7.x86_64.rpm mongodb-org-server-4.4.9-1.el7.x86_64.rpm mongodb-org-mongos-4.4.9-1.el7.x86_64.rpm mongodb-org-database-tools-extra-4.4.9-1.el7.x86_64.rpm mongodb-org-4.4.9-1.el7.x86_64.rpm After the download completes, install: yum localinstall mongodb-database-tools-100.5.1.x86_64.rpm -y yum localinstall -y mongodb-org-database-tools-extra-4.4.9-1.el7.x86_64.rpm yum localinstall -y mongodb-org-4.4.9-1.el7.x86_64.rpm mongodb-org-mongos-4.4.9-1.el7.x86_64.rpm mongodb-org-server-4.4.9-1.el7.x86_64.rpm mongodb-org-shell-4.4.9-1.el7.x86_64.rpm mongodb-org-tools-4.4.9-1.el7.x86_64.rpm -y Execute YUM to install the MongoDB package. >yum install mongodb-org Type y to confirm the download and installed size. Type y to accept the GPG key import. A Complete! message is displayed when the install process is finished. Verify that the MongoDB components, user, default log and data directories are created by checking if the following directories exist and are owned by mongod. /var/log/mongodb /var/lib/mongo To start the MongoDB server, enter the following command: > service mongod start To stop the MongoDB server, enter the command: > service mongod stop To verify the status of the MongoDB service, enter the command: > systemctl status mongod Configuring MongoDB for Sametime Parent topic: Installing the MongoDB","title":"Installing MongoDB on Linux"},{"location":"admin/installing_mongodb_windows.html","text":"Installing MongoDB on Windows MongoDB can be downloaded from the MongoDB website. This topic guides you through the steps for installing MongoDB on Windows. For additonal information on installing MongoDB on Windows, refer to Install MongoDB Community Edition on Windows tutorial. Note: In the following steps, MongoDB version 4.4 is used as an example. If you are using a different version of MongoDB, refer to the MongoDB documentation for how to issue commands for the version that you are using. Download the latest MongoDB version from the MongoDB download page. Click this link to access the download page: Download MongoDB Community Server . In the Available Download section, select the version to download. From the Platform field, select Windows From the Package field, select msi . You'll have the option to download a msi or zip file. Click Download . Navigate to the folder where MongoDB installation file was downloaded and double click the msi file. This starts the install process. Follow the MongoDB Setup Wizard to complete the install. Click Next to view the license agreement. To continue accept the license and click Next . On the Choose Setup Type window, click Complete . On the Service Configuration window, specify the following options and then click Next . Check Install MongoDB as a Service . It is required to run MongDB as a Windows service. Enable Run service as Network Service user . You can use the default values for Service , Data Directory , and Log Directory . If you modify these values, be sure to keep a note of the values. They are needed for the configuration steps. Install MongoDB Compass\u202fis optional and not required for deploying HCL Sametime. Clear the checkbox for Install MongoDB Compass and click Next . If MongoDB Compass is installed, it starts after after the install process completes. You can shutdown the MongoDB Compass application, as it is not used for HCL Sametime deployments. Click Install to complete the MongoDB installation. During the install process, you might be prompted about files that cannot be updated while the system is running. You can choose to continue and manually restart the computer later. After the install process completes, you must restart your computer. When athe install process is compete, click Finish . After the system restart, MongoDB is running as a Windows service. Verify that MongoDB installed successfully by opening the MongoDB Console. To open the console, navigate to the MongoDB installation directory and locate the bin directory. For example: C:\\Program Files\\MongoDB\\Server\\4.4\\bin. Start the mongo application. To close the console, type Exit on the command line. Configure MongoDB for HCL Sametime Parent topic: Installing the MongoDB","title":"Installing MongoDB on Windows"},{"location":"admin/installing_mongodb_windows.html#installing_mongodb_windows","text":"MongoDB can be downloaded from the MongoDB website. This topic guides you through the steps for installing MongoDB on Windows. For additonal information on installing MongoDB on Windows, refer to Install MongoDB Community Edition on Windows tutorial. Note: In the following steps, MongoDB version 4.4 is used as an example. If you are using a different version of MongoDB, refer to the MongoDB documentation for how to issue commands for the version that you are using. Download the latest MongoDB version from the MongoDB download page. Click this link to access the download page: Download MongoDB Community Server . In the Available Download section, select the version to download. From the Platform field, select Windows From the Package field, select msi . You'll have the option to download a msi or zip file. Click Download . Navigate to the folder where MongoDB installation file was downloaded and double click the msi file. This starts the install process. Follow the MongoDB Setup Wizard to complete the install. Click Next to view the license agreement. To continue accept the license and click Next . On the Choose Setup Type window, click Complete . On the Service Configuration window, specify the following options and then click Next . Check Install MongoDB as a Service . It is required to run MongDB as a Windows service. Enable Run service as Network Service user . You can use the default values for Service , Data Directory , and Log Directory . If you modify these values, be sure to keep a note of the values. They are needed for the configuration steps. Install MongoDB Compass\u202fis optional and not required for deploying HCL Sametime. Clear the checkbox for Install MongoDB Compass and click Next . If MongoDB Compass is installed, it starts after after the install process completes. You can shutdown the MongoDB Compass application, as it is not used for HCL Sametime deployments. Click Install to complete the MongoDB installation. During the install process, you might be prompted about files that cannot be updated while the system is running. You can choose to continue and manually restart the computer later. After the install process completes, you must restart your computer. When athe install process is compete, click Finish . After the system restart, MongoDB is running as a Windows service. Verify that MongoDB installed successfully by opening the MongoDB Console. To open the console, navigate to the MongoDB installation directory and locate the bin directory. For example: C:\\Program Files\\MongoDB\\Server\\4.4\\bin. Start the mongo application. To close the console, type Exit on the command line. Configure MongoDB for HCL Sametime Parent topic: Installing the MongoDB","title":"Installing MongoDB on Windows"},{"location":"admin/installing_on_docker.html","text":"Installing Sametime on Docker Installing Sametime involves starting the install procedure and specifying configuration information for the server, such as the credentials, the ports, MongoDB, and LDAP that the server uses. Download the product from the HCL Software Portal. Docker commands are used throughout the install process. All commands require running as a root user. If not running as root user, you must preface all commands with sudo. Verify that the product files downloaded and extract to the desired installation directory. Change to the installation directory and verify that the permissions are set correctly by running the following commands: # cd sametime\\_install # ls -la Where sametime_install is the installation directory. From the installation directory, run the Sametime install command. # ./install.sh The install command begins the installation of the Sametime product. Enter the information for the prompts. You are prompted to enter the following information. See Information to provide during installation If you are defining extra hosts, see Defining extra hosts for Docker deployments . After the installation is completed, the HCL Sametime services that support chat and meetings are running. Test the Sametime chat and meeting services. for details, see Testing Sametime chat and meeting clients . Parent topic: Installing Sametime in a Docker environment","title":"Installing Sametime on Docker {#installing_on_docker .task}"},{"location":"admin/installing_on_docker.html#installing_on_docker","text":"Installing Sametime involves starting the install procedure and specifying configuration information for the server, such as the credentials, the ports, MongoDB, and LDAP that the server uses. Download the product from the HCL Software Portal. Docker commands are used throughout the install process. All commands require running as a root user. If not running as root user, you must preface all commands with sudo. Verify that the product files downloaded and extract to the desired installation directory. Change to the installation directory and verify that the permissions are set correctly by running the following commands: # cd sametime\\_install # ls -la Where sametime_install is the installation directory. From the installation directory, run the Sametime install command. # ./install.sh The install command begins the installation of the Sametime product. Enter the information for the prompts. You are prompted to enter the following information. See Information to provide during installation If you are defining extra hosts, see Defining extra hosts for Docker deployments . After the installation is completed, the HCL Sametime services that support chat and meetings are running. Test the Sametime chat and meeting services. for details, see Testing Sametime chat and meeting clients . Parent topic: Installing Sametime in a Docker environment","title":"Installing Sametime on Docker"},{"location":"admin/installing_sametime_clients.html","text":"Installing Sametime clients Sametime clients can be installed on a Windows or Mac machines. Beginning with Sametime version 11, all directories and registries are HCL branded. If you are upgrading from a previous Sametime client, you must uninstall that version and then install Sametime version 11 or later. Note: For version 12, upgrades on Windows and Mac are supported from a Sametime 11 client. Upgrades from a 9.0.1 or earlier versions on Windows are not supported. If you run a version of Sametime that is not supported for upgrades, you must uninstall that version and then install Sametime 11. Installing Sametime Connect and Embedded clients on Windows This topic covers basic installation for the Sametime standalone client on Windows. Installing Sametime Connect and Embedded clients on MacOS This topic covers basic installation for the Sametime standalone client on MacOS. Installing the Connect client in silent mode The Connect client can be installed on a user's machine either by sending the install package to the user or by pushing the installation to the user's machine. In either case, the installation is an silent install. Installing Sametime iOS and Android clients You can find the latest HCL Sametime mobile clients in the Apple App Store and Google Play Store. Parent topic: Installing","title":"Installing Sametime clients {#installing_sametime_clients .task}"},{"location":"admin/installing_sametime_clients.html#installing_sametime_clients","text":"Sametime clients can be installed on a Windows or Mac machines. Beginning with Sametime version 11, all directories and registries are HCL branded. If you are upgrading from a previous Sametime client, you must uninstall that version and then install Sametime version 11 or later. Note: For version 12, upgrades on Windows and Mac are supported from a Sametime 11 client. Upgrades from a 9.0.1 or earlier versions on Windows are not supported. If you run a version of Sametime that is not supported for upgrades, you must uninstall that version and then install Sametime 11. Installing Sametime Connect and Embedded clients on Windows This topic covers basic installation for the Sametime standalone client on Windows. Installing Sametime Connect and Embedded clients on MacOS This topic covers basic installation for the Sametime standalone client on MacOS. Installing the Connect client in silent mode The Connect client can be installed on a user's machine either by sending the install package to the user or by pushing the installation to the user's machine. In either case, the installation is an silent install. Installing Sametime iOS and Android clients You can find the latest HCL Sametime mobile clients in the Apple App Store and Google Play Store. Parent topic: Installing","title":"Installing Sametime clients"},{"location":"admin/installing_sametime_connect_and_embedded.html","text":"Installing Sametime Connect and Embedded clients on Windows This topic covers basic installation for the Sametime standalone client on Windows. Before getting started, it review the client installation customization options. Customizing the client can ease your deployment. Decompress the client installation package into a temporary directory. In the temporary directory, locate and double-click SETUP.EXE. The installation process begins. When prompted, select the language to be displayed in the installation wizard windows. From the Welcome screen, click Next . On the License Agreement screen, review the license information. To continue click I accept the terms in the license agreement and then click Next . On the next screen, specify where to install the client and then click Next . The default value for the Install location field is C:\\HCL\\Sametime Connect. You can select another location, you must remember it for future tasks. Click Install to start the install process. After the install is complete, click Finish . Parent topic: Installing Sametime clients","title":"Installing Sametime Connect and Embedded clients on Windows {#installing_sametime_connect_embedded .task}"},{"location":"admin/installing_sametime_connect_and_embedded.html#installing_sametime_connect_embedded","text":"This topic covers basic installation for the Sametime standalone client on Windows. Before getting started, it review the client installation customization options. Customizing the client can ease your deployment. Decompress the client installation package into a temporary directory. In the temporary directory, locate and double-click SETUP.EXE. The installation process begins. When prompted, select the language to be displayed in the installation wizard windows. From the Welcome screen, click Next . On the License Agreement screen, review the license information. To continue click I accept the terms in the license agreement and then click Next . On the next screen, specify where to install the client and then click Next . The default value for the Install location field is C:\\HCL\\Sametime Connect. You can select another location, you must remember it for future tasks. Click Install to start the install process. After the install is complete, click Finish . Parent topic: Installing Sametime clients","title":"Installing Sametime Connect and Embedded clients on Windows"},{"location":"admin/installing_sametime_connect_and_embedded_macos.html","text":"Installing Sametime Connect and Embedded clients on MacOS This topic covers basic installation for the Sametime standalone client on MacOS. Before getting started, it review the client installation customization options. Customizing the client can ease your deployment. Decompress the client installation package into a temporary directory. In the temporary directory, locate and double-click SETUP.EXE. The installation process begins. When prompted, select the lanaguage to be displayed in the installation wizard windows. From the Welcome screen, click Next . Review the license information. To contine click I accept the terms in the license agreement and then Next . On the next screen, specify where to install the client and then click Next . The defalt value for the Install location is C:\\HCL\\Sametime Connect. You can select another location, you must remember it for future tasks. Click Install to start the install process. After the install is complete, click Finish . Parent topic: Installing Sametime clients","title":"Installing Sametime Connect and Embedded clients on MacOS {#installing_sametime_connect_and_embedded_macos .task}"},{"location":"admin/installing_sametime_connect_and_embedded_macos.html#installing_sametime_connect_and_embedded_macos","text":"This topic covers basic installation for the Sametime standalone client on MacOS. Before getting started, it review the client installation customization options. Customizing the client can ease your deployment. Decompress the client installation package into a temporary directory. In the temporary directory, locate and double-click SETUP.EXE. The installation process begins. When prompted, select the lanaguage to be displayed in the installation wizard windows. From the Welcome screen, click Next . Review the license information. To contine click I accept the terms in the license agreement and then Next . On the next screen, specify where to install the client and then click Next . The defalt value for the Install location is C:\\HCL\\Sametime Connect. You can select another location, you must remember it for future tasks. Click Install to start the install process. After the install is complete, click Finish . Parent topic: Installing Sametime clients","title":"Installing Sametime Connect and Embedded clients on MacOS"},{"location":"admin/installing_sametime_ios_and_android.html","text":"Installing Sametime iOS and Android clients You can find the latest HCL Sametime mobile clients in the Apple App Store and Google Play Store. Refer to the Sametime mobile documentation for more information on mobile clients. HCL Sametime iOS Documentation . HCL Sametime Android Documentation . Parent topic: Installing Sametime clients","title":"Installing Sametime iOS and Android clients {#installing_sametime_ios_and_androidtask_js5_2mv_dlb .task}"},{"location":"admin/installing_sametime_ios_and_android.html#installing_sametime_ios_and_androidtask_js5_2mv_dlb","text":"You can find the latest HCL Sametime mobile clients in the Apple App Store and Google Play Store. Refer to the Sametime mobile documentation for more information on mobile clients. HCL Sametime iOS Documentation . HCL Sametime Android Documentation . Parent topic: Installing Sametime clients","title":"Installing Sametime iOS and Android clients"},{"location":"admin/java_keystore.html","text":"How to create a new Java Keystore with a Third Party certificate Initially from the Installation and Administration guide in deploying a Sametime Proxy Server 11 there's a section which describes on how to automatically create a new self-signed certificate for SSL without any configuration changes. As you know using a self-signed certificate - it is possible that some web browsers/mobile devices may have problems with this certificate and you will have to create exceptions with the browsers/mobile devices. The question is how are we going to replace the self-signed certificate with a qualified certificate from a Certificate Authority (like GeoTrust, GoDaddy, etc)? The steps are not so complicated and as a Domino Administrator you have an advantage in following the steps since it is almost the same flow with OpenSSL/Kyrtool. Reference: https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0074599 Instructions Suppose you already have Sametime Community Server and Sametime Proxy Server installed then your default program directory of the Proxy Server is \"example: C:\\sametimeproxy\" (described in the instructions document). Since Sametime version 11, the Proxy Server is now based on Apache Tomcat which reduces hardware requirements and much simplified installation. Compared to Domino, Sametime 11 is using keytool instead of kyrtool file, so we will need the \"keytool.exe\" which is is located in \"C:\\sametimeproxy\\openjdk\\bin\". Note: The following examples assume Windows OS. Open a command prompt and navigate to the folder C:\\sametimeproxy\\openjdk\\bin. Now we will create a new Certificate or Java Keystore using the \"keytool.exe\" file, where we will then import the necessary certificates. In our example we will name the keystore as \"sametime.keystore\", then directly create the keystore under the \"C:\\sametimeproxy\\conf\" folder or any folder of your choice. keytool -genkey -alias tomcat -keyalg RSA -keystore C:\\sametimeproxy\\conf\\sametime.keystore Note: In here you will be prompted to create a new password for the keystore and re-enter it to confirm the password. Fill in the basic information about the keystore. In the \"First & Last Name\", use the FQDN of the Proxy Server \"ie: proxy.hcl.com\" and complete the other data such as Company, City, etc. After creating the keystore we will create the Certificate Signing Request (CSR). This file is going to be used by the Certificate Authority to create a certificate that will identify your website. keytool -certreq -keyalg RSA -alias tomcat -file C:\\sametimeproxy\\conf\\streq.csr -keystore C:\\sametimeproxy\\conf\\sametime.keystore Submit the generated CSR to the Certificate Authority and in return you will receive the certificates. Once you have the certificates it must be installed to the keystore where the CSR was created. Import the root & intermediate certificates into the keystore, one at a time. Make sure you specify the correct alias of \"root\" and \"intermediate\" respectively. keytool -import -trustcacerts -alias root -file <PATH>\\root.crt -keystore C:\\sametimeproxy\\conf\\sametime.keystore keytool -import -trustcacerts -alias intermediate -file <PATH>\\intermediate.crt -keystore C:\\sametimeproxy\\conf\\sametime.keystore Now for the Server/Site certificate ensure when importing the cert -- you use the same alias as the private key so it associates them together. The alias here must match the alias of the private key in the first command where we created the Java Keystore - in our case the alias is \"tomcat\". keytool -import -trustcacerts -alias tomcat -file <PATH>\\mydomain.crt -keystore C:\\sametimeproxy\\conf\\sametime.keystore The keystore is now complete and can be used for the Sametime Proxy Server. In order to change the default certificate, you need to configure the SSL Connector. Open the C:\\sametimeproxy\\conf\\server.xml file then find the connector that should work for the new keystore and uncomment it if necessary. In the connector configuration, specify the correct file location and keystore password. Example: < Connector protocol=\u201dorg.apache.coyote.http11.Http11NioProtocol\u201d port=\u201d8443\u2033 maxThreads=\u201d200\u2033 scheme=\u201dhttps\u201d secure=\u201dtrue\u201d SSLEnabled=\u201dtrue\u201d keystoreFile=\u201dconf/sametime.keystore\u201d keystorePass=\u201d<password>\u201d clientAuth=\u201dfalse\u201d sslProtocol=\u201dTLS\u201d/> Restart the Sametime Proxy Server and open chat in your web browser to confirm. Parent topic: Securing connections","title":"How to create a new Java Keystore with a Third Party certificate {#java_keystore .task}"},{"location":"admin/java_keystore.html#java_keystore","text":"Initially from the Installation and Administration guide in deploying a Sametime Proxy Server 11 there's a section which describes on how to automatically create a new self-signed certificate for SSL without any configuration changes. As you know using a self-signed certificate - it is possible that some web browsers/mobile devices may have problems with this certificate and you will have to create exceptions with the browsers/mobile devices. The question is how are we going to replace the self-signed certificate with a qualified certificate from a Certificate Authority (like GeoTrust, GoDaddy, etc)? The steps are not so complicated and as a Domino Administrator you have an advantage in following the steps since it is almost the same flow with OpenSSL/Kyrtool. Reference: https://support.hcltechsw.com/csm?id=kb_article&sysparm_article=KB0074599 Instructions Suppose you already have Sametime Community Server and Sametime Proxy Server installed then your default program directory of the Proxy Server is \"example: C:\\sametimeproxy\" (described in the instructions document). Since Sametime version 11, the Proxy Server is now based on Apache Tomcat which reduces hardware requirements and much simplified installation. Compared to Domino, Sametime 11 is using keytool instead of kyrtool file, so we will need the \"keytool.exe\" which is is located in \"C:\\sametimeproxy\\openjdk\\bin\". Note: The following examples assume Windows OS. Open a command prompt and navigate to the folder C:\\sametimeproxy\\openjdk\\bin. Now we will create a new Certificate or Java Keystore using the \"keytool.exe\" file, where we will then import the necessary certificates. In our example we will name the keystore as \"sametime.keystore\", then directly create the keystore under the \"C:\\sametimeproxy\\conf\" folder or any folder of your choice. keytool -genkey -alias tomcat -keyalg RSA -keystore C:\\sametimeproxy\\conf\\sametime.keystore Note: In here you will be prompted to create a new password for the keystore and re-enter it to confirm the password. Fill in the basic information about the keystore. In the \"First & Last Name\", use the FQDN of the Proxy Server \"ie: proxy.hcl.com\" and complete the other data such as Company, City, etc. After creating the keystore we will create the Certificate Signing Request (CSR). This file is going to be used by the Certificate Authority to create a certificate that will identify your website. keytool -certreq -keyalg RSA -alias tomcat -file C:\\sametimeproxy\\conf\\streq.csr -keystore C:\\sametimeproxy\\conf\\sametime.keystore Submit the generated CSR to the Certificate Authority and in return you will receive the certificates. Once you have the certificates it must be installed to the keystore where the CSR was created. Import the root & intermediate certificates into the keystore, one at a time. Make sure you specify the correct alias of \"root\" and \"intermediate\" respectively. keytool -import -trustcacerts -alias root -file <PATH>\\root.crt -keystore C:\\sametimeproxy\\conf\\sametime.keystore keytool -import -trustcacerts -alias intermediate -file <PATH>\\intermediate.crt -keystore C:\\sametimeproxy\\conf\\sametime.keystore Now for the Server/Site certificate ensure when importing the cert -- you use the same alias as the private key so it associates them together. The alias here must match the alias of the private key in the first command where we created the Java Keystore - in our case the alias is \"tomcat\". keytool -import -trustcacerts -alias tomcat -file <PATH>\\mydomain.crt -keystore C:\\sametimeproxy\\conf\\sametime.keystore The keystore is now complete and can be used for the Sametime Proxy Server. In order to change the default certificate, you need to configure the SSL Connector. Open the C:\\sametimeproxy\\conf\\server.xml file then find the connector that should work for the new keystore and uncomment it if necessary. In the connector configuration, specify the correct file location and keystore password. Example: < Connector protocol=\u201dorg.apache.coyote.http11.Http11NioProtocol\u201d port=\u201d8443\u2033 maxThreads=\u201d200\u2033 scheme=\u201dhttps\u201d secure=\u201dtrue\u201d SSLEnabled=\u201dtrue\u201d keystoreFile=\u201dconf/sametime.keystore\u201d keystorePass=\u201d<password>\u201d clientAuth=\u201dfalse\u201d sslProtocol=\u201dTLS\u201d/> Restart the Sametime Proxy Server and open chat in your web browser to confirm. Parent topic: Securing connections","title":"How to create a new Java Keystore with a Third Party certificate"},{"location":"admin/ldap.html","text":"LDAP An LDAP directory is needed for Sametime user authentication. The LDAP server must be running before deploying Sametime. System requirements Sametime works with V3-compliant LDAP servers. Performance LDAP performance is critical to a successful deployment. Sametime is going to put a heavy load on LDAP. Consider the performance requirements of all Sametime LDAP traffic: Client lookups Authentication Contact list management Invitations to meetings Business card features Mobile clients Part of your deployment plan may include adding more cluster members to the LDAP cluster. To minimize the burden on LDAP, use minimal search filters wherever possible. Log in choices such as name, email address, employee ID, and so on, create longer search filters and greater performance loads on LDAP. When planning for LDAP, don't forget Single Sign-On (SSO). Talk to your company's application teams about SSO. Propose a standard way that you allow people to log in to keep logins simple and minimal. All applications should utilize LDAP in the same way. If applications have different search filters, then this creates search problems and authentication problems. Mail attribute Sametime requires the LDAP mail attribute in each person record. The mail attribute provides performance advantages since translation between attributes is not required; it also provides consistency and integrity by using a common and well-understood attribute. This attribute is not required for anonymous (guest) users. The attribute must be a unique string, which preferably follows the syntax and length restrictions of email addresses. In addition, the mail attribute must be populated for every user to support audio and video communications. The mail attribute is not used for email purposes, and does not have to be assigned as a user name for logging into Sametime. Instead, it serves as a common attribute between the various Sametime subsystems, such as Calendar Integration, Business Cards, LDAP, and REST APIs. Multiple directory support Multiple directories are supported with the following restrictions: Groups may only contain members present in the same directory server and base DN specified in the LDAP Server document. Sametime does not support mixed groups at this time. Multiple replicas of the same directory in the stconfig.nsf database are not supported. For effective load balancing, you should route LDAP traffic through a load balancer. If the browse feature is enabled on the server, certain features such as LDAP time-outs or the maximum number of search results returned may need to be disabled. If you use multiple LDAP repositories, you must ensure that the base entries do not overlap, as that causes problems when Secure Socket Layer (SSL) is enabled. For example, the following base entries have a field in common, so they overlap: o=renovations o=sales,o=renovations These base entries use different fields and are acceptable: o=renovations,c=us o=sales Contact lists Sametime might experience difficulties when users include large public groups in their contact lists. To avoid problems, limit the size of public groups used with Sametime to 1000 users. Upgrade considerations If you are considering moving from a native Domino directory to an LDAP directory you need to convert the user\u2019s names in the vpuserinfo.nsf to LDAP format. This is done using the Sametime Name Conversion utility. Best Practices The whitepaper Best Practices for using LDAP with Sametime contains an overview of LDAP components and describes how the Sametime Community Server works with LDAP to provide authentication, name look-ups, and name resolution. The article describes best practices for creating search filters, setting sametime.ini parameters, and enhancing Sametime and LDAP performance. Parent topic: Prerequistes","title":"LDAP"},{"location":"admin/ldap.html#ldap","text":"An LDAP directory is needed for Sametime user authentication. The LDAP server must be running before deploying Sametime. System requirements Sametime works with V3-compliant LDAP servers. Performance LDAP performance is critical to a successful deployment. Sametime is going to put a heavy load on LDAP. Consider the performance requirements of all Sametime LDAP traffic: Client lookups Authentication Contact list management Invitations to meetings Business card features Mobile clients Part of your deployment plan may include adding more cluster members to the LDAP cluster. To minimize the burden on LDAP, use minimal search filters wherever possible. Log in choices such as name, email address, employee ID, and so on, create longer search filters and greater performance loads on LDAP. When planning for LDAP, don't forget Single Sign-On (SSO). Talk to your company's application teams about SSO. Propose a standard way that you allow people to log in to keep logins simple and minimal. All applications should utilize LDAP in the same way. If applications have different search filters, then this creates search problems and authentication problems. Mail attribute Sametime requires the LDAP mail attribute in each person record. The mail attribute provides performance advantages since translation between attributes is not required; it also provides consistency and integrity by using a common and well-understood attribute. This attribute is not required for anonymous (guest) users. The attribute must be a unique string, which preferably follows the syntax and length restrictions of email addresses. In addition, the mail attribute must be populated for every user to support audio and video communications. The mail attribute is not used for email purposes, and does not have to be assigned as a user name for logging into Sametime. Instead, it serves as a common attribute between the various Sametime subsystems, such as Calendar Integration, Business Cards, LDAP, and REST APIs. Multiple directory support Multiple directories are supported with the following restrictions: Groups may only contain members present in the same directory server and base DN specified in the LDAP Server document. Sametime does not support mixed groups at this time. Multiple replicas of the same directory in the stconfig.nsf database are not supported. For effective load balancing, you should route LDAP traffic through a load balancer. If the browse feature is enabled on the server, certain features such as LDAP time-outs or the maximum number of search results returned may need to be disabled. If you use multiple LDAP repositories, you must ensure that the base entries do not overlap, as that causes problems when Secure Socket Layer (SSL) is enabled. For example, the following base entries have a field in common, so they overlap: o=renovations o=sales,o=renovations These base entries use different fields and are acceptable: o=renovations,c=us o=sales Contact lists Sametime might experience difficulties when users include large public groups in their contact lists. To avoid problems, limit the size of public groups used with Sametime to 1000 users. Upgrade considerations If you are considering moving from a native Domino directory to an LDAP directory you need to convert the user\u2019s names in the vpuserinfo.nsf to LDAP format. This is done using the Sametime Name Conversion utility. Best Practices The whitepaper Best Practices for using LDAP with Sametime contains an overview of LDAP components and describes how the Sametime Community Server works with LDAP to provide authentication, name look-ups, and name resolution. The article describes best practices for creating search filters, setting sametime.ini parameters, and enhancing Sametime and LDAP performance. Parent topic: Prerequistes","title":"LDAP"},{"location":"admin/ltpa_configure_connections.html","text":"Integrating with HCL Connections You can integrate Sametime to enable chat services in HCL Connections. Sametime and Connections must share a common directory. If you are enabling the HCL Connections Profiles Photo URLs in your Sametime business card configuration, single sign on (SSO) might be required for Sametime to access the URLs. When integrating with Connections, the LTPA key is generated by HCL Connections. To integrate with Sametime, you need to complete the steps in this topic on the Connections server and then complete the configuration on environment which Sametime is running: Docker or Kubernetes. Configure the LDAP for Connections. Log into the WebSphere Application Server Integrated Solutions Console on the Deployment Manager. Click Security > Global security . Select Federated Repositories from the Available realm definitions field and then click Configure . Type the realm name of the LDAP server in the Realm name field. For example: enterprise.example.com:389. Click Apply and then click Save . Restart your Connections deployment. Configure the domain name. Log into the WebSphere Application Server Integrated Solutions Console on the Deployment Manager. Click Security > Global security . In the Authentication mechanisms and expiration area, expand Web and SIP security and click Single sign-on (SSO) . Type your Connections domain name in the Domain name field, ensuring that you add a dot (.) before the domain name. Select the check boxes for Interoperability Mode (optional) and Web inbound security attribute propagation . Make sure Set security to HTTP Only is not enabled. Restart your Connections deployment. Export the LTPA key file. Log into the WebSphere Application Server Integrated Solutions Console on the Deployment Manager. Click Security > Global security . In Authentication > Authentication mechanism and expiration click LTPA . In the Password and Confirm password fields, enter the password that protects the exported key. Type the file name of the key file that you want to generate in the Fully qualified key file name field. Click Export keys. Click Apply and then click Save . After obtaining the LTPA keys from HCL Connections, follow the steps in the Configuring LTPA in Docker or Configuring LTPA in Kubernetes topic. Parent topic: Setting up SSO using LTPA","title":"Integrating with HCL Connections {#ltpa_configure_connections .task}"},{"location":"admin/ltpa_configure_connections.html#ltpa_configure_connections","text":"You can integrate Sametime to enable chat services in HCL Connections. Sametime and Connections must share a common directory. If you are enabling the HCL Connections Profiles Photo URLs in your Sametime business card configuration, single sign on (SSO) might be required for Sametime to access the URLs. When integrating with Connections, the LTPA key is generated by HCL Connections. To integrate with Sametime, you need to complete the steps in this topic on the Connections server and then complete the configuration on environment which Sametime is running: Docker or Kubernetes. Configure the LDAP for Connections. Log into the WebSphere Application Server Integrated Solutions Console on the Deployment Manager. Click Security > Global security . Select Federated Repositories from the Available realm definitions field and then click Configure . Type the realm name of the LDAP server in the Realm name field. For example: enterprise.example.com:389. Click Apply and then click Save . Restart your Connections deployment. Configure the domain name. Log into the WebSphere Application Server Integrated Solutions Console on the Deployment Manager. Click Security > Global security . In the Authentication mechanisms and expiration area, expand Web and SIP security and click Single sign-on (SSO) . Type your Connections domain name in the Domain name field, ensuring that you add a dot (.) before the domain name. Select the check boxes for Interoperability Mode (optional) and Web inbound security attribute propagation . Make sure Set security to HTTP Only is not enabled. Restart your Connections deployment. Export the LTPA key file. Log into the WebSphere Application Server Integrated Solutions Console on the Deployment Manager. Click Security > Global security . In Authentication > Authentication mechanism and expiration click LTPA . In the Password and Confirm password fields, enter the password that protects the exported key. Type the file name of the key file that you want to generate in the Fully qualified key file name field. Click Export keys. Click Apply and then click Save . After obtaining the LTPA keys from HCL Connections, follow the steps in the Configuring LTPA in Docker or Configuring LTPA in Kubernetes topic. Parent topic: Setting up SSO using LTPA","title":"Integrating with HCL Connections"},{"location":"admin/ltpa_configure_docker.html","text":"Configuring LTPA in Docker This topic includes the steps to configure LTPA keys on Docker. You must have already created a secret that contains your LPTA keys before you can compete this task. For more information on using WebSphere Liberty to generate LTPA keys, see Generating LTPA keys . If LTPA was not selected during the install process, you must add it to the sametime.ini file to use LTPA authentication. Edit the sametime.ini file and verify that Ltpa is included on the following line. If not, add it before continuing with configuring LTPA steps. STI_ST_BB_NAMES_ST_AUTH_TOKEN=Fork:Jwt, Ltpa Note: There are two double underscores after STI and NAMES. Update the .env file to reflect the following attributes and values. ENABLE_LTPA=true LTPA_KEYS_FILE_PATH=key\\_file\\_path LTPA_KEYS=/ltpa-config/ltpa.keys LTPA_KEYS_PASSWORD=liberty\\_server\\_password The value for key_file_path must be the absolute path to the file. For example, if keys are in the ltpa.key file and in the /opt/hcl/sametime directory. LTPA_KEYS_FILE_PATH=/opt/hcl/sametime/ltpa.keys Update the custom.env file to include the following. STI_ST_BB_NAMES_ST_AUTH_TOKEN=Fork:Jwt,Ltpa Update the docker-compose.yml file to include the following. SAMETIME_EXTERNAL_WARINTEGRATION=true Parent topic: Setting up SSO using LTPA","title":"Configuring LTPA in Docker {#ltpa_configure_docker .task}"},{"location":"admin/ltpa_configure_docker.html#ltpa_configure_docker","text":"This topic includes the steps to configure LTPA keys on Docker. You must have already created a secret that contains your LPTA keys before you can compete this task. For more information on using WebSphere Liberty to generate LTPA keys, see Generating LTPA keys . If LTPA was not selected during the install process, you must add it to the sametime.ini file to use LTPA authentication. Edit the sametime.ini file and verify that Ltpa is included on the following line. If not, add it before continuing with configuring LTPA steps. STI_ST_BB_NAMES_ST_AUTH_TOKEN=Fork:Jwt, Ltpa Note: There are two double underscores after STI and NAMES. Update the .env file to reflect the following attributes and values. ENABLE_LTPA=true LTPA_KEYS_FILE_PATH=key\\_file\\_path LTPA_KEYS=/ltpa-config/ltpa.keys LTPA_KEYS_PASSWORD=liberty\\_server\\_password The value for key_file_path must be the absolute path to the file. For example, if keys are in the ltpa.key file and in the /opt/hcl/sametime directory. LTPA_KEYS_FILE_PATH=/opt/hcl/sametime/ltpa.keys Update the custom.env file to include the following. STI_ST_BB_NAMES_ST_AUTH_TOKEN=Fork:Jwt,Ltpa Update the docker-compose.yml file to include the following. SAMETIME_EXTERNAL_WARINTEGRATION=true Parent topic: Setting up SSO using LTPA","title":"Configuring LTPA in Docker"},{"location":"admin/ltpa_configure_domino.html","text":"Integrating Sametime with HCL Domino This topic includes the procedure to enable LTPA when Sametime is integrated with the Domino server for use with web based mail, Verse and iNotes. Before you start you need an LTPA key which as an example can be generated by WebSphere Liberty. For more information on using WebSphere Liberty to generate LTPA keys, see Generating LTPA keys . You also must configure the LTPA keys on the Sametime server. To configure the Domino server, you must create a Web SSO configuration document and import the WebSphere LTPA keys. The following procedure describes the steps which are completed on the Domino mail server. Open the names.nsf and select the Web Configurations . Edit the Web SSO LtpaToken document. If a Web SSO LtpaToken document does not exit, it must be created from the Notes or Admin client Create menu. Then click Keys > Import WebSphere LTPA Keys . Select Format: LtpaToken and LtpaToken2 as the Use Token value. In the Domino mail server document under Internet Protocols - Domino Web Engine , select Multiple Servers (SSO) as the session authentication. Start the Domino and Sametime servers to apply the changes. Parent topic: Setting up SSO using LTPA","title":"Integrating Sametime with HCL Domino {#ltpa_configure_domino .task}"},{"location":"admin/ltpa_configure_domino.html#ltpa_configure_domino","text":"This topic includes the procedure to enable LTPA when Sametime is integrated with the Domino server for use with web based mail, Verse and iNotes. Before you start you need an LTPA key which as an example can be generated by WebSphere Liberty. For more information on using WebSphere Liberty to generate LTPA keys, see Generating LTPA keys . You also must configure the LTPA keys on the Sametime server. To configure the Domino server, you must create a Web SSO configuration document and import the WebSphere LTPA keys. The following procedure describes the steps which are completed on the Domino mail server. Open the names.nsf and select the Web Configurations . Edit the Web SSO LtpaToken document. If a Web SSO LtpaToken document does not exit, it must be created from the Notes or Admin client Create menu. Then click Keys > Import WebSphere LTPA Keys . Select Format: LtpaToken and LtpaToken2 as the Use Token value. In the Domino mail server document under Internet Protocols - Domino Web Engine , select Multiple Servers (SSO) as the session authentication. Start the Domino and Sametime servers to apply the changes. Parent topic: Setting up SSO using LTPA","title":"Integrating Sametime with HCL Domino"},{"location":"admin/ltpa_configure_kubernetes.html","text":"Configuring LTPA in Kubernetes This topic includes the steps to configure LTPA keys on Kubernetes. You must have already created a secret that contains your LPTA keys before you can compete this task. For more information on using WebSphere Liberty to generate LTPA keys, see Generating LTPA keys . If LTPA was not selected during the install process, you must add it to the sametime.ini file to use LTPA authentication. Edit the sametime.ini file and verify that Ltpa is included on the following line. If not, add it before continuing with configuring LTPA steps. STI_ST_BB_NAMES_ST_AUTH_TOKEN=Fork:Jwt, Ltpa Note: There are two double underscores after STI and NAMES. The changes in this task affect the following pods: community Create a secret that contains your LTPA keys. kubectl create secret generic ltpa-keys --from-file=./ltpa.keys Change to the helm/templatesdirectory and open open the sametime-secrets.yaml file. Find the base64 encoded value for your pass code. To base64 encode the password, you can enter the following command in a Linux shell: echo -n ltpa\\_key\\_password Locate the LtpaKeysPassword line and replace the existing text with the base64 encoded LTPA key password. Save and close the sametime-secrets.yaml file. In the values.yaml file set enableLtpa to true. enableLtpa = true Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Setting up SSO using LTPA","title":"Configuring LTPA in Kubernetes {#ltpa_configure_kubernetes .task}"},{"location":"admin/ltpa_configure_kubernetes.html#ltpa_configure_kubernetes","text":"This topic includes the steps to configure LTPA keys on Kubernetes. You must have already created a secret that contains your LPTA keys before you can compete this task. For more information on using WebSphere Liberty to generate LTPA keys, see Generating LTPA keys . If LTPA was not selected during the install process, you must add it to the sametime.ini file to use LTPA authentication. Edit the sametime.ini file and verify that Ltpa is included on the following line. If not, add it before continuing with configuring LTPA steps. STI_ST_BB_NAMES_ST_AUTH_TOKEN=Fork:Jwt, Ltpa Note: There are two double underscores after STI and NAMES. The changes in this task affect the following pods: community Create a secret that contains your LTPA keys. kubectl create secret generic ltpa-keys --from-file=./ltpa.keys Change to the helm/templatesdirectory and open open the sametime-secrets.yaml file. Find the base64 encoded value for your pass code. To base64 encode the password, you can enter the following command in a Linux shell: echo -n ltpa\\_key\\_password Locate the LtpaKeysPassword line and replace the existing text with the base64 encoded LTPA key password. Save and close the sametime-secrets.yaml file. In the values.yaml file set enableLtpa to true. enableLtpa = true Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Setting up SSO using LTPA","title":"Configuring LTPA in Kubernetes"},{"location":"admin/ltpa_generate_key.html","text":"Generating LTPA keys Lightweight Third Party Authentication (LTPA) uses keys to encrypt and decrypt data being passed. The generated keys must be shared and configured within the Sametime server and must be available before you can configure SSO using LTPA. Using an instance of Websphere Liberty is one method that you can use to generate LTPA keys. When the Websphere Liberty server is started an LTPA key is created. You can copy the key onto both the host machine and the Domino server. From Docker, issue the following command to start a Websphere Liberty server. docker run -d -p 9080:9080 -p 9443:9443 websphere-liberty:latest Copy the key from ltpa.keys from that instance: docker cp container\\_id:/output/resources/security/ltpa.keys ./ltpa.keys container_id is the Websphere Liberty container ID. To obtain the container ID, open a terminal and issue the following command: docker ps The default password used by Websphere Liberty is WebAS. Configure the LTPA keys in Docker or Kubernetes where Sametime is running. Parent topic: Setting up SSO using LTPA","title":"Generating LTPA keys {#ltpa_generate_key .task}"},{"location":"admin/ltpa_generate_key.html#ltpa_generate_key","text":"Lightweight Third Party Authentication (LTPA) uses keys to encrypt and decrypt data being passed. The generated keys must be shared and configured within the Sametime server and must be available before you can configure SSO using LTPA. Using an instance of Websphere Liberty is one method that you can use to generate LTPA keys. When the Websphere Liberty server is started an LTPA key is created. You can copy the key onto both the host machine and the Domino server. From Docker, issue the following command to start a Websphere Liberty server. docker run -d -p 9080:9080 -p 9443:9443 websphere-liberty:latest Copy the key from ltpa.keys from that instance: docker cp container\\_id:/output/resources/security/ltpa.keys ./ltpa.keys container_id is the Websphere Liberty container ID. To obtain the container ID, open a terminal and issue the following command: docker ps The default password used by Websphere Liberty is WebAS. Configure the LTPA keys in Docker or Kubernetes where Sametime is running. Parent topic: Setting up SSO using LTPA","title":"Generating LTPA keys"},{"location":"admin/managed_community.html","text":"Managed community settings Define managed community settings in the managed-community-configs.xml file. The managed-community-configs.xml file uses these element types: Action elements specify what action to take: Add, Update, Delete, or Reset. They are set as <managed-community-action> elements. Community elements specify the community attributes to which the actions apply. They are set as <managed-community> elements. Only define attributes that are mandatory. For example, do not include the \"loginAtStartup\" attribute unless you want to prevent your users from changing that setting. If the user's configuration differs from any defined attribute, the user's configuration is updated. Although you cannot lock the user interface, any settings that a user changes during a session revert back at the next login. The following tables describe the attributes for each element. The required attributes must be present in the file. Attribute Required? Description deleteOverlappingCommunities No Whether or not overlapping duplicate communities should be deleted. The default is \"false\". An overlapping community is one in which the community host and userid are the same. An overlapping duplicate community can occur when you use a managed-community-configs.xml file to consolidate multiple hosts into a single community. The Sametime\u00ae client may have a community for each host; updating each to the same new host name would result in duplicate overlapping communities. To ensure that duplicate overlapping communities are consolidated into one, set this attribute to true. id Yes The unique ID of the managed community. This setting should be the same value as the \"host\" attribute. host Yes The host to manage. The client only updates communities whose host matches the host of the managed community. newHost No Attribute used to update the host of a community that matches the \"host\" attribute. This is the new host to connect to. The attribute only applies to \"update\" type managed community actions. The user's contact list is assumed to be valid for the new community. If the contact list is not valid, use the \"reset\" managed community action instead. name No The name of the community. Not recommended. To set the community ID, use ST_COMMUNITY_ID in the server's sametime.ini to set the community name for all clients. savePassword No Whether or not to save the password. Set the value to \"true\" to save the password. loginAtStartup No Whether or not to automatically log in. Set the value to \"true\" to log in automatically. useGlobalConnContext No Whether or not to use the global connection context. You must set this to \"true\" if you are updating connectionType to a value other than \"direct\". connectionType No The connection type corresponds to the options in the Connection settings page. Valid values include useBrowserSettings, direct, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, and reverse-proxy. authServerUrl No The server URL for SSO authentication. authType No The authentication type for SSO. Value can either be TAM-SPNEGO or ST-DOMINO-SSO . port No The port to use if it is not the default 1533. proxyHost No The hostname of the proxy. proxyPort No The port of the proxy. loginByToken No Whether or not to log in by token. Set the value to \"true\" to log in by token. Note that if the token login fails and the password is available, the password-based authentication will proceed. sendKeepAlive No Whether or not to send the keep alive signal. Set the value to \"true\" to send the keep alive signal. keepAliveInterval No The interval at which to send the keep alive signal. Attribute Required? Description managed-community-id Yes The unique ID of the managed-community. Use the same value as the \"host\" attribute of the managed community type Yes The type of action. Values can be \"update\", \"add\", \"delete\" or \"reset\".- Add actions result in the addition of secondary communities. - Delete actions result in the deletion of secondary communities. The default community cannot be deleted. - Update actions result in an update to communities whose host value match the host value of the managed community. If no attributes are different, the update action does not result in any change. - Reset actions are used to reset the client configuration to a new default community. If a reset action is found, it is applied before any other action type and no other actions are processed. The user is prompted to restart, but may opt not to. The managed community referenced by the reset action represents the new default community that is to be used when the user next restarts. | |restart|No|By default, update actions only result in a restart if the host name is changed. Add this optional attribute and set the value to \"true\" to restart the client after other update events. To prevent the default restart after the host name is changed, add this attribute, but set it to \"false.\"| |applyDefaultCommunityUsername|No|Attribute that can be used with an \"add\" type managed community action to indicate whether or not the default community user name should be applied to the new community when it is added. Set the value to \"true\" apply the default community user name.| |createNewConfig|No|Optional attribute for use with the reset action type. When you set this to \"true,\" the previous default community is completely replaced by the new community. The user name and password are empty, requiring the user to repopulate these values. Without this attribute, or with the attribute set to false, the new default community configuration enabled with a reset action retains the user name, password, and connection options of the former default community.| Sample managed-community-configs file The following sample file adds a new community and updates two others. The connection type is reverse-proxy. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <managed-communities> <managed-community id=\"sales.usma.example.com\" host=\"sales.usma.example.com\" loginByToken=\"true\" authServerUrl=\"http://sales.usma.example.com\" authType=\"SAMPLE\" useGlobalConnSettings=\"false\"> <connection connectionType=\"reverse-proxy\" proxyHost=\"http://usma.example.com:81/sales\"/> </managed-community> <managed-community id=\"sametime.example.com\" host=\"sametime.example.com\" newHost=\"sametimenew.example.com\"/> <managed-community id=\"sametimenew.example.com\" host=\"sametimenew.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sametime.example.com\"/> <managed-community-action type=\"add\" managed-community-id=\"sametimenew.example.com\"/> </managed-communities> Action examples Adding a new community The following example adds a new secondary community using the global connection defaults. Administrator-defined secondary communities are not impacted by the Allow user to add multiple server communities policy. Even if the policy is set to Not selected, the client recognizes they are defined by the administrator and allows the user to log into them. Administrator-defined communities cannot be deleted. <managed-communities> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\"/> <managed-community-action type=\"add\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Updating the default community host This example updates the default community host from \"sales.usma.example.com\" to \"sales2.usma.example.com.\" <managed-communities> <managed-community id=\"sales.usma.example.com\" host=\"sales.usma.example.com\" newHost=\"sales2.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> </managed-communities> Updating the default community host again This example updates the default community host from \"sales.usma.example.com\" or \"sales2.usma.example.com\" to \"sales3.usma.example.com.\" <managed-communities> <managed-community id=\"sales.usma.example.com\" host=\"sales.usma.example.com\" newHost=\"sales3.usma.example.com\"/> <managed-community id=\"sales2.usma.example.com\" host=\"sales2.usma.example.com\" newHost=\"sales3.usma.example.com\"/> <!-- Ensure existing sales community hosts that missed the first \"sales2\" update, or that manually reverted, are updated to sales3 --> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> <!-- Ensure existing sales2 community hosts are updated to sales3 --> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> </managed-communities> Updating the secondary community host This example updates \"acct\" to \"acct2\" and ensures acct2 is added as a secondary community for all new users. <managed-communities> <managed-community id=\"acct2.sales.usma.example.com\" host=\"acct2.sales.usma.example.com\" /> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\" newHost=\"acct2.sales.usma.example.com\" /> <!-- Ensure acct2.sales.usma.example.com community is created for all users that don't yet have it --> <managed-community-action type=\"add\" managed-community-id=\"acct2.sales.usma.example.com\"/> <!-- Ensure existing acct.sales.usma.example.com community hosts are updated to acct2.sales.usma.example.com --> <managed-community-action type=\"update\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Updating the secondary community host again This example updates \"acct2\" to \"acct3\", and also ensures acct3 is added as a secondary community for all new users. <managed-communities> <managed-community id=\"acct3.sales.usma.example.com\" host=\"acct3.sales.usma.example.com\"/> <managed-community id=\"acct2.sales.usma.example.com\" host=\"acct2.sales.usma.example.com\" newHost=\"acct3.sales.usma.example.com\" /> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\" newHost=\"acct3.sales.usma.example.com\" /> <!-- Ensure acct3.swg.usma.hcl.com community is created for all new users --> <managed-community-action type=\"add\" managed-community-id=\"acct3.sales.usma.example.com\"/> <!-- Ensure existing acct2.sales.usma.hcl.com community hosts are updated to acct3.sales.usma.example.com --> <managed-community-action type=\"update\" managed-community-id=\"acct2.sales.usma.example.com\"/> <!-- Ensure existing acct2.sales.usma.example.com community hosts that missed the first \"acct2\" update, or that manually reverted, are updated to acct3.sales.usma.example.com --> <managed-community-action type=\"update\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Switching users to a new default community with a different user directory If the new community is a different community with a different user backend, use the reset managed-community-action type to reset the user to the new community. Assuming the user credentials are valid in the new community, after restarting, the user logs into the new community. To include additional secondary communities as part of this new configuration, define them on the new server's managed-community-configs.xml file, using add actions for the desired secondary communities. When the reset action is found, if the current default community does not match the community defined by the administrator, or if createNewConfig is set to true, the client saves the new configuration locally. When the client next restarts, the default community defined by the administrator replaces the previously defined default community. <managed-communities> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\"/> <managed-community-action type=\"reset\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Consolidating multiple communities to a single community This example consolidates multiple communities with various hosts into a single community with one host. <managed-communities deleteOverlappingCommunities=\"true\"> <managed-community id=\"sales1.usma.example.com\" host=\"sales1.usma.example.com\" newHost=\"sales.usma.example.com\"/> <managed-community id=\"sales2.usma.example.com\" host=\"sales2.usma.example.com\" newHost=\"sales.usma.example.com\"/> <managed-community id=\"sales3.usma.example.com\" host=\"sales3.usma.example.com\" newHost=\"sales.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales1.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales2.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales3.usma.example.com\"/> </managed-communities> Parent topic: Updating connectivity settings with the managed-community-configs.xml file","title":"Managed community settings {#managed_community .task}"},{"location":"admin/managed_community.html#managed_community","text":"Define managed community settings in the managed-community-configs.xml file. The managed-community-configs.xml file uses these element types: Action elements specify what action to take: Add, Update, Delete, or Reset. They are set as <managed-community-action> elements. Community elements specify the community attributes to which the actions apply. They are set as <managed-community> elements. Only define attributes that are mandatory. For example, do not include the \"loginAtStartup\" attribute unless you want to prevent your users from changing that setting. If the user's configuration differs from any defined attribute, the user's configuration is updated. Although you cannot lock the user interface, any settings that a user changes during a session revert back at the next login. The following tables describe the attributes for each element. The required attributes must be present in the file. Attribute Required? Description deleteOverlappingCommunities No Whether or not overlapping duplicate communities should be deleted. The default is \"false\". An overlapping community is one in which the community host and userid are the same. An overlapping duplicate community can occur when you use a managed-community-configs.xml file to consolidate multiple hosts into a single community. The Sametime\u00ae client may have a community for each host; updating each to the same new host name would result in duplicate overlapping communities. To ensure that duplicate overlapping communities are consolidated into one, set this attribute to true. id Yes The unique ID of the managed community. This setting should be the same value as the \"host\" attribute. host Yes The host to manage. The client only updates communities whose host matches the host of the managed community. newHost No Attribute used to update the host of a community that matches the \"host\" attribute. This is the new host to connect to. The attribute only applies to \"update\" type managed community actions. The user's contact list is assumed to be valid for the new community. If the contact list is not valid, use the \"reset\" managed community action instead. name No The name of the community. Not recommended. To set the community ID, use ST_COMMUNITY_ID in the server's sametime.ini to set the community name for all clients. savePassword No Whether or not to save the password. Set the value to \"true\" to save the password. loginAtStartup No Whether or not to automatically log in. Set the value to \"true\" to log in automatically. useGlobalConnContext No Whether or not to use the global connection context. You must set this to \"true\" if you are updating connectionType to a value other than \"direct\". connectionType No The connection type corresponds to the options in the Connection settings page. Valid values include useBrowserSettings, direct, tls-direct, http-direct, socks4-proxy, socks5-proxy, http-proxy, and reverse-proxy. authServerUrl No The server URL for SSO authentication. authType No The authentication type for SSO. Value can either be TAM-SPNEGO or ST-DOMINO-SSO . port No The port to use if it is not the default 1533. proxyHost No The hostname of the proxy. proxyPort No The port of the proxy. loginByToken No Whether or not to log in by token. Set the value to \"true\" to log in by token. Note that if the token login fails and the password is available, the password-based authentication will proceed. sendKeepAlive No Whether or not to send the keep alive signal. Set the value to \"true\" to send the keep alive signal. keepAliveInterval No The interval at which to send the keep alive signal. Attribute Required? Description managed-community-id Yes The unique ID of the managed-community. Use the same value as the \"host\" attribute of the managed community type Yes The type of action. Values can be \"update\", \"add\", \"delete\" or \"reset\".- Add actions result in the addition of secondary communities. - Delete actions result in the deletion of secondary communities. The default community cannot be deleted. - Update actions result in an update to communities whose host value match the host value of the managed community. If no attributes are different, the update action does not result in any change. - Reset actions are used to reset the client configuration to a new default community. If a reset action is found, it is applied before any other action type and no other actions are processed. The user is prompted to restart, but may opt not to. The managed community referenced by the reset action represents the new default community that is to be used when the user next restarts. | |restart|No|By default, update actions only result in a restart if the host name is changed. Add this optional attribute and set the value to \"true\" to restart the client after other update events. To prevent the default restart after the host name is changed, add this attribute, but set it to \"false.\"| |applyDefaultCommunityUsername|No|Attribute that can be used with an \"add\" type managed community action to indicate whether or not the default community user name should be applied to the new community when it is added. Set the value to \"true\" apply the default community user name.| |createNewConfig|No|Optional attribute for use with the reset action type. When you set this to \"true,\" the previous default community is completely replaced by the new community. The user name and password are empty, requiring the user to repopulate these values. Without this attribute, or with the attribute set to false, the new default community configuration enabled with a reset action retains the user name, password, and connection options of the former default community.|","title":"Managed community settings"},{"location":"admin/managed_community.html#sample-managed-community-configs-file","text":"The following sample file adds a new community and updates two others. The connection type is reverse-proxy. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <managed-communities> <managed-community id=\"sales.usma.example.com\" host=\"sales.usma.example.com\" loginByToken=\"true\" authServerUrl=\"http://sales.usma.example.com\" authType=\"SAMPLE\" useGlobalConnSettings=\"false\"> <connection connectionType=\"reverse-proxy\" proxyHost=\"http://usma.example.com:81/sales\"/> </managed-community> <managed-community id=\"sametime.example.com\" host=\"sametime.example.com\" newHost=\"sametimenew.example.com\"/> <managed-community id=\"sametimenew.example.com\" host=\"sametimenew.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sametime.example.com\"/> <managed-community-action type=\"add\" managed-community-id=\"sametimenew.example.com\"/> </managed-communities> Action examples Adding a new community The following example adds a new secondary community using the global connection defaults. Administrator-defined secondary communities are not impacted by the Allow user to add multiple server communities policy. Even if the policy is set to Not selected, the client recognizes they are defined by the administrator and allows the user to log into them. Administrator-defined communities cannot be deleted. <managed-communities> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\"/> <managed-community-action type=\"add\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Updating the default community host This example updates the default community host from \"sales.usma.example.com\" to \"sales2.usma.example.com.\" <managed-communities> <managed-community id=\"sales.usma.example.com\" host=\"sales.usma.example.com\" newHost=\"sales2.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> </managed-communities> Updating the default community host again This example updates the default community host from \"sales.usma.example.com\" or \"sales2.usma.example.com\" to \"sales3.usma.example.com.\" <managed-communities> <managed-community id=\"sales.usma.example.com\" host=\"sales.usma.example.com\" newHost=\"sales3.usma.example.com\"/> <managed-community id=\"sales2.usma.example.com\" host=\"sales2.usma.example.com\" newHost=\"sales3.usma.example.com\"/> <!-- Ensure existing sales community hosts that missed the first \"sales2\" update, or that manually reverted, are updated to sales3 --> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> <!-- Ensure existing sales2 community hosts are updated to sales3 --> <managed-community-action type=\"update\" managed-community-id=\"sales.usma.example.com\"/> </managed-communities> Updating the secondary community host This example updates \"acct\" to \"acct2\" and ensures acct2 is added as a secondary community for all new users. <managed-communities> <managed-community id=\"acct2.sales.usma.example.com\" host=\"acct2.sales.usma.example.com\" /> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\" newHost=\"acct2.sales.usma.example.com\" /> <!-- Ensure acct2.sales.usma.example.com community is created for all users that don't yet have it --> <managed-community-action type=\"add\" managed-community-id=\"acct2.sales.usma.example.com\"/> <!-- Ensure existing acct.sales.usma.example.com community hosts are updated to acct2.sales.usma.example.com --> <managed-community-action type=\"update\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Updating the secondary community host again This example updates \"acct2\" to \"acct3\", and also ensures acct3 is added as a secondary community for all new users. <managed-communities> <managed-community id=\"acct3.sales.usma.example.com\" host=\"acct3.sales.usma.example.com\"/> <managed-community id=\"acct2.sales.usma.example.com\" host=\"acct2.sales.usma.example.com\" newHost=\"acct3.sales.usma.example.com\" /> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\" newHost=\"acct3.sales.usma.example.com\" /> <!-- Ensure acct3.swg.usma.hcl.com community is created for all new users --> <managed-community-action type=\"add\" managed-community-id=\"acct3.sales.usma.example.com\"/> <!-- Ensure existing acct2.sales.usma.hcl.com community hosts are updated to acct3.sales.usma.example.com --> <managed-community-action type=\"update\" managed-community-id=\"acct2.sales.usma.example.com\"/> <!-- Ensure existing acct2.sales.usma.example.com community hosts that missed the first \"acct2\" update, or that manually reverted, are updated to acct3.sales.usma.example.com --> <managed-community-action type=\"update\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Switching users to a new default community with a different user directory If the new community is a different community with a different user backend, use the reset managed-community-action type to reset the user to the new community. Assuming the user credentials are valid in the new community, after restarting, the user logs into the new community. To include additional secondary communities as part of this new configuration, define them on the new server's managed-community-configs.xml file, using add actions for the desired secondary communities. When the reset action is found, if the current default community does not match the community defined by the administrator, or if createNewConfig is set to true, the client saves the new configuration locally. When the client next restarts, the default community defined by the administrator replaces the previously defined default community. <managed-communities> <managed-community id=\"acct.sales.usma.example.com\" host=\"acct.sales.usma.example.com\"/> <managed-community-action type=\"reset\" managed-community-id=\"acct.sales.usma.example.com\"/> </managed-communities> Consolidating multiple communities to a single community This example consolidates multiple communities with various hosts into a single community with one host. <managed-communities deleteOverlappingCommunities=\"true\"> <managed-community id=\"sales1.usma.example.com\" host=\"sales1.usma.example.com\" newHost=\"sales.usma.example.com\"/> <managed-community id=\"sales2.usma.example.com\" host=\"sales2.usma.example.com\" newHost=\"sales.usma.example.com\"/> <managed-community id=\"sales3.usma.example.com\" host=\"sales3.usma.example.com\" newHost=\"sales.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales1.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales2.usma.example.com\"/> <managed-community-action type=\"update\" managed-community-id=\"sales3.usma.example.com\"/> </managed-communities> Parent topic: Updating connectivity settings with the managed-community-configs.xml file","title":"Sample managed-community-configs file"},{"location":"admin/managing_policies.html","text":"Managing policies Sametime policies allows administrators to control user access to features. Policies are grouped based on the following features: Instant messaging (chat, image settings, file transfer, plugin management, and mobile features provided by the Sametime server). Meetings (conferencing features provided by Sametime server. Media services (audio and video features provided by Sametime v9 Media Manager). When a user authenticates, Sametime applies a default policy if no other policy can be found for that user. You can also assign a custom policy. Custom policies can be designed for specific groups in the company. Sametime 9 Meetings policy changes take effect immediately, while Instant Messaging and Media Services policy changes take effect within an hour. If a user is assigned to more than one policy, then Sametime uses the policy weight to determine precedence. Policies are only applied from the primary Sametime community defined in the client. Additional server communities' policies are not pushed down to the users' desktops. A user's primary Sametime community is the first community listed in their Sametime client Server Communities Properties settings. There is also an anonymous policy that is assigned by default to users who have not authenticated, and unauthenticated users always receive this policy. Policy behaviors You can assign anonymous, default, or custom user policies to users or groups to allow or restrict access to certain Sametime features. Sametime uses policy weights and group nesting levels to determine which policies take precedence. Configuring policies In previous versions of Sametime there was a graphical user interface available to configure policies. In Sametime 12.0 configuring policies are done in the policies.user.xml file, which is located on the Sametime server. Sametime policy IDs This section describes the policies and configurations available in the Sametime deployment. Mobile client policies While many user policies are available in the Sametime ecosystem, only a subset of these policies apply to the mobile clients. This section describes the policies and configurations available to the said clients. Creating a new policy other than the default policy Sametime policies are configured in the policies.user.xml file. Changing a user policy\u2019s weight Each Sametime policy has a weight assigned to it. The weight should be unique. When assigning a weight to a policy, please ensure the weight is unique on each policy and not duplicated. Assigning users and groups to policies Policies can be assigned to users or groups. Policy configuration is done inside the policies.user.xml file. Allowing or restricting custom policies for Sametime clients Optionally allow or restrict features for clients by creating exception rules for the policy service in the policyExceptions.xml file. Parent topic: Administering","title":"Managing policies {#managing_policies .task}"},{"location":"admin/managing_policies.html#managing_policies","text":"Sametime policies allows administrators to control user access to features. Policies are grouped based on the following features: Instant messaging (chat, image settings, file transfer, plugin management, and mobile features provided by the Sametime server). Meetings (conferencing features provided by Sametime server. Media services (audio and video features provided by Sametime v9 Media Manager). When a user authenticates, Sametime applies a default policy if no other policy can be found for that user. You can also assign a custom policy. Custom policies can be designed for specific groups in the company. Sametime 9 Meetings policy changes take effect immediately, while Instant Messaging and Media Services policy changes take effect within an hour. If a user is assigned to more than one policy, then Sametime uses the policy weight to determine precedence. Policies are only applied from the primary Sametime community defined in the client. Additional server communities' policies are not pushed down to the users' desktops. A user's primary Sametime community is the first community listed in their Sametime client Server Communities Properties settings. There is also an anonymous policy that is assigned by default to users who have not authenticated, and unauthenticated users always receive this policy. Policy behaviors You can assign anonymous, default, or custom user policies to users or groups to allow or restrict access to certain Sametime features. Sametime uses policy weights and group nesting levels to determine which policies take precedence. Configuring policies In previous versions of Sametime there was a graphical user interface available to configure policies. In Sametime 12.0 configuring policies are done in the policies.user.xml file, which is located on the Sametime server. Sametime policy IDs This section describes the policies and configurations available in the Sametime deployment. Mobile client policies While many user policies are available in the Sametime ecosystem, only a subset of these policies apply to the mobile clients. This section describes the policies and configurations available to the said clients. Creating a new policy other than the default policy Sametime policies are configured in the policies.user.xml file. Changing a user policy\u2019s weight Each Sametime policy has a weight assigned to it. The weight should be unique. When assigning a weight to a policy, please ensure the weight is unique on each policy and not duplicated. Assigning users and groups to policies Policies can be assigned to users or groups. Policy configuration is done inside the policies.user.xml file. Allowing or restricting custom policies for Sametime clients Optionally allow or restrict features for clients by creating exception rules for the policy service in the policyExceptions.xml file. Parent topic: Administering","title":"Managing policies"},{"location":"admin/managing_sametime_client_preferences.html","text":"Managing Sametime clients This section provides information on managing Sametime clients. Managing client types and log-ins You can manage the manner and order of client connections to Sametime. Connecting the Sametime Connect client to the Sametime server The Sametime Connect client uses Server Communities preferences to connect to the Sametime server for presence and chat features. Sametime client configuration options There are several methods to customize the user experience for Sametime clients. This section covers Expeditor based clients that are capable of leveraging the Expeditor Managed Settings framework. These clients include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This does not apply to the PWA, web or mobile clients. Parent topic: Administering","title":"Managing Sametime clients {#managing_sametime_client_preferences .task}"},{"location":"admin/managing_sametime_client_preferences.html#managing_sametime_client_preferences","text":"This section provides information on managing Sametime clients. Managing client types and log-ins You can manage the manner and order of client connections to Sametime. Connecting the Sametime Connect client to the Sametime server The Sametime Connect client uses Server Communities preferences to connect to the Sametime server for presence and chat features. Sametime client configuration options There are several methods to customize the user experience for Sametime clients. This section covers Expeditor based clients that are capable of leveraging the Expeditor Managed Settings framework. These clients include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This does not apply to the PWA, web or mobile clients. Parent topic: Administering","title":"Managing Sametime clients"},{"location":"admin/managing_sametime_premium.html","text":"Managing Sametime features HCL Domino users are entitled to limited use of HCL Sametime chat capabilities. The following chat features are not available to HCL Domino users. In Sametime version 12.0, these features are disabled by default. Access to file transfer Screen capture Multiple communities External users No embedded audio and video features External conferencing integration For a complete list of Sametime features, see Sametime versus Sametime Premium . Parent topic: Considerations for Sametime Premium","title":"Managing Sametime features {#managing_sametime_premium .concept}"},{"location":"admin/managing_sametime_premium.html#managing_sametime_premium","text":"HCL Domino users are entitled to limited use of HCL Sametime chat capabilities. The following chat features are not available to HCL Domino users. In Sametime version 12.0, these features are disabled by default. Access to file transfer Screen capture Multiple communities External users No embedded audio and video features External conferencing integration For a complete list of Sametime features, see Sametime versus Sametime Premium . Parent topic: Considerations for Sametime Premium","title":"Managing Sametime features"},{"location":"admin/managing_secrets_kubernetes.html","text":"Managing secrets in Kubernetes Sensitive information such as passwords, service account names, certificates, and other confidential data needed by Sametime pods are stored in secrets. In addition to helm charts and configuration map, the Sametime configuration is also derived from secrets. A secret is considered part of the live runtime or the current configuration. Secrets are created based upon a template or a command line. You can modify the templates to re-create secrets if needed. An example is when you need to update your LDAP bind credentials. For more information see, Changing the LDAP service account password in Kubernetes . For additional information about secrets in Kubernetes, see the Secrets topic in the Kubernetes documentation. Some secrets are required by Sametime. They are created during the installation and configuration of Sametime. Some secrets are required by Sametime and others are based on features being used, such as SAML. The following are global secrets that are required. Secret Description Template sametime-global-secrets The helm/templates/sametime-secrets.yaml is used to define this secret. Note that all values within this secret are based64 encoded. The following parameters are contained in the global secret.JwtSecret : The secret key used by the Sametime service to verify and decide the hash of JWT tokens. LdapBindEntryDn : The LDAP Bind account. LdapBindEntryPassword : The password for the LDAP bind account. MongoConnectionUrl : The MongoDB formatted URL containing the login name and password used by Sametime. The host name and port number are also included. JigasiSipUri : The name of the of the account and the host name of the SIP user fortelephony integration with iLink. JigasiSipPassword : The password for telephony integration with iLink. ltpaKeysPassword : The password for the LTPA keys. MeetingLocationSecret : The secret key used to communicate to the primary location service. JvbAuthPassword : The password for the JVB authentication account. |helm/templates/sametime-secrets.yaml| |sametime-internal-keys-secret|Contains information about the certificate key store.|None| |tls-secret|The name of this secret can vary because it is configurable. The name can also vary depending on the ingress controller. The ingress controller might be secured with a certificate within a secret as well.|None| The following are default internal secrets and based off the listed template. Do not change the content within these secrets unless instructed by the software support team. Secret Name Template app-registry-config-secret helm/templates/app-registry-config-secrets.yaml auth-config-secret helm/templates/auth-config-secrets.yaml catalog-config-secret helm/templates/catalog-config-secrets.yaml The following is a list of optional secrets that are dependent on a feature being enabled, such as SAML. Secret name Description extra-community-config A configurable secret that contains extra configuration details for the Community pod. It can contain a copy of the StCommunityConfig.xml, UserInfoConfig.xml, and other community files. ldap-config-secret The certificate trust store and password for LDAP. See Securing LDAP on Kubernetes for more details. saml-config-secret The certificate trust store and password for SAML. See Configuring SAML in Kubernetes for more details. Considerations for when namespaces are used In Kubernetes, the Sametime cluster can be deployed in a namespace which makes administration easier for organizations that have multiple users sharing cluster resources. For example, you might want to run MongoDB in the same Kubernetes cluster as Sametime. They could be separated into different namespaces. When creating secrets in a Sametime cluster that is scoped to a namespace, the secrets also need to be scoped to the same namespace where Sametime is installed. To define the namespace, add the -n argument followed by the namespace name to the command. For example, the following shows the get command for a namespace with the name st. kubectl get secrets -n st Viewing secrets The get command can be used to list secrets and view their contents. Deleting a secret The kubectl delete command can be used to delete a secret. Modifying secrets Some of the content within a secret can be changed using the edit secret command. Parent topic: Configuring","title":"Managing secrets in Kubernetes {#managing_secrets_kubernetes .concept}"},{"location":"admin/managing_secrets_kubernetes.html#managing_secrets_kubernetes","text":"Sensitive information such as passwords, service account names, certificates, and other confidential data needed by Sametime pods are stored in secrets. In addition to helm charts and configuration map, the Sametime configuration is also derived from secrets. A secret is considered part of the live runtime or the current configuration. Secrets are created based upon a template or a command line. You can modify the templates to re-create secrets if needed. An example is when you need to update your LDAP bind credentials. For more information see, Changing the LDAP service account password in Kubernetes . For additional information about secrets in Kubernetes, see the Secrets topic in the Kubernetes documentation. Some secrets are required by Sametime. They are created during the installation and configuration of Sametime. Some secrets are required by Sametime and others are based on features being used, such as SAML. The following are global secrets that are required. Secret Description Template sametime-global-secrets The helm/templates/sametime-secrets.yaml is used to define this secret. Note that all values within this secret are based64 encoded. The following parameters are contained in the global secret.JwtSecret : The secret key used by the Sametime service to verify and decide the hash of JWT tokens. LdapBindEntryDn : The LDAP Bind account. LdapBindEntryPassword : The password for the LDAP bind account. MongoConnectionUrl : The MongoDB formatted URL containing the login name and password used by Sametime. The host name and port number are also included. JigasiSipUri : The name of the of the account and the host name of the SIP user fortelephony integration with iLink. JigasiSipPassword : The password for telephony integration with iLink. ltpaKeysPassword : The password for the LTPA keys. MeetingLocationSecret : The secret key used to communicate to the primary location service. JvbAuthPassword : The password for the JVB authentication account. |helm/templates/sametime-secrets.yaml| |sametime-internal-keys-secret|Contains information about the certificate key store.|None| |tls-secret|The name of this secret can vary because it is configurable. The name can also vary depending on the ingress controller. The ingress controller might be secured with a certificate within a secret as well.|None| The following are default internal secrets and based off the listed template. Do not change the content within these secrets unless instructed by the software support team. Secret Name Template app-registry-config-secret helm/templates/app-registry-config-secrets.yaml auth-config-secret helm/templates/auth-config-secrets.yaml catalog-config-secret helm/templates/catalog-config-secrets.yaml The following is a list of optional secrets that are dependent on a feature being enabled, such as SAML. Secret name Description extra-community-config A configurable secret that contains extra configuration details for the Community pod. It can contain a copy of the StCommunityConfig.xml, UserInfoConfig.xml, and other community files. ldap-config-secret The certificate trust store and password for LDAP. See Securing LDAP on Kubernetes for more details. saml-config-secret The certificate trust store and password for SAML. See Configuring SAML in Kubernetes for more details.","title":"Managing secrets in Kubernetes"},{"location":"admin/managing_secrets_kubernetes.html#considerations-for-when-namespaces-are-used","text":"In Kubernetes, the Sametime cluster can be deployed in a namespace which makes administration easier for organizations that have multiple users sharing cluster resources. For example, you might want to run MongoDB in the same Kubernetes cluster as Sametime. They could be separated into different namespaces. When creating secrets in a Sametime cluster that is scoped to a namespace, the secrets also need to be scoped to the same namespace where Sametime is installed. To define the namespace, add the -n argument followed by the namespace name to the command. For example, the following shows the get command for a namespace with the name st. kubectl get secrets -n st Viewing secrets The get command can be used to list secrets and view their contents. Deleting a secret The kubectl delete command can be used to delete a secret. Modifying secrets Some of the content within a secret can be changed using the edit secret command. Parent topic: Configuring","title":"Considerations for when namespaces are used"},{"location":"admin/meetings_configuring.html","text":"Meetings This contains configuration steps specific to the HCL Sametime Meetings server. Disabling secure meeting room names Users are provisioned with a personal meeting room the first time that they log into their meeting. Their personal meeting room is created with a secure name that cannot be easily guessed by other users. For example: be:MeetMe.CWGRAff90q9HETLne4mhzA. Enabling conference dial-in You can set up your environment to allow users to dial in to a meeting using a SIP-capable phone system that is connected to a public switched telephone network (PSTN). This feature uses the ilink TeamCall Meeting Gateway (TMG). Configuring alternate host name for Web Chat The default host name for Meetings and Web Chat are the same. However, you can configure Web Chat to use a different host name. Enabling meeting dial-out You can enable the dial-out option on Docker and Kubernetes. Configuring the maximum number of meeting participants Sametime currently supports a maximum of 100 users in a meeting regardless of the selected meeting mode. To reach a wider audience, you can start a live stream and share the link to all intended participants. Enable Videobridge for TCP This section provides steps to configure TCP for media streams using TCP port 4443. Disable sharing of meetings recording By default meeting recordings can be shared with others. You can change a setting to disable sharing of meeting recordings. Enabling Microsoft Outlook Add-in To use the Sametime Meetings add-in for Microsoft Outlook it must be enabled on the Sametime server. The add-in is provided as part of Sametime installation package. Setting up a TURN server A TURN server can be configured to provide for efficient traffic flow within your Sametime meeting. Parent topic: Configuring","title":"Meetings {#meetings_configuring .concept}"},{"location":"admin/meetings_configuring.html#meetings_configuring","text":"This contains configuration steps specific to the HCL Sametime Meetings server. Disabling secure meeting room names Users are provisioned with a personal meeting room the first time that they log into their meeting. Their personal meeting room is created with a secure name that cannot be easily guessed by other users. For example: be:MeetMe.CWGRAff90q9HETLne4mhzA. Enabling conference dial-in You can set up your environment to allow users to dial in to a meeting using a SIP-capable phone system that is connected to a public switched telephone network (PSTN). This feature uses the ilink TeamCall Meeting Gateway (TMG). Configuring alternate host name for Web Chat The default host name for Meetings and Web Chat are the same. However, you can configure Web Chat to use a different host name. Enabling meeting dial-out You can enable the dial-out option on Docker and Kubernetes. Configuring the maximum number of meeting participants Sametime currently supports a maximum of 100 users in a meeting regardless of the selected meeting mode. To reach a wider audience, you can start a live stream and share the link to all intended participants. Enable Videobridge for TCP This section provides steps to configure TCP for media streams using TCP port 4443. Disable sharing of meetings recording By default meeting recordings can be shared with others. You can change a setting to disable sharing of meeting recordings. Enabling Microsoft Outlook Add-in To use the Sametime Meetings add-in for Microsoft Outlook it must be enabled on the Sametime server. The add-in is provided as part of Sametime installation package. Setting up a TURN server A TURN server can be configured to provide for efficient traffic flow within your Sametime meeting. Parent topic: Configuring","title":"Meetings"},{"location":"admin/meetings_configuring_max.html","text":"Configuring the maximum number of meeting participants Sametime currently supports a maximum of 100 users in a meeting regardless of the selected meeting mode. To reach a wider audience, you can start a live stream and share the link to all intended participants. By default, you can host a meeting with up to 100 participants. You can lower the maximum capacity to any value below 100 as needed. Users who attempt to join a meeting that has reached maximum capacity encounter a message indicating that the meeting room is full. Note: The greater the number of concurrent users accessing the server, the greater the resources consumed, particularly CPU resources. Other factors, such as meeting recordings, can influence the total capacity. Refrain from changing this setting without proper sizing information from HCL. For sizing-related questions, contact HCL . Procedure for Kubernetes Place the helm/values.yaml in edit mode. vi helm/values.yaml Edit the following line: MaxOccupants= <new value representing the number of total users in a meeting> Save the file. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Procedure for Docker: Place the docker-compose.yml file in edit mode. Under the prosody section, modify the value of MAX_OCCUPANTS: MAX_OCCUPANTS=<new value> Save the docker-compose.xml file. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Parent topic: Meetings","title":"Configuring the maximum number of meeting participants {#meetings_configuring_max .task}"},{"location":"admin/meetings_configuring_max.html#meetings_configuring_max","text":"Sametime currently supports a maximum of 100 users in a meeting regardless of the selected meeting mode. To reach a wider audience, you can start a live stream and share the link to all intended participants. By default, you can host a meeting with up to 100 participants. You can lower the maximum capacity to any value below 100 as needed. Users who attempt to join a meeting that has reached maximum capacity encounter a message indicating that the meeting room is full. Note: The greater the number of concurrent users accessing the server, the greater the resources consumed, particularly CPU resources. Other factors, such as meeting recordings, can influence the total capacity. Refrain from changing this setting without proper sizing information from HCL. For sizing-related questions, contact HCL . Procedure for Kubernetes Place the helm/values.yaml in edit mode. vi helm/values.yaml Edit the following line: MaxOccupants= <new value representing the number of total users in a meeting> Save the file. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Procedure for Docker: Place the docker-compose.yml file in edit mode. Under the prosody section, modify the value of MAX_OCCUPANTS: MAX_OCCUPANTS=<new value> Save the docker-compose.xml file. Restart the Sametime Meeting Server using the instructions in the topic Starting and stopping Meeting servers . Parent topic: Meetings","title":"Configuring the maximum number of meeting participants"},{"location":"admin/meetings_dialin.html","text":"Enabling conference dial-in You can set up your environment to allow users to dial in to a meeting using a SIP-capable phone system that is connected to a public switched telephone network (PSTN). This feature uses the ilink TeamCall Meeting Gateway (TMG). To enable meeting dial-in, the following must be installed in your Sametime server: Sametime 11.6 or later versions Debian 11 Linux host system or VMware to run TMG service (on-premises or in private cloud) CPU, RAM of TMG host: 25% each of the capacity of the Sametime server host To enable your Sametime environment for dial-in, you must contact an ilink sales representative at sales@ilink.de . The ilink professional service team performs a remote installation. After the TMG is installed, it runs in the background and no administrator support is required. The TeamCall Meeting Gateway for HCL Sametime Premium provides audio waiting rooms for moderated meetings. If the user experiences dial-in or telephony problems, they must contact ilink support at sales@ilink.de to open a ticket for assistance. Parent topic: Meetings","title":"Enabling conference dial-in {#meetings_dialin .task}"},{"location":"admin/meetings_dialin.html#meetings_dialin","text":"You can set up your environment to allow users to dial in to a meeting using a SIP-capable phone system that is connected to a public switched telephone network (PSTN). This feature uses the ilink TeamCall Meeting Gateway (TMG). To enable meeting dial-in, the following must be installed in your Sametime server: Sametime 11.6 or later versions Debian 11 Linux host system or VMware to run TMG service (on-premises or in private cloud) CPU, RAM of TMG host: 25% each of the capacity of the Sametime server host To enable your Sametime environment for dial-in, you must contact an ilink sales representative at sales@ilink.de . The ilink professional service team performs a remote installation. After the TMG is installed, it runs in the background and no administrator support is required. The TeamCall Meeting Gateway for HCL Sametime Premium provides audio waiting rooms for moderated meetings. If the user experiences dial-in or telephony problems, they must contact ilink support at sales@ilink.de to open a ticket for assistance. Parent topic: Meetings","title":"Enabling conference dial-in"},{"location":"admin/migrating.html","text":"Migrating and Upgrading This section provides information on migrating data from an earlier release to Sametime 12. Planning for migration to Sametime 12 This section describes the best practices for planning migration from an earlier Sametime release. Upgrading to a new version or applying a fixpack Newer versions and fix packs contain new features and fixes. You do not need to remove your current Sametime 12 installation when upgrading to a new version. Migrating from older Sametime versions Upgrading from Meetings 11.5 and 11.6 Upgrade in place is possible for both Docker and Kubernetes. This section provides information on updating from Sametime 11.6 to Sametime 12. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Migrating and Upgrading {#migrating .task}"},{"location":"admin/migrating.html#migrating","text":"This section provides information on migrating data from an earlier release to Sametime 12. Planning for migration to Sametime 12 This section describes the best practices for planning migration from an earlier Sametime release. Upgrading to a new version or applying a fixpack Newer versions and fix packs contain new features and fixes. You do not need to remove your current Sametime 12 installation when upgrading to a new version. Migrating from older Sametime versions Upgrading from Meetings 11.5 and 11.6 Upgrade in place is possible for both Docker and Kubernetes. This section provides information on updating from Sametime 11.6 to Sametime 12. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Migrating and Upgrading"},{"location":"admin/migrating_upgrading.html","text":"Migrating from older Sametime versions Parent topic: Migrating and Upgrading Planning for migration to Sametime 12 Review Planning for migration to Sametime 12 before continuing. Converting from native Domino directory to LDAP If the older Sametime deployment is not configured for LDAP, the contact lists must be converted using the Stnamechange utility before migrating. The Stnamechange utility is currently unavailable on Sametime 12. Run the utility on Sametime 9, 10, or 11 before migrating. Follow the instructions provided in previous Sametime versions to perform the Stnamechange utility. Sametime Name Change Utility 9.0 Sametime Name Change Utility 10.0 Sametime Name Change Utility 11.0 | 11.5 | 11.6 The LDAP task is used to convert to LDAP. Run the task on the older Sametime Community server. Migrating contact lists (VPUSERINFO.NSF) In Sametime 9.x, 10.x and 11.x, VPUserinfo.nsf stores all the contact list for users. To migrate your contact list from a previous release to Sametime 12, the contact list data must be migrated to MongoDB. Follow the steps below to migrate your contact list. On the Sametime server you wish to migrate from, unzip notes-migration.zip to the server's program directory from the Sametime_12.0.zip or Sametime_Premium_12.0.zip downloaded from HCL Software Portal. Note: You must run this command from the Sametime server's program directory where sametime.ini and notes.ini exist. Run the following commands to setup the environment and run the migration task. Linux source ./setenv.sh ./notes-migration.sh Note: This prompts for locations and options before running the task. Running the notes-migration.zip tool moves your contact list to MongoDB. Windows notes-migration.bat Note: Windows does not require the setup command and prompts for locations and options before running the task. Moving the users Once you are finished testing and are ready to migrate the users, there are a few different strategies to choose from. Using the DNS. The hostname is the same and there is nothing additional to configure on the client side. In this scenario, the DNS would be changed to point to the new environment. DNS may take some time to propagate throughout your network, thus you may need to leave both old and new servers running simultaneously for a period of time. Be certain the vpuserinfo.nsf has been migrated to the Sametime 12 deployment to keep the contacts up to date. You can check stlog.nsf or Community Logins by Date to see how many users are still on the old server. Restarting the old servers periodically also forces users onto the new servers as soon as DNS is updated. Using a load balancer. If your existing environment has a load balancer in front of it, you can simply add the new servers behind the load balancer and shut down the old servers. Pushing a new hostname using Managed-Community-Configs.xml. You can create the managed-community-configs.xml file and push it to the users using a Sametime policy. The changes take effect the next time a user restarts their client. It is configured for the new hostname. Have a back-out plan You must have a back-out plan in case your migration does not succeed.","title":"Migrating from older Sametime versions {#migrating_upgrading .task}"},{"location":"admin/migrating_upgrading.html#migrating_upgrading","text":"Parent topic: Migrating and Upgrading","title":"Migrating from older Sametime versions"},{"location":"admin/migrating_upgrading.html#task_osh_n2m_c5b","text":"Review Planning for migration to Sametime 12 before continuing.","title":"Planning for migration to Sametime 12"},{"location":"admin/migrating_upgrading.html#task_fxj_t2m_c5b","text":"If the older Sametime deployment is not configured for LDAP, the contact lists must be converted using the Stnamechange utility before migrating. The Stnamechange utility is currently unavailable on Sametime 12. Run the utility on Sametime 9, 10, or 11 before migrating. Follow the instructions provided in previous Sametime versions to perform the Stnamechange utility. Sametime Name Change Utility 9.0 Sametime Name Change Utility 10.0 Sametime Name Change Utility 11.0 | 11.5 | 11.6 The LDAP task is used to convert to LDAP. Run the task on the older Sametime Community server.","title":"Converting from native Domino directory to LDAP"},{"location":"admin/migrating_upgrading.html#task_owl_y2m_c5b","text":"In Sametime 9.x, 10.x and 11.x, VPUserinfo.nsf stores all the contact list for users. To migrate your contact list from a previous release to Sametime 12, the contact list data must be migrated to MongoDB. Follow the steps below to migrate your contact list. On the Sametime server you wish to migrate from, unzip notes-migration.zip to the server's program directory from the Sametime_12.0.zip or Sametime_Premium_12.0.zip downloaded from HCL Software Portal. Note: You must run this command from the Sametime server's program directory where sametime.ini and notes.ini exist. Run the following commands to setup the environment and run the migration task. Linux source ./setenv.sh ./notes-migration.sh Note: This prompts for locations and options before running the task. Running the notes-migration.zip tool moves your contact list to MongoDB. Windows notes-migration.bat Note: Windows does not require the setup command and prompts for locations and options before running the task.","title":"Migrating contact lists (VPUSERINFO.NSF)"},{"location":"admin/migrating_upgrading.html#task_tgf_pfm_c5b","text":"Once you are finished testing and are ready to migrate the users, there are a few different strategies to choose from. Using the DNS. The hostname is the same and there is nothing additional to configure on the client side. In this scenario, the DNS would be changed to point to the new environment. DNS may take some time to propagate throughout your network, thus you may need to leave both old and new servers running simultaneously for a period of time. Be certain the vpuserinfo.nsf has been migrated to the Sametime 12 deployment to keep the contacts up to date. You can check stlog.nsf or Community Logins by Date to see how many users are still on the old server. Restarting the old servers periodically also forces users onto the new servers as soon as DNS is updated. Using a load balancer. If your existing environment has a load balancer in front of it, you can simply add the new servers behind the load balancer and shut down the old servers. Pushing a new hostname using Managed-Community-Configs.xml. You can create the managed-community-configs.xml file and push it to the users using a Sametime policy. The changes take effect the next time a user restarts their client. It is configured for the new hostname.","title":"Moving the users"},{"location":"admin/migrating_upgrading.html#task_d1r_rfm_c5b","text":"You must have a back-out plan in case your migration does not succeed.","title":"Have a back-out plan"},{"location":"admin/mongodb.html","text":"MongoDB MongoDB is used to store data for persistent chat, mobile push notifications, meetings and contact lists. If you have an existing MongoDB deployment, you can use it. However, if you do not have a MongoDB already installed you must install one. MongoDB can be installed on a separate server or in the same Kubernetes cluster as Sametime. As with the storage size needed, the use of a dedicated server depends on your organization. After MongoDB is installed, it must be configured to communicate with the Sametime server. See Installing the MongoDB for additional information. Data related to chats and meetings is stored in MongoDB. This includes screenshots, emojis, chat logs, meeting reservation information, and contact lists. By default, data is saved for 90 days. You can change the default on the time to live (TTL) setting. For more information, see Updating the time-to-live index for persistent chat . Data is stored in data/db path which is specified in the mongod.conf configuration file. When determining the size for your MongoDB, consider the activity used by users in your organization. Refer to the MongoDB documentation for information on setting the size for the database. Parent topic: Prerequistes","title":"MongoDB"},{"location":"admin/mongodb.html#mongodb","text":"MongoDB is used to store data for persistent chat, mobile push notifications, meetings and contact lists. If you have an existing MongoDB deployment, you can use it. However, if you do not have a MongoDB already installed you must install one. MongoDB can be installed on a separate server or in the same Kubernetes cluster as Sametime. As with the storage size needed, the use of a dedicated server depends on your organization. After MongoDB is installed, it must be configured to communicate with the Sametime server. See Installing the MongoDB for additional information. Data related to chats and meetings is stored in MongoDB. This includes screenshots, emojis, chat logs, meeting reservation information, and contact lists. By default, data is saved for 90 days. You can change the default on the time to live (TTL) setting. For more information, see Updating the time-to-live index for persistent chat . Data is stored in data/db path which is specified in the mongod.conf configuration file. When determining the size for your MongoDB, consider the activity used by users in your organization. Refer to the MongoDB documentation for information on setting the size for the database. Parent topic: Prerequistes","title":"MongoDB"},{"location":"admin/network_planning.html","text":"Network planning for meetings Sametime meetings generate two types of traffic: web traffic and RTP media streams. Web traffic is standard HTTPS. And, media streams by default use UDP for optimal performance. If the UDP service is unavailable, enabling TCP for RTP media streams is supported. To support the Sametime default configuration, use the following ports for client access: For Kubernetes deployments: TCP port 443 and UDP port 30000 For Docker deployments: TCP port 443 and UDP port 10000 If you enable TCP for media streams, you can configure it to use TCP port 443. However, it does not send media streams as HTTPS data. Confirm with your security and firewall teams that this non-standard use of HTTPS port 443 will be permitted. The amount of bandwidth consumed by Sametime Meetings depends on several factors, such as the quality of video being shared, the number of video and audio streams being shared, and more. The default limit for simultaneous video streams is 8 . Increasing this value affects bandwidth consumption. For more information, refer to Increasing active cameras . You must discuss the design of your Sametime deployment with your network and security teams before implementation. Many common network layer devices and technologies introduce latency, which can degrade the user experience. Identify all potential bottlenecks, for example, firewall, proxy, VPN, packet shapers, and intrusion prevention devices before deploying servers. Session Traversal Utilities for NAT (STUN) Session Traversal Utilities for NAT (STUN) is a standardized set of methods, including a network protocol, for NAT traversal of Network address transalation (NAT) gateways in applications of real-time voice, video, messaging, and other interactive communications. Determining where to install Sametime You can extend access to Sametime outside of your internal network to attendees on the Internet. Sametime can be installed in the demilitarized network zone (DMZ) and the required ports for connectivity need to be opened on the firewalls surrounding the DMZ. You can also use a third party Kubernetes cloud provider such as Amazon EKS, Google GKE, or other third party Kubernetes provider to deploy Sametime. For more information, see the Deploying Sametime 12 on Google Kubernetes Engine guide. Parent topic: Planning","title":"Network planning for meetings {#network_planning .concept}"},{"location":"admin/network_planning.html#network_planning","text":"Sametime meetings generate two types of traffic: web traffic and RTP media streams. Web traffic is standard HTTPS. And, media streams by default use UDP for optimal performance. If the UDP service is unavailable, enabling TCP for RTP media streams is supported. To support the Sametime default configuration, use the following ports for client access: For Kubernetes deployments: TCP port 443 and UDP port 30000 For Docker deployments: TCP port 443 and UDP port 10000 If you enable TCP for media streams, you can configure it to use TCP port 443. However, it does not send media streams as HTTPS data. Confirm with your security and firewall teams that this non-standard use of HTTPS port 443 will be permitted. The amount of bandwidth consumed by Sametime Meetings depends on several factors, such as the quality of video being shared, the number of video and audio streams being shared, and more. The default limit for simultaneous video streams is 8 . Increasing this value affects bandwidth consumption. For more information, refer to Increasing active cameras . You must discuss the design of your Sametime deployment with your network and security teams before implementation. Many common network layer devices and technologies introduce latency, which can degrade the user experience. Identify all potential bottlenecks, for example, firewall, proxy, VPN, packet shapers, and intrusion prevention devices before deploying servers. Session Traversal Utilities for NAT (STUN) Session Traversal Utilities for NAT (STUN) is a standardized set of methods, including a network protocol, for NAT traversal of Network address transalation (NAT) gateways in applications of real-time voice, video, messaging, and other interactive communications. Determining where to install Sametime You can extend access to Sametime outside of your internal network to attendees on the Internet. Sametime can be installed in the demilitarized network zone (DMZ) and the required ports for connectivity need to be opened on the firewalls surrounding the DMZ. You can also use a third party Kubernetes cloud provider such as Amazon EKS, Google GKE, or other third party Kubernetes provider to deploy Sametime. For more information, see the Deploying Sametime 12 on Google Kubernetes Engine guide. Parent topic: Planning","title":"Network planning for meetings"},{"location":"admin/new_client_ids.html","text":"Sametime Client IDs Sametime clients declare their client type when connecting to the Sametime server. There are several features that use the client types. If planning on implementing these features, the Sametime client types should be included. For more information on client types, see Table of Client types that are connecting to a Sametime server . Parent topic: Managing client types and log-ins","title":"Sametime Client IDs {#new_client_ids .task}"},{"location":"admin/new_client_ids.html#new_client_ids","text":"Sametime clients declare their client type when connecting to the Sametime server. There are several features that use the client types. If planning on implementing these features, the Sametime client types should be included. For more information on client types, see Table of Client types that are connecting to a Sametime server . Parent topic: Managing client types and log-ins","title":"Sametime Client IDs"},{"location":"admin/notices.html","text":"Notices Licensed Materials - Property of HCL Limited. \u00a9 Copyright HCL Technologies Limited 1998, 2022 This information was developed for products and services offered in the US. HCL may not offer the products, services, or features discussed in this document in other countries. Consult your local HCL representative for information on the products and services currently available in your area. Any reference to an HCL product, program, or service is not intended to state or imply that only that HCL product, program, or service may be used. Any functionally equivalent product, program, or service that does not infringe any HCL intellectual property right may be used instead. However, it is the user's responsibility to evaluate and verify the operation of any non-HCL product, program, or service. HCL may have patents or pending patent applications covering subject matter described in this document. The furnishing of this document does not grant you any license to these patents. You can send license inquiries, in writing, to: HCL 330 Potrero Ave. Sunnyvale, CA 94085 USA Attention: Office of the General Counsel For license inquiries regarding double-byte character set (DBCS) information, contact the HCL Intellectual Property Department in your country or send inquiries, in writing, to: HCL 330 Potrero Ave. Sunnyvale, CA 94085 USA Attention: Office of the General Counsel HCL TECHNOLOGIES LTD. PROVIDES THIS PUBLICATION \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do not allow disclaimer of express or implied warranties in certain transactions, therefore, this statement may not apply to you. This information could include technical inaccuracies or typographical errors. Changes are periodically made to the information herein; these changes will be incorporated in new editions of the publication. HCL may make improvements and/or changes in the product(s) and/or the program(s) described in this publication at any time without notice. Any references in this information to non-HCL websites are provided for convenience only and do not in any manner serve as an endorsement of those websites. The materials at those websites are not part of the materials for this HCL product and use of those websites is at your own risk. HCL may use or distribute any of the information you provide in any way it believes appropriate without incurring any obligation to you. Licensees of this program who wish to have information about it for the purpose of enabling: (i) the exchange of information between independently created programs and other programs (including this one) and (ii) the mutual use of the information which has been exchanged, should contact: HCL 330 Potrero Ave. Sunnyvale, CA 94085 USA Attention: Office of the General Counsel Such information may be available, subject to appropriate terms and conditions, including in some cases, payment of a fee. The licensed program described in this document and all licensed material available for it are provided by HCL under terms of the HCL Customer Agreement, HCL International Program License Agreement or any equivalent agreement between us. The performance data discussed herein is presented as derived under specific operating conditions. Actual results may vary. Information concerning non-HCL products was obtained from the suppliers of those products, their published announcements or other publicly available sources. HCL has not tested those products and cannot confirm the accuracy of performance, compatibility or any other claims related to non-HCL products. Questions on the capabilities of non-HCL products should be addressed to the suppliers of those products. Statements regarding HCL's future direction or intent are subject to change or withdrawal without notice, and represent goals and objectives only. This information contains examples of data and reports used in daily business operations. To illustrate them as completely as possible, the examples include the names of individuals, companies, brands, and products. All of these names are fictitious and any similarity to actual people or business enterprises is entirely coincidental. COPYRIGHT LICENSE: This information contains sample application programs in source language, which illustrate programming techniques on various operating platforms. You may copy, modify, and distribute these sample programs in any form without payment to HCL, for the purposes of developing, using, marketing or distributing application programs conforming to the application programming interface for the operating platform for which the sample programs are written. These examples have not been thoroughly tested under all conditions. HCL, therefore, cannot guarantee or imply reliability, serviceability, or function of these programs. The sample programs are provided \"AS IS,\" without warranty of any kind. HCL shall not be liable for any damages arising out of your use of the sample programs. Each copy or any portion of these sample programs or any derivative work must include a copyright notice as follows: \u00a9 (your company name) (year). Portions of this code are derived from HCL Technologies Limited. Sample Programs. \u00a9 HCL Technologies Limited 1998, 2022. Parent topic: HCL Sametime Administration Guide 12.0.1 Trademarks HCL Technologies Ltd. and HCL Technologies Ltd. logo, and hcl.com are trademarks or registered trademarks of HCL Technologies Ltd., registered in many jurisdictions worldwide. Other product and service names might be trademarks of HCL or other companies. Terms and conditions for product documentation Permissions for the use of these publications are granted subject to the following terms and conditions. Applicability These terms and conditions are in addition to any terms of use for the HCL website. Personal use You may reproduce these publications for your personal, noncommercial use provided that all proprietary notices are preserved. You may not distribute, display or make derivative work of these publications, or any portion thereof, without the express consent of HCL. Commercial use You may reproduce, distribute and display these publications solely within your enterprise provided that all proprietary notices are preserved. You may not make derivative works of these publications, or reproduce, distribute or display these publications or any portion thereof outside your enterprise, without the express consent of HCL. Rights Except as expressly granted in this permission, no other permissions, licenses or rights are granted, either express or implied, to the publications or any information, data, software or other intellectual property contained therein. HCL reserves the right to withdraw the permissions granted herein whenever, in its discretion, the use of the publications is detrimental to its interest or, as determined by HCL, the above instructions are not being properly followed. You may not download, export or re-export this information except in full compliance with all applicable laws and regulations, including all United States export laws and regulations. HCL MAKES NO GUARANTEE ABOUT THE CONTENT OF THESE PUBLICATIONS. THE PUBLICATIONS ARE PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.","title":"Notices {#booknotices .concept}"},{"location":"admin/notices.html#booknotices","text":"Licensed Materials - Property of HCL Limited. \u00a9 Copyright HCL Technologies Limited 1998, 2022 This information was developed for products and services offered in the US. HCL may not offer the products, services, or features discussed in this document in other countries. Consult your local HCL representative for information on the products and services currently available in your area. Any reference to an HCL product, program, or service is not intended to state or imply that only that HCL product, program, or service may be used. Any functionally equivalent product, program, or service that does not infringe any HCL intellectual property right may be used instead. However, it is the user's responsibility to evaluate and verify the operation of any non-HCL product, program, or service. HCL may have patents or pending patent applications covering subject matter described in this document. The furnishing of this document does not grant you any license to these patents. You can send license inquiries, in writing, to: HCL 330 Potrero Ave. Sunnyvale, CA 94085 USA Attention: Office of the General Counsel For license inquiries regarding double-byte character set (DBCS) information, contact the HCL Intellectual Property Department in your country or send inquiries, in writing, to: HCL 330 Potrero Ave. Sunnyvale, CA 94085 USA Attention: Office of the General Counsel HCL TECHNOLOGIES LTD. PROVIDES THIS PUBLICATION \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do not allow disclaimer of express or implied warranties in certain transactions, therefore, this statement may not apply to you. This information could include technical inaccuracies or typographical errors. Changes are periodically made to the information herein; these changes will be incorporated in new editions of the publication. HCL may make improvements and/or changes in the product(s) and/or the program(s) described in this publication at any time without notice. Any references in this information to non-HCL websites are provided for convenience only and do not in any manner serve as an endorsement of those websites. The materials at those websites are not part of the materials for this HCL product and use of those websites is at your own risk. HCL may use or distribute any of the information you provide in any way it believes appropriate without incurring any obligation to you. Licensees of this program who wish to have information about it for the purpose of enabling: (i) the exchange of information between independently created programs and other programs (including this one) and (ii) the mutual use of the information which has been exchanged, should contact: HCL 330 Potrero Ave. Sunnyvale, CA 94085 USA Attention: Office of the General Counsel Such information may be available, subject to appropriate terms and conditions, including in some cases, payment of a fee. The licensed program described in this document and all licensed material available for it are provided by HCL under terms of the HCL Customer Agreement, HCL International Program License Agreement or any equivalent agreement between us. The performance data discussed herein is presented as derived under specific operating conditions. Actual results may vary. Information concerning non-HCL products was obtained from the suppliers of those products, their published announcements or other publicly available sources. HCL has not tested those products and cannot confirm the accuracy of performance, compatibility or any other claims related to non-HCL products. Questions on the capabilities of non-HCL products should be addressed to the suppliers of those products. Statements regarding HCL's future direction or intent are subject to change or withdrawal without notice, and represent goals and objectives only. This information contains examples of data and reports used in daily business operations. To illustrate them as completely as possible, the examples include the names of individuals, companies, brands, and products. All of these names are fictitious and any similarity to actual people or business enterprises is entirely coincidental. COPYRIGHT LICENSE: This information contains sample application programs in source language, which illustrate programming techniques on various operating platforms. You may copy, modify, and distribute these sample programs in any form without payment to HCL, for the purposes of developing, using, marketing or distributing application programs conforming to the application programming interface for the operating platform for which the sample programs are written. These examples have not been thoroughly tested under all conditions. HCL, therefore, cannot guarantee or imply reliability, serviceability, or function of these programs. The sample programs are provided \"AS IS,\" without warranty of any kind. HCL shall not be liable for any damages arising out of your use of the sample programs. Each copy or any portion of these sample programs or any derivative work must include a copyright notice as follows: \u00a9 (your company name) (year). Portions of this code are derived from HCL Technologies Limited. Sample Programs. \u00a9 HCL Technologies Limited 1998, 2022. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Notices"},{"location":"admin/notices.html#trademarks","text":"HCL Technologies Ltd. and HCL Technologies Ltd. logo, and hcl.com are trademarks or registered trademarks of HCL Technologies Ltd., registered in many jurisdictions worldwide. Other product and service names might be trademarks of HCL or other companies.","title":"Trademarks"},{"location":"admin/notices.html#termsandconditions","text":"Permissions for the use of these publications are granted subject to the following terms and conditions.","title":"Terms and conditions for product documentation"},{"location":"admin/notices.html#applicability","text":"These terms and conditions are in addition to any terms of use for the HCL website.","title":"Applicability"},{"location":"admin/notices.html#personal-use","text":"You may reproduce these publications for your personal, noncommercial use provided that all proprietary notices are preserved. You may not distribute, display or make derivative work of these publications, or any portion thereof, without the express consent of HCL.","title":"Personal use"},{"location":"admin/notices.html#commercial-use","text":"You may reproduce, distribute and display these publications solely within your enterprise provided that all proprietary notices are preserved. You may not make derivative works of these publications, or reproduce, distribute or display these publications or any portion thereof outside your enterprise, without the express consent of HCL.","title":"Commercial use"},{"location":"admin/notices.html#rights","text":"Except as expressly granted in this permission, no other permissions, licenses or rights are granted, either express or implied, to the publications or any information, data, software or other intellectual property contained therein. HCL reserves the right to withdraw the permissions granted herein whenever, in its discretion, the use of the publications is detrimental to its interest or, as determined by HCL, the above instructions are not being properly followed. You may not download, export or re-export this information except in full compliance with all applicable laws and regulations, including all United States export laws and regulations. HCL MAKES NO GUARANTEE ABOUT THE CONTENT OF THESE PUBLICATIONS. THE PUBLICATIONS ARE PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.","title":"Rights"},{"location":"admin/over_accessibility.html","text":"Accessibility features for Sametime Accessibility features help users who have a disability, such as restricted mobility or limited vision, to use information technology products successfully. HCL\u00ae strives to provide products with usable access for everyone. Accessibility features HCL Sametime\u00ae uses the latest W3C Standard, WAI-ARIA 1.0 to ensure compliance to US Section 508 and Web Content Accessibility Guidelines (WCAG) 2.0 . Note: For the best accessible experience, use the latest versions of both the screen reader and browser. The following features are for vision-impaired users: Can be operated by using only the keyboard Communicates all information independent of color Supports interfaces commonly used by screen readers and screen magnifiers Supports the attachment of alternate output devices Provides help information in an accessible format Supports high contrast using a white background (some icons may not display properly on a colored background) Attention: If you modify the level of contrast, you must restart the HCL Sametime client for the change to take effect. When a Sametime web browser user chooses to share the screen, the user is prompted with three options: to share the entire screen, part of the screen, or a particular application. For this prompt to be accessible to a screen reader, the user must install the Java\u2122 access bridge. For installation instructions, see the Oracle web site . The following features are for users who have mobility impairments or limited use of their hands: Allows the users to request more time to complete timed responses Can be operated by using only the keyboard Supports the attachment of alternative input and output devices The following features are for the deaf and hard of hearing users: Supports alternatives to audio information Supports adjustable volume control The console does not flash the screen at rates that could induce epileptic seizures The help system for the Integrated Solutions Console has the following accessibility features: Uses the accessibility support enabled by the browser that is used to display the help Enables navigation by using the keyboard Keyboard navigation To move through the controls on a particular page, use the Tab key. To click a link or control on a page using the keyboard, navigate to the link or control and press Enter. To make a selection in a checkbox, use the Space key. To change the navigation view using the keyboard, follow these steps. Navigate to the View selection list pressing Tab. Use the up and down arrows to change the value of the selection list. Press Enter. The tasks displayed in the navigation are changed according to your selection. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Accessibility features for Sametime {#over_accessibility .concept}"},{"location":"admin/over_accessibility.html#over_accessibility","text":"Accessibility features help users who have a disability, such as restricted mobility or limited vision, to use information technology products successfully. HCL\u00ae strives to provide products with usable access for everyone.","title":"Accessibility features for Sametime"},{"location":"admin/over_accessibility.html#accessibility-features","text":"HCL Sametime\u00ae uses the latest W3C Standard, WAI-ARIA 1.0 to ensure compliance to US Section 508 and Web Content Accessibility Guidelines (WCAG) 2.0 . Note: For the best accessible experience, use the latest versions of both the screen reader and browser. The following features are for vision-impaired users: Can be operated by using only the keyboard Communicates all information independent of color Supports interfaces commonly used by screen readers and screen magnifiers Supports the attachment of alternate output devices Provides help information in an accessible format Supports high contrast using a white background (some icons may not display properly on a colored background) Attention: If you modify the level of contrast, you must restart the HCL Sametime client for the change to take effect. When a Sametime web browser user chooses to share the screen, the user is prompted with three options: to share the entire screen, part of the screen, or a particular application. For this prompt to be accessible to a screen reader, the user must install the Java\u2122 access bridge. For installation instructions, see the Oracle web site . The following features are for users who have mobility impairments or limited use of their hands: Allows the users to request more time to complete timed responses Can be operated by using only the keyboard Supports the attachment of alternative input and output devices The following features are for the deaf and hard of hearing users: Supports alternatives to audio information Supports adjustable volume control The console does not flash the screen at rates that could induce epileptic seizures The help system for the Integrated Solutions Console has the following accessibility features: Uses the accessibility support enabled by the browser that is used to display the help Enables navigation by using the keyboard","title":"Accessibility features"},{"location":"admin/over_accessibility.html#keyboard-navigation","text":"To move through the controls on a particular page, use the Tab key. To click a link or control on a page using the keyboard, navigate to the link or control and press Enter. To make a selection in a checkbox, use the Space key. To change the navigation view using the keyboard, follow these steps. Navigate to the View selection list pressing Tab. Use the up and down arrows to change the value of the selection list. Press Enter. The tasks displayed in the navigation are changed according to your selection. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Keyboard navigation"},{"location":"admin/overview_encryption.html","text":"Encryption usage in Sametime HCL\u00ae Sametime\u00ae uses several types of encryption to protect data. The following table lists the types of encryption for various types of data and the length of each type of encryption key. Algorithm Mode Related key length Function HMAC-SHA256 Signature 256-bit (via server shared secret) JWT SHA256 Integrity check 256-bit Conversation integrity RC2 Confidentiality (user data) Various key length (40-bit/128-bit in different circumstances) (generated via Diffie-Helman) Message encryption TLS 1.2 In transit data 128/256-bit depending on cipher chosen HTTPS c2s traffic DTLS/SRTP In transit data 256-bit Media c2s traffic OLM In transit data 256-bit E2EE c2c media bcrypt Stored data 10 salt rounds Meeting password Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Encryption usage in Sametime {#overview_encryption .concept}"},{"location":"admin/overview_encryption.html#overview_encryption","text":"HCL\u00ae Sametime\u00ae uses several types of encryption to protect data. The following table lists the types of encryption for various types of data and the length of each type of encryption key. Algorithm Mode Related key length Function HMAC-SHA256 Signature 256-bit (via server shared secret) JWT SHA256 Integrity check 256-bit Conversation integrity RC2 Confidentiality (user data) Various key length (40-bit/128-bit in different circumstances) (generated via Diffie-Helman) Message encryption TLS 1.2 In transit data 128/256-bit depending on cipher chosen HTTPS c2s traffic DTLS/SRTP In transit data 256-bit Media c2s traffic OLM In transit data 256-bit E2EE c2c media bcrypt Stored data 10 salt rounds Meeting password Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Encryption usage in Sametime"},{"location":"admin/plan_cluster_chat.html","text":"Configure high capacity for chat Sametime supports up to 10,000 simultaneous log-ins with a standard single community pod, mux pod and proxy pod in a Kubernetes deployment. Docker deployments of Sametime support 10000 simultaneous log-ins. The Sametime mux is used to front-end client connections between the Sametime Connect client and the Sametime Embedded client inside of HCL Notes. If you need to additional capacity for these clients, you can deploy multiple community pods inside your Kubernetes cluster. The number of community pods is defined in the values.yaml file and each additional pod supports up to 10,000 additional clients. The community pod does not axiomatically scale, it is important to estimate the number of pods needed and define the setting in the values.yaml file. In the values.yaml file ensure that this setting is set to true, which is the default setting: enableMuxDeployment: true Change the below setting to the desired number of community pods: numberOfCommunityServers: 1 To find the Kubernetes service that front-ends the mux issue the command: kubectl get svc | grep mux The ingress controller in a Kubernetes cluster front-ends the connection to the web and mobile clients and the proxy pod services those connections. Additionally, the community pod validates log ins and service the users as well. Sametime supports up to 10,000 simultaneous connections in a Kubernetes environment, and if more are needed, it is recommended to deploy an additional 1 ingress controller pod, 1 proxy pod and 1 community pod per 10,000 web and mobile clients. Parent topic: Clustering and high availability","title":"Configure high capacity for chat {#plan_cluster_chat .task}"},{"location":"admin/plan_cluster_chat.html#plan_cluster_chat","text":"Sametime supports up to 10,000 simultaneous log-ins with a standard single community pod, mux pod and proxy pod in a Kubernetes deployment. Docker deployments of Sametime support 10000 simultaneous log-ins. The Sametime mux is used to front-end client connections between the Sametime Connect client and the Sametime Embedded client inside of HCL Notes. If you need to additional capacity for these clients, you can deploy multiple community pods inside your Kubernetes cluster. The number of community pods is defined in the values.yaml file and each additional pod supports up to 10,000 additional clients. The community pod does not axiomatically scale, it is important to estimate the number of pods needed and define the setting in the values.yaml file. In the values.yaml file ensure that this setting is set to true, which is the default setting: enableMuxDeployment: true Change the below setting to the desired number of community pods: numberOfCommunityServers: 1 To find the Kubernetes service that front-ends the mux issue the command: kubectl get svc | grep mux The ingress controller in a Kubernetes cluster front-ends the connection to the web and mobile clients and the proxy pod services those connections. Additionally, the community pod validates log ins and service the users as well. Sametime supports up to 10,000 simultaneous connections in a Kubernetes environment, and if more are needed, it is recommended to deploy an additional 1 ingress controller pod, 1 proxy pod and 1 community pod per 10,000 web and mobile clients. Parent topic: Clustering and high availability","title":"Configure high capacity for chat"},{"location":"admin/plan_cluster_meetings.html","text":"Configure high capacity for meetings High availability is supported for the front-end web traffic to the Kubernetes cluster. You can deploy multiple front-ends on different physical and virtual nodes pointing to the same back-end in order to distribute load and survive a node outage. High availability is not supported for active meetings, but fail over is supported. If a server hosting a meeting goes down, users in who are in meetings on that server are briefly interrupted. The client reconnection timer reconnects the clients and distributes them to an available node. In some circumstances, a server that stops responding causes a client to disconnect from a meeting. Users can reconnect to the meeting from their recent meetings list and rejoin the meeting on an available server. Sametime can be expanded to more than one geography or another network by deploying multiple video bridges. This is different from deploying multiple video nodes, which are all co-located. When you deploy multiple video bridges the user receives audio and video from the video bridge that is located the closest to them. For more details, see Configuring autoscaling for video . For sizing and deployment related questions, contact an HCL support personal by completing the Talk to a Technical Expert form. Docker Meetings are sized based on what is happening in the environment at any given time. For Docker deployments, there are many variables including the CPU and memory size of the Docker instance. A large Docker instance can support up to 200 concurrent peak users, but that does not take into consideration how many of the meetings are being recorded. Meeting recordings are CPU intensive. A Docker instance is best suited for a small department or focused team than an enterprise size deployment. Kubernetes If you are deploying Sametime meetings to your entire organization, Kubernetes is a better choice than Docker. The Kubernetes autoscaling feature provides for the flexibility needed in an enterprise deployment. Autoscaling is a feature in which a cluster adjusts the number of nodes based upon current usage and monitoring. In Kubernetes environments, a Horizontal Pod Autoscaler is leveraged to automatically scale the environment upon demand. There are two configurations, one for video and one for recorder. When you create your node pools for video and recorder it is important to estimate how many nodes are needed. Video nodes are dedicated to a single video pod Recorder nodes are dedicated to the recorder pod You can either have a node dedicated to one recorder or you can size your recorder node pool instances to support more than one recorder per node. Configuring autoscaling for recorder A recorder is used when a meeting is being recorded and when live streaming a video. The Kubernetes autoscaler adjusts the use of recorder pods based on settings in the recorder.yaml file. Configuring autoscaling for video The Kubernetes autoscaler adjusts the use of video pods based on the configured values in the video.yaml file. Parent topic: Clustering and high availability","title":"Configure high capacity for meetings {#plan_cluster_meetings .concept}"},{"location":"admin/plan_cluster_meetings.html#plan_cluster_meetings","text":"High availability is supported for the front-end web traffic to the Kubernetes cluster. You can deploy multiple front-ends on different physical and virtual nodes pointing to the same back-end in order to distribute load and survive a node outage. High availability is not supported for active meetings, but fail over is supported. If a server hosting a meeting goes down, users in who are in meetings on that server are briefly interrupted. The client reconnection timer reconnects the clients and distributes them to an available node. In some circumstances, a server that stops responding causes a client to disconnect from a meeting. Users can reconnect to the meeting from their recent meetings list and rejoin the meeting on an available server. Sametime can be expanded to more than one geography or another network by deploying multiple video bridges. This is different from deploying multiple video nodes, which are all co-located. When you deploy multiple video bridges the user receives audio and video from the video bridge that is located the closest to them. For more details, see Configuring autoscaling for video . For sizing and deployment related questions, contact an HCL support personal by completing the Talk to a Technical Expert form.","title":"Configure high capacity for meetings"},{"location":"admin/plan_cluster_meetings.html#section_mhc_fqk_bvb","text":"Meetings are sized based on what is happening in the environment at any given time. For Docker deployments, there are many variables including the CPU and memory size of the Docker instance. A large Docker instance can support up to 200 concurrent peak users, but that does not take into consideration how many of the meetings are being recorded. Meeting recordings are CPU intensive. A Docker instance is best suited for a small department or focused team than an enterprise size deployment.","title":"Docker"},{"location":"admin/plan_cluster_meetings.html#section_wxt_hqk_bvb","text":"If you are deploying Sametime meetings to your entire organization, Kubernetes is a better choice than Docker. The Kubernetes autoscaling feature provides for the flexibility needed in an enterprise deployment. Autoscaling is a feature in which a cluster adjusts the number of nodes based upon current usage and monitoring. In Kubernetes environments, a Horizontal Pod Autoscaler is leveraged to automatically scale the environment upon demand. There are two configurations, one for video and one for recorder. When you create your node pools for video and recorder it is important to estimate how many nodes are needed. Video nodes are dedicated to a single video pod Recorder nodes are dedicated to the recorder pod You can either have a node dedicated to one recorder or you can size your recorder node pool instances to support more than one recorder per node. Configuring autoscaling for recorder A recorder is used when a meeting is being recorded and when live streaming a video. The Kubernetes autoscaler adjusts the use of recorder pods based on settings in the recorder.yaml file. Configuring autoscaling for video The Kubernetes autoscaler adjusts the use of video pods based on the configured values in the video.yaml file. Parent topic: Clustering and high availability","title":"Kubernetes"},{"location":"admin/plan_cluster_meetings_recorder.html","text":"Configuring autoscaling for recorder A recorder is used when a meeting is being recorded and when live streaming a video. The Kubernetes autoscaler adjusts the use of recorder pods based on settings in the recorder.yaml file. To deploy the autoscaler, Promethus must be installed. See installation_prometheus.md for details. When a recorder is being used in a meeting, it is dedicated to that meeting until the user stops the recorder or the meeting is stopped. At that time, the recorder is available to be used again. For example, if two recorders are deployed, only two meetings can be recorded at the same time. A recorder is not available until one of the meetings end. The live streaming feature is also handled by the recorder. Estimate how many recorders you may need and define the minimum and maximum number of recorder pods that are used by the autoscaler. Change directories to installation_directory/ /kubernetes/autoscaling directory. Where installation_directory is the directory the install package is located. Open the recorder.yaml file for editing. Configure the minimum number and maximum number of recorders by adjusting the following settings. minReplicas: minimum\\_value maxReplicas: maximum\\_value For example: minReplicas: 2 maxReplicas: 10 Save and close the file. To deploy the recorder autoscaler, run the following command from the autoscaling directory. kubectl apply -f recorder.yaml If the autoscaler has already been deployed, you can adjust the number of recorder pods available. The following command can be used to adjust the number of recorders. kubectl edit hpa recorder Parent topic: Configure high capacity for meetings","title":"Configuring autoscaling for recorder {#plan_cluster_meetings_recorder .task}"},{"location":"admin/plan_cluster_meetings_recorder.html#plan_cluster_meetings_recorder","text":"A recorder is used when a meeting is being recorded and when live streaming a video. The Kubernetes autoscaler adjusts the use of recorder pods based on settings in the recorder.yaml file. To deploy the autoscaler, Promethus must be installed. See installation_prometheus.md for details. When a recorder is being used in a meeting, it is dedicated to that meeting until the user stops the recorder or the meeting is stopped. At that time, the recorder is available to be used again. For example, if two recorders are deployed, only two meetings can be recorded at the same time. A recorder is not available until one of the meetings end. The live streaming feature is also handled by the recorder. Estimate how many recorders you may need and define the minimum and maximum number of recorder pods that are used by the autoscaler. Change directories to installation_directory/ /kubernetes/autoscaling directory. Where installation_directory is the directory the install package is located. Open the recorder.yaml file for editing. Configure the minimum number and maximum number of recorders by adjusting the following settings. minReplicas: minimum\\_value maxReplicas: maximum\\_value For example: minReplicas: 2 maxReplicas: 10 Save and close the file. To deploy the recorder autoscaler, run the following command from the autoscaling directory. kubectl apply -f recorder.yaml If the autoscaler has already been deployed, you can adjust the number of recorder pods available. The following command can be used to adjust the number of recorders. kubectl edit hpa recorder Parent topic: Configure high capacity for meetings","title":"Configuring autoscaling for recorder"},{"location":"admin/plan_cluster_meetings_video.html","text":"Configuring autoscaling for video The Kubernetes autoscaler adjusts the use of video pods based on the configured values in the video.yaml file. To deploy the autoscaler, Promethus must be installed. See installation_prometheus.md for details. When Sametime is installed for the first time, you must deploy a HorizontalPodAutoscaler. Change directories to installation_directory/ /kubernetes/autoscaling directory. Where installation_directory is the directory the install package is located. Open the file video.yaml for editing. Configure the minimum number and maximum number of video pods by adjusting the following settings. minReplicas: minimum\\_value maxReplicas: maximum\\_value For example: minReplicas: 1 maxReplicas: 3 Save and close the video.yaml file. To deploy the video autoscaler, run the following command from the autoscaling directory. kubectl apply -f video.yaml If the autoscaler has already been deployed, you can adjust the number of video nodes available. The following command can be used to adjust the number of video nodes. kubectl edit hpa video Parent topic: Configure high capacity for meetings","title":"Configuring autoscaling for video {#plan_cluster_meetings_video .task}"},{"location":"admin/plan_cluster_meetings_video.html#plan_cluster_meetings_video","text":"The Kubernetes autoscaler adjusts the use of video pods based on the configured values in the video.yaml file. To deploy the autoscaler, Promethus must be installed. See installation_prometheus.md for details. When Sametime is installed for the first time, you must deploy a HorizontalPodAutoscaler. Change directories to installation_directory/ /kubernetes/autoscaling directory. Where installation_directory is the directory the install package is located. Open the file video.yaml for editing. Configure the minimum number and maximum number of video pods by adjusting the following settings. minReplicas: minimum\\_value maxReplicas: maximum\\_value For example: minReplicas: 1 maxReplicas: 3 Save and close the video.yaml file. To deploy the video autoscaler, run the following command from the autoscaling directory. kubectl apply -f video.yaml If the autoscaler has already been deployed, you can adjust the number of video nodes available. The following command can be used to adjust the number of video nodes. kubectl edit hpa video Parent topic: Configure high capacity for meetings","title":"Configuring autoscaling for video"},{"location":"admin/plan_cluster_mongodb.html","text":"Configuring MongoDB for high availability Beginning in Sametime 12.0, MongoDB clustering is handled during the install process for both Docker and Kubernetes. Note: In the MongDB URL, if the user name or password includes the following characters, they must be converted by using a percent sign: / ? # [ ] : @. Parent topic: Clustering and high availability Configuring MongoDB clustering on Docker In the custom.env configuration file on the Sametime server, update the MONGO_ URL field. For information about how to create the MongoDB URL, see the Connection String URI Format topic in the MongoDB documentation. Configuring MongoDB clustering on Kubernetes Provide a single node MongoDB information while running the prepareDeployement script. When the prepareDeployement process is complete, prepare your MongoDB cluster URL. For how to prepare the MongoDB URL, see the Connection String URI Format topic in the MongoDB documentation. Use Base64 encoding to encrypt your MongoDB URL. You can review online websites that provide Base64 encoding or you can set up one on your own. Use the kubectl command to update the sametime-meetings-global-secrets secret configuration file. kubectl edit secret sametime-meetings-global-secrets Inside the sametime-meetings-global-secrets , locate the MongoConnectionUrl section. Replace the value for it with the value from Step 3. Save your changes.","title":"Configuring MongoDB for high availability {#plan_cluster_mongodb .task}"},{"location":"admin/plan_cluster_mongodb.html#plan_cluster_mongodb","text":"Beginning in Sametime 12.0, MongoDB clustering is handled during the install process for both Docker and Kubernetes. Note: In the MongDB URL, if the user name or password includes the following characters, they must be converted by using a percent sign: / ? # [ ] : @. Parent topic: Clustering and high availability","title":"Configuring MongoDB for high availability"},{"location":"admin/plan_cluster_mongodb.html#ncl_ddm_x5b","text":"In the custom.env configuration file on the Sametime server, update the MONGO_ URL field. For information about how to create the MongoDB URL, see the Connection String URI Format topic in the MongoDB documentation.","title":"Configuring MongoDB clustering on Docker"},{"location":"admin/plan_cluster_mongodb.html#nky_cdm_x5b","text":"Provide a single node MongoDB information while running the prepareDeployement script. When the prepareDeployement process is complete, prepare your MongoDB cluster URL. For how to prepare the MongoDB URL, see the Connection String URI Format topic in the MongoDB documentation. Use Base64 encoding to encrypt your MongoDB URL. You can review online websites that provide Base64 encoding or you can set up one on your own. Use the kubectl command to update the sametime-meetings-global-secrets secret configuration file. kubectl edit secret sametime-meetings-global-secrets Inside the sametime-meetings-global-secrets , locate the MongoConnectionUrl section. Replace the value for it with the value from Step 3. Save your changes.","title":"Configuring MongoDB clustering on Kubernetes"},{"location":"admin/planning.html","text":"Planning This section describes the system requirements and server configurations needed for HCL Sametime and HCL Sametime Premium. Sametime versus Sametime Premium Depending on the Sametime product that is installed, detemines which Sametime features are available. HCL Sametime provides secure real-time communication across devices, and HCL Sametime Premium expands those features to include video and file sharing. Prerequistes Before you being the install process, ensure that your environment includes all prerequistes and system requirements. Platforms Meeting server FAQ The Meeting server routes media traffic. Sametime clients Several client types are supported providing flexibility in how users can access chats and meetings. A single deployment can implement several client types. Planning the network topology and connectivity This topic explains how Sametime components are connected and the default ports that are used. There are also example topologies to illustrate how Sametime can be deployed in different scenarios. Network planning for meetings Clustering and high availability High availability and high capacity configuration for Sametime is achieved in different ways depending on which component is being configured for HA. See the topics below to learn more about chat, meetings and MongoDB. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Planning"},{"location":"admin/planning.html#planning","text":"This section describes the system requirements and server configurations needed for HCL Sametime and HCL Sametime Premium. Sametime versus Sametime Premium Depending on the Sametime product that is installed, detemines which Sametime features are available. HCL Sametime provides secure real-time communication across devices, and HCL Sametime Premium expands those features to include video and file sharing. Prerequistes Before you being the install process, ensure that your environment includes all prerequistes and system requirements. Platforms Meeting server FAQ The Meeting server routes media traffic. Sametime clients Several client types are supported providing flexibility in how users can access chats and meetings. A single deployment can implement several client types. Planning the network topology and connectivity This topic explains how Sametime components are connected and the default ports that are used. There are also example topologies to illustrate how Sametime can be deployed in different scenarios. Network planning for meetings Clustering and high availability High availability and high capacity configuration for Sametime is achieved in different ways depending on which component is being configured for HA. See the topics below to learn more about chat, meetings and MongoDB. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Planning"},{"location":"admin/planning_meetingserver.html","text":"Meeting server FAQ The Meeting server routes media traffic. Network related How are media streams transferred? Is there any instance where this would occur peer to peer? : All media traffic is routed through the Sametime server. If I need external access to meetings, in which firewall zone do I place the Sametime Meeting server? : The Sametime server can be placed in the DMZ or your internal firewall zone. Are there any considerations for the network if I have a firewall? : Yes, see Sametime Meetings on Kubernetes Statistics and Monitoring case study . Chats within a meeting How long does chats in the meeting remain? : There are two places that chats are displayed. For authenticated users who are logged into the server, they see the chats in the Sametime clients as a group chat that includes the meeting participants. The chat persists if the user does not close the chat. : For meetings where users are guests, or authenticated users are not logged into a Sametime client, the meeting chat is only inside the meeting room. When the meeting concludes, the meeting room chats are deleted from the meeting room. Can I make the chats persist from one meeting to the next? : When the meeting concludes, the meeting room chats are deleted from the meeting room. Meeting chats do not persist to the next time the same meeting URL is used. Can I enable logging of the chats inside the meeting? : The user can log the chats only if they log into the server using a Sametime client. There are three ways the user can log these chats: - The Sametime Connect client or embedded client have a client-side chat logging feature enabled to save a local transcript. - The user enables persistent chats on the server and clients supporting persistent chats are in use, these chats are stored on the server in MongoDB. They are subject to the persistent chat configuration. - The server-side chat logging is enabled and chats are stored in the configured method. Authentication Which authentication methods are supported? : The Sametime server handles all authentication requests. Any supported authentication model you configure on the Sametime server is supported for Meetings. How can I disable guest (anonymous) access to meetings? : See Disabling guest access . Which types of SSO are supported with meetings? : LTPA and SAML with LTPA are supported. See Enabling Single Sign-on . Recordings Where are recordings stored? : See Managing recording . How can you disable meeting recordings? : See Managing recording . What type recorded media is available for meetings, is this configurable? : The user can save all recordings as MP4 files. It is not configurable. Which part of a meeting is recorded? : You can record everything that displays on the screen. This does not include the meeting chat. : Meeting attendees who also log into the server with a Sametime client have a group chat for the meeting. The link for the recording is contained in the chat, and the chat persists if the clients use the supporting persistent chat and keep the chat open. How long does recorded media remain on servers? Is this configurable? : The default is three days, which is configurable. See Managing recording . Configuration settings Which settings are configurable server-wide? : Meeting server configuration is all handled on the meeting server; each change is global. Can the administrator restrict number of participants in a meeting? : Yes, and the default number of participants in a meeting is 100. See Configuring the maximum number of meeting participants for details. Which settings are configurable though a policy? : The community policy only allows or disallows meetings. There are no other policy-based settings. Can I disable the audio and video options? : No. Can I integrate my telephony system with the Sametime meeting server? : Yes, see Enabling meeting dial-out . Personal or reserved meetings Can a user own or reserve the name of a meeting, that is the meeting URL so that no one can use it? : Yes, the first user who requests the meeting name owns the reserved name. Can I have a persistent meeting? : You can have a reserved meeting name. There is no data preserved or persisting between members entering or leaving. Is a moderated meeting room not available until its owner enters the room? : Yes, the moderated meeting room is not available until the owner enters the room. Migration and existing Sametime environments Can I upgrade from an earlier version of Sametime Meetings? : Yes, see Upgrading from Meetings 11.5 and 11.6 . Can I migrate my Sametime 9.0.1 meeting data to the Sametime meeting server? : No. There is no slide share or file share tool in the new meeting server. There is no data that needs to be migrated. Will my old Sametime meeting URLs work on the new server? : Users can expect the legacy meeting URLs to work. The DNS change from the old host name to the new host name handles the migration to the new server. After the DNS change, users can continue to use the original meeting URLs in calendar entries to join meetings. The new server does not support the legacy meeting client plug-in in the Sametime client, so users must join by URL. Can I use the Sametime 9 meeting plug-in embedded in HCL Notes to connect to a Sametime Meetings server? : The introduction of the External Meeting Provider feature in the Sametime embedded and stand-alone clients deprecate the meeting plug-in in the Notes version 11. Statics, reporting and auditing Are there meeting statistics or reports for Sametime ? : Sametime 12 introduces a new feature to allow users to download meeting reports. The meeting report includes a list of attendees, meeting start and end times, duration, meeting types such as moderated, guests allowed, the time participants were joined and left the meeting, a list of presenters, a link to meeting recording, and the chat transcript. : There is no default feature to collect statistics. It might be possible to configure third party monitoring tools, for example: Grafana and Kubernetes stat page. For more information, see the HCL Sametime Meetings on Kubernetes: Monitoring and Statistics Case Study white paper. Parent topic: Planning","title":"Meeting server FAQ {#planning_meetingserver .concept}"},{"location":"admin/planning_meetingserver.html#planning_meetingserver","text":"The Meeting server routes media traffic.","title":"Meeting server FAQ"},{"location":"admin/planning_meetingserver.html#section_gmc_qlc_w5b","text":"How are media streams transferred? Is there any instance where this would occur peer to peer? : All media traffic is routed through the Sametime server. If I need external access to meetings, in which firewall zone do I place the Sametime Meeting server? : The Sametime server can be placed in the DMZ or your internal firewall zone. Are there any considerations for the network if I have a firewall? : Yes, see Sametime Meetings on Kubernetes Statistics and Monitoring case study .","title":"Network related"},{"location":"admin/planning_meetingserver.html#section_nmw_qmc_w5b","text":"How long does chats in the meeting remain? : There are two places that chats are displayed. For authenticated users who are logged into the server, they see the chats in the Sametime clients as a group chat that includes the meeting participants. The chat persists if the user does not close the chat. : For meetings where users are guests, or authenticated users are not logged into a Sametime client, the meeting chat is only inside the meeting room. When the meeting concludes, the meeting room chats are deleted from the meeting room. Can I make the chats persist from one meeting to the next? : When the meeting concludes, the meeting room chats are deleted from the meeting room. Meeting chats do not persist to the next time the same meeting URL is used. Can I enable logging of the chats inside the meeting? : The user can log the chats only if they log into the server using a Sametime client. There are three ways the user can log these chats: - The Sametime Connect client or embedded client have a client-side chat logging feature enabled to save a local transcript. - The user enables persistent chats on the server and clients supporting persistent chats are in use, these chats are stored on the server in MongoDB. They are subject to the persistent chat configuration. - The server-side chat logging is enabled and chats are stored in the configured method.","title":"Chats within a meeting"},{"location":"admin/planning_meetingserver.html#section_jps_knc_w5b","text":"Which authentication methods are supported? : The Sametime server handles all authentication requests. Any supported authentication model you configure on the Sametime server is supported for Meetings. How can I disable guest (anonymous) access to meetings? : See Disabling guest access . Which types of SSO are supported with meetings? : LTPA and SAML with LTPA are supported. See Enabling Single Sign-on .","title":"Authentication"},{"location":"admin/planning_meetingserver.html#section_jxc_d4c_w5b","text":"Where are recordings stored? : See Managing recording . How can you disable meeting recordings? : See Managing recording . What type recorded media is available for meetings, is this configurable? : The user can save all recordings as MP4 files. It is not configurable. Which part of a meeting is recorded? : You can record everything that displays on the screen. This does not include the meeting chat. : Meeting attendees who also log into the server with a Sametime client have a group chat for the meeting. The link for the recording is contained in the chat, and the chat persists if the clients use the supporting persistent chat and keep the chat open. How long does recorded media remain on servers? Is this configurable? : The default is three days, which is configurable. See Managing recording .","title":"Recordings"},{"location":"admin/planning_meetingserver.html#section_nsz_npc_w5b","text":"Which settings are configurable server-wide? : Meeting server configuration is all handled on the meeting server; each change is global. Can the administrator restrict number of participants in a meeting? : Yes, and the default number of participants in a meeting is 100. See Configuring the maximum number of meeting participants for details. Which settings are configurable though a policy? : The community policy only allows or disallows meetings. There are no other policy-based settings. Can I disable the audio and video options? : No. Can I integrate my telephony system with the Sametime meeting server? : Yes, see Enabling meeting dial-out .","title":"Configuration settings"},{"location":"admin/planning_meetingserver.html#section_zpg_dqc_w5b","text":"Can a user own or reserve the name of a meeting, that is the meeting URL so that no one can use it? : Yes, the first user who requests the meeting name owns the reserved name. Can I have a persistent meeting? : You can have a reserved meeting name. There is no data preserved or persisting between members entering or leaving. Is a moderated meeting room not available until its owner enters the room? : Yes, the moderated meeting room is not available until the owner enters the room.","title":"Personal or reserved meetings"},{"location":"admin/planning_meetingserver.html#section_ttf_lqc_w5b","text":"Can I upgrade from an earlier version of Sametime Meetings? : Yes, see Upgrading from Meetings 11.5 and 11.6 . Can I migrate my Sametime 9.0.1 meeting data to the Sametime meeting server? : No. There is no slide share or file share tool in the new meeting server. There is no data that needs to be migrated. Will my old Sametime meeting URLs work on the new server? : Users can expect the legacy meeting URLs to work. The DNS change from the old host name to the new host name handles the migration to the new server. After the DNS change, users can continue to use the original meeting URLs in calendar entries to join meetings. The new server does not support the legacy meeting client plug-in in the Sametime client, so users must join by URL. Can I use the Sametime 9 meeting plug-in embedded in HCL Notes to connect to a Sametime Meetings server? : The introduction of the External Meeting Provider feature in the Sametime embedded and stand-alone clients deprecate the meeting plug-in in the Notes version 11.","title":"Migration and existing Sametime environments"},{"location":"admin/planning_meetingserver.html#section_xv4_2rc_w5b","text":"Are there meeting statistics or reports for Sametime ? : Sametime 12 introduces a new feature to allow users to download meeting reports. The meeting report includes a list of attendees, meeting start and end times, duration, meeting types such as moderated, guests allowed, the time participants were joined and left the meeting, a list of presenters, a link to meeting recording, and the chat transcript. : There is no default feature to collect statistics. It might be possible to configure third party monitoring tools, for example: Grafana and Kubernetes stat page. For more information, see the HCL Sametime Meetings on Kubernetes: Monitoring and Statistics Case Study white paper. Parent topic: Planning","title":"Statics, reporting and auditing"},{"location":"admin/pod_apply_changes.html","text":"Applying changes After you have modified a secret, scale the pods for which changes were made. Scaling the pod is similar to a reboot, first the pod is scaled to zero and then scaled to one. For Sametime pods details, see Pods in Sametime . Scaling to zero removes all containers for the specified pods and scaling to one restarts their use. When scaled back up from zero, changes made are used by the pod. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Troubleshooting Sametime on Kubernetes","title":"Applying changes {#pod_apply_changes .task}"},{"location":"admin/pod_apply_changes.html#pod_apply_changes","text":"After you have modified a secret, scale the pods for which changes were made. Scaling the pod is similar to a reboot, first the pod is scaled to zero and then scaled to one. For Sametime pods details, see Pods in Sametime . Scaling to zero removes all containers for the specified pods and scaling to one restarts their use. When scaled back up from zero, changes made are used by the pod. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Troubleshooting Sametime on Kubernetes","title":"Applying changes"},{"location":"admin/pods_descriptions.html","text":"Pods in Sametime A pod is a group of one or more containers that share storage and network resources. The following table describes the Sametime pods and the containers in which the pod runs. Pod Name Container Description Activity App-registry Auth NA Interacts with the Sametime server for SSO. backgrounds NA Provides the backgrounds in meetings. Catalog NA Maintains the list of meetings that belongs to a user and the the recent meetings list. Interacts with the MongoDB. Click2call NA Provides the click to call interface in web chat. Community community, pushgateway Performs all authentication, interacts directly with the LDAP service. Enforces policies. Interacts with MongoDB for persistent chat. Retrieves and serves business cards data. files files, scanner Provides file transfer service in meetings and web chat Jibri-web NA Provides a web interface to the recordings Jitsi prosody, jigasi, jicofo The video bridge that streams the media to users. Jigasi container for SIP messages (integration with telephony). Jicofo (conference focus) \u2013 messages about features used in meetings, participants joining and dropping. | |Lobby|NA|Runs the lobby service for meetings.| |Location|NA|Used when telephony is integrated to assist users with the telephone numbers.| |Mux|NA|Allows the Connect and Embedded clients in Notes to connect over port 1533. Has a svc with an IP address for users to connect.| |Proxy|NA|Runs the web chat service allowing users to connect with mobile clients or web clients for chat.| |Recorder|jibri, pushgateway, await-prosody|Save meeting recordings when a user records a meeting.It is also used for livestreaming. | |Recordings|NA|Interacts with the persistent volume to store recordings.| |Video|jvb, prometheus-exporter|Interacts with STUN server.| |Web Serves|NA|Serves the web interface to the users| |Outlook|NA|When the Oulook add-in feature is enabled, this process interacts with the Outlook add-in.| Parent topic: Troubleshooting Sametime on Kubernetes","title":"Pods in Sametime {#pod_descriptions .concept}"},{"location":"admin/pods_descriptions.html#pod_descriptions","text":"A pod is a group of one or more containers that share storage and network resources. The following table describes the Sametime pods and the containers in which the pod runs. Pod Name Container Description Activity App-registry Auth NA Interacts with the Sametime server for SSO. backgrounds NA Provides the backgrounds in meetings. Catalog NA Maintains the list of meetings that belongs to a user and the the recent meetings list. Interacts with the MongoDB. Click2call NA Provides the click to call interface in web chat. Community community, pushgateway Performs all authentication, interacts directly with the LDAP service. Enforces policies. Interacts with MongoDB for persistent chat. Retrieves and serves business cards data. files files, scanner Provides file transfer service in meetings and web chat Jibri-web NA Provides a web interface to the recordings Jitsi prosody, jigasi, jicofo The video bridge that streams the media to users. Jigasi container for SIP messages (integration with telephony). Jicofo (conference focus) \u2013 messages about features used in meetings, participants joining and dropping. | |Lobby|NA|Runs the lobby service for meetings.| |Location|NA|Used when telephony is integrated to assist users with the telephone numbers.| |Mux|NA|Allows the Connect and Embedded clients in Notes to connect over port 1533. Has a svc with an IP address for users to connect.| |Proxy|NA|Runs the web chat service allowing users to connect with mobile clients or web clients for chat.| |Recorder|jibri, pushgateway, await-prosody|Save meeting recordings when a user records a meeting.It is also used for livestreaming. | |Recordings|NA|Interacts with the persistent volume to store recordings.| |Video|jvb, prometheus-exporter|Interacts with STUN server.| |Web Serves|NA|Serves the web interface to the users| |Outlook|NA|When the Oulook add-in feature is enabled, this process interacts with the Outlook add-in.| Parent topic: Troubleshooting Sametime on Kubernetes","title":"Pods in Sametime"},{"location":"admin/ports_sametime.html","text":"Ports used by Sametime services Sametime services use several ports for communication. If firewalls are in use in your environment, all traffic on these ports should be permitted bidirectionally. Port Number Description 80 Used to listen for HTTP communications. All communication over this port is redirected to HTTPS port 443. Port 80 is the default port assigned during the product install process. 389 Used for unsecure communications from the Sametime server to the LDAP server. 443 Used for HTTP commnications over a secure connection. 636 Use for secure communications with LDAP for directory services. 1516 Used as an internal port between the community and proxy pods. 1533 Used to listen for direct TCP/IP connections from Sametime Connect clients.A Direct TCP/IP connection is when a Sametime client uses a unique Sametime protocol over TCP/IP to establish a connection with community services. | |1935|Used when streaming YouTube videos.| |5280, 5222|In Kubernetes environments, for websockets to function properly the video pods using node port must be able to reach the service Cluster IP for Jitsi on ports 5280 and 5222. See the Websockets fail to load after installing Sametime 11.6 or 12.0.x on Kubernetes article for more information. | |10000|Used by audio and video clients to stream media data when deploying Sametime on Docker.| |19302|This UDP port is the default STUN port used by both the client and meeting server for NAT traversal.| |27017|Used for communication with the MongoDB.| |30000|Used by audio and video clients to stream media data when deploying Sametime on Kubernetes.| Parent topic: Planning the network topology and connectivity","title":"Ports used by Sametime services {#ports_sametime .concept}"},{"location":"admin/ports_sametime.html#ports_sametime","text":"Sametime services use several ports for communication. If firewalls are in use in your environment, all traffic on these ports should be permitted bidirectionally. Port Number Description 80 Used to listen for HTTP communications. All communication over this port is redirected to HTTPS port 443. Port 80 is the default port assigned during the product install process. 389 Used for unsecure communications from the Sametime server to the LDAP server. 443 Used for HTTP commnications over a secure connection. 636 Use for secure communications with LDAP for directory services. 1516 Used as an internal port between the community and proxy pods. 1533 Used to listen for direct TCP/IP connections from Sametime Connect clients.A Direct TCP/IP connection is when a Sametime client uses a unique Sametime protocol over TCP/IP to establish a connection with community services. | |1935|Used when streaming YouTube videos.| |5280, 5222|In Kubernetes environments, for websockets to function properly the video pods using node port must be able to reach the service Cluster IP for Jitsi on ports 5280 and 5222. See the Websockets fail to load after installing Sametime 11.6 or 12.0.x on Kubernetes article for more information. | |10000|Used by audio and video clients to stream media data when deploying Sametime on Docker.| |19302|This UDP port is the default STUN port used by both the client and meeting server for NAT traversal.| |27017|Used for communication with the MongoDB.| |30000|Used by audio and video clients to stream media data when deploying Sametime on Kubernetes.| Parent topic: Planning the network topology and connectivity","title":"Ports used by Sametime services"},{"location":"admin/recording.html","text":"Managing recording You can control how long meeting recordings are available and also disable the recording feature. Storing and Archiving Recordings Recordings are available for 3 days by default. To change this value, update the EXPIRES_IN_DAYS in the custom.env on Docker and the recordingsExpireInDays in the helm/values.yaml on Kubernetes. For more information to apply the changes, see Applying configuration changes in Kubernetes . Disable Recordings If you want to disable the ability to record meetings, use one of the following procedures: Docker In the .env file, specify the following setting: ENABLE_RECORDING=0 Kubernetes In the values.yaml file, specify the following setting: enableRecording = false Parent topic: Managing Sametime Meetings","title":"Managing recording {#recording .task}"},{"location":"admin/recording.html#recording","text":"You can control how long meeting recordings are available and also disable the recording feature. Storing and Archiving Recordings Recordings are available for 3 days by default. To change this value, update the EXPIRES_IN_DAYS in the custom.env on Docker and the recordingsExpireInDays in the helm/values.yaml on Kubernetes. For more information to apply the changes, see Applying configuration changes in Kubernetes . Disable Recordings If you want to disable the ability to record meetings, use one of the following procedures: Docker In the .env file, specify the following setting: ENABLE_RECORDING=0 Kubernetes In the values.yaml file, specify the following setting: enableRecording = false Parent topic: Managing Sametime Meetings","title":"Managing recording"},{"location":"admin/sametime_client_configuration.html","text":"Sametime client configuration options There are several methods to customize the user experience for Sametime clients. This section covers Expeditor based clients that are capable of leveraging the Expeditor Managed Settings framework. These clients include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This does not apply to the PWA, web or mobile clients. Use managed-settings.xml and managed-community-configs.xml for clients which are already installed. If your clients not not yet installed, the the plugin_customization.ini file can be configured and included with the client installation package. File Location Purpose managed-community-configs.xml Web server This file is used to update connectivity preferences in the client. Update, add and delete servers, and manage connection settings (such as host name, port, connection method, authentication method, etc). The file is pushed using a policy, so you can define different settings for different users. This method applies to both the Sametime\u00ae rich client and to the Sametime client embedded in Notes\u00ae. This file is retrieved upon login and will take effect the next time the user restarts the client. managed-settings.xml Web server This file can be used to push client preferences to the users. The file is hosted on a web server and retrieved upon login from the Sametime policy. This method applies to the Sametime rich client and Sametime embedded client in Notes. Note: Do not add community config settings (connectivity settings) to this file. Community config settings must be added to the managed-community-configs.xml file. See the topic Updating Communities with the Managed-community-configs xml . | |plugin_customization.ini|Client computer|Set initial eclipse preferences when client install kits are deployed to desktops or when a new user launches the product for the first time. These preferences can be overridden at runtime for the logged in user base using the managed-settings.xml file. This method only applies to installed Sametime Connect clients.Community settings (such as loginAtStartup and host) can be entered here to prepopulate community settings for a first time user. After the user logs in, only the managed-community-configs.xml file can be used to change community settings. | Sametime client preferences This section lists the preferences that can be managed for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Selecting preferences in the client In the Preferences dialog of the HCL Sametime Connect Client and the Notes client, users can choose any Sametime preferences that have not been locked by the administrator. Configuring Sametime client preferences with the Expeditor managed settings framework You can configure and manage the user's Sametime client preferences for capable clients using the Expeditor managed settings framework. The Sametime clients that are Expeditor based include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This excludes the PWA, web and mobile clients. Configuring Sametime preferences using HCL Notes policies To configure preferences for the HCL Sametime Embedded Client for Notes, you can also use the Domino\u00ae Desktop policy settings document . These policies are applied when a Notes user logs into their home mail server and retrieves their desktop policy. These settings will not apply to any other client. Updating connectivity settings with the managed-community-configs.xml file You can distribute updates to HCL Sametime client communities automatically using a managed-community-configs.xml file. The managed-community-configs.xml file is policy-based, so you can control communities for different user groups. Creating a community provisioning URL for mobile users This section describes how to create a provisioning URL that automatically creates an HCL Sametime\u00ae community definition on mobile devices running Google Android or Apple iOS, so users can easily connect to Sametime. Parent topic: Managing Sametime clients","title":"Sametime client configuration options {#sametime_client_configuration .concept}"},{"location":"admin/sametime_client_configuration.html#sametime_client_configuration","text":"There are several methods to customize the user experience for Sametime clients. This section covers Expeditor based clients that are capable of leveraging the Expeditor Managed Settings framework. These clients include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This does not apply to the PWA, web or mobile clients. Use managed-settings.xml and managed-community-configs.xml for clients which are already installed. If your clients not not yet installed, the the plugin_customization.ini file can be configured and included with the client installation package. File Location Purpose managed-community-configs.xml Web server This file is used to update connectivity preferences in the client. Update, add and delete servers, and manage connection settings (such as host name, port, connection method, authentication method, etc). The file is pushed using a policy, so you can define different settings for different users. This method applies to both the Sametime\u00ae rich client and to the Sametime client embedded in Notes\u00ae. This file is retrieved upon login and will take effect the next time the user restarts the client. managed-settings.xml Web server This file can be used to push client preferences to the users. The file is hosted on a web server and retrieved upon login from the Sametime policy. This method applies to the Sametime rich client and Sametime embedded client in Notes. Note: Do not add community config settings (connectivity settings) to this file. Community config settings must be added to the managed-community-configs.xml file. See the topic Updating Communities with the Managed-community-configs xml . | |plugin_customization.ini|Client computer|Set initial eclipse preferences when client install kits are deployed to desktops or when a new user launches the product for the first time. These preferences can be overridden at runtime for the logged in user base using the managed-settings.xml file. This method only applies to installed Sametime Connect clients.Community settings (such as loginAtStartup and host) can be entered here to prepopulate community settings for a first time user. After the user logs in, only the managed-community-configs.xml file can be used to change community settings. | Sametime client preferences This section lists the preferences that can be managed for the HCL Sametime Connect Client and Sametime Embedded Client for Notes. Selecting preferences in the client In the Preferences dialog of the HCL Sametime Connect Client and the Notes client, users can choose any Sametime preferences that have not been locked by the administrator. Configuring Sametime client preferences with the Expeditor managed settings framework You can configure and manage the user's Sametime client preferences for capable clients using the Expeditor managed settings framework. The Sametime clients that are Expeditor based include the Sametime client for Windows or Mac, and the HCL Notes embedded Sametime client for Windows or Mac. This excludes the PWA, web and mobile clients. Configuring Sametime preferences using HCL Notes policies To configure preferences for the HCL Sametime Embedded Client for Notes, you can also use the Domino\u00ae Desktop policy settings document . These policies are applied when a Notes user logs into their home mail server and retrieves their desktop policy. These settings will not apply to any other client. Updating connectivity settings with the managed-community-configs.xml file You can distribute updates to HCL Sametime client communities automatically using a managed-community-configs.xml file. The managed-community-configs.xml file is policy-based, so you can control communities for different user groups. Creating a community provisioning URL for mobile users This section describes how to create a provisioning URL that automatically creates an HCL Sametime\u00ae community definition on mobile devices running Google Android or Apple iOS, so users can easily connect to Sametime. Parent topic: Managing Sametime clients","title":"Sametime client configuration options"},{"location":"admin/sametime_meeting_administering.html","text":"Managing Sametime Meetings This topic explains the features you can enable or disable for meetings. Currently, the settings that you can change are global settings that apply to the entire server. User policies cannot control the settings. Feature Settings Audio and Video Enabled by default, cannot disable. Blur the background (video feature) Enabled by default, cannot disable. Share a YouTube video Enabled by default, cannot disable. Start live stream Live streaming is disabled if recordings are disabled. To allow recordings and disable live streaming, see Configuring Live Streaming . Disable recordings Recordings are enabled by default. To disable recordings, see Managing recording . Change recording availability Recordings are available for 3 days by default, to change the setting, see Managing recording . Secure the meeting with password The option to secure meetings with a password is by default enabled, cannot disable. A user can choose for any meeting owned whether or not to configure a password on that meeting. There are no configurable password strength options. | |Guest users|Guest access is enabled by default. To disable, see Disabling guest access | |Unmoderated Meetings|Enabled by default, cannot disable.| |Moderated Meeting: Invite others| Enabling meeting dial-out .| |Raise Hand|Enabled by default, cannot disable.| |User Photos (authenticated users only)|You can retrieve Photos from the Sametime Proxy server. They will display if they are available to the meeting server.You can use Gravatar to configure an avatar based on your Sametime email ID. Use it if your photo is not available via the Sametime Proxy. | |Group Chat|Enabled by default, cannot disable.| |Group Chat also in the rich client|Enabled by default, cannot disable.| |Screenshare (Start Presenting)|Screenshare is enabled by default on all meetings. In a moderated meeting, the moderator must grant access to screenshare.| |Multi-user screenshare|By default, any user in an unmoderated meeting can share their screen, even if another user is already sharing. It is not possible to disable this feature. In a moderated meeting, you can share only a single screen at a time. | |Lock meeting|Enabled by default, cannot disable.| |Moderated Meeting: Mute everyone else|Enabled by default, cannot disable.| |Moderated Meeting: All cameras off|Enabled by default, cannot disable.| |Moderated Meeting: Invite others|See: Enabling a SIP Trunk for Meeting Dial Out| These settings affect the functionality of the server. Description Setting Maximum number of attendees per meeting. Currently, the maximum supported number of users per meeting is 50. |The default setting is 100 users. To change the setting, see: Configuring the maximum number of meeting participants .| Disabling guest access You can disable guest access and remove the option from the meeting attend page. Configuring live streaming If you have a high number of users that need to attend a meeting without two-way interaction, you can live stream the conference to YouTube. It will only be a listen and watch experience for attendees in the live stream. The users will attend this meeting using a YouTube URL. Most of the live stream requirements are on the YouTube account that belongs to the user who moderates the meeting. In the context of YouTube live streaming, consider the Sametime Meeting server as an \u201cencoder\u201d for YouTube. There is no requirement to install additional software. Increasing active cameras The default allowed active cameras is eight, with the most recent active cameras displaying. Managing recording You can control how long meeting recordings are available and also disable the recording feature. Managing user sign-on You can control how long your Sametime meeting credentials are maintained to reduce the number of times you have to sign-in. Disabling virtual background Disabling custom background uploads Parent topic: Administering","title":"Managing Sametime Meetings {#sametime_meeting_administering .task}"},{"location":"admin/sametime_meeting_administering.html#sametime_meeting_administering","text":"This topic explains the features you can enable or disable for meetings. Currently, the settings that you can change are global settings that apply to the entire server. User policies cannot control the settings. Feature Settings Audio and Video Enabled by default, cannot disable. Blur the background (video feature) Enabled by default, cannot disable. Share a YouTube video Enabled by default, cannot disable. Start live stream Live streaming is disabled if recordings are disabled. To allow recordings and disable live streaming, see Configuring Live Streaming . Disable recordings Recordings are enabled by default. To disable recordings, see Managing recording . Change recording availability Recordings are available for 3 days by default, to change the setting, see Managing recording . Secure the meeting with password The option to secure meetings with a password is by default enabled, cannot disable. A user can choose for any meeting owned whether or not to configure a password on that meeting. There are no configurable password strength options. | |Guest users|Guest access is enabled by default. To disable, see Disabling guest access | |Unmoderated Meetings|Enabled by default, cannot disable.| |Moderated Meeting: Invite others| Enabling meeting dial-out .| |Raise Hand|Enabled by default, cannot disable.| |User Photos (authenticated users only)|You can retrieve Photos from the Sametime Proxy server. They will display if they are available to the meeting server.You can use Gravatar to configure an avatar based on your Sametime email ID. Use it if your photo is not available via the Sametime Proxy. | |Group Chat|Enabled by default, cannot disable.| |Group Chat also in the rich client|Enabled by default, cannot disable.| |Screenshare (Start Presenting)|Screenshare is enabled by default on all meetings. In a moderated meeting, the moderator must grant access to screenshare.| |Multi-user screenshare|By default, any user in an unmoderated meeting can share their screen, even if another user is already sharing. It is not possible to disable this feature. In a moderated meeting, you can share only a single screen at a time. | |Lock meeting|Enabled by default, cannot disable.| |Moderated Meeting: Mute everyone else|Enabled by default, cannot disable.| |Moderated Meeting: All cameras off|Enabled by default, cannot disable.| |Moderated Meeting: Invite others|See: Enabling a SIP Trunk for Meeting Dial Out| These settings affect the functionality of the server. Description Setting Maximum number of attendees per meeting. Currently, the maximum supported number of users per meeting is 50. |The default setting is 100 users. To change the setting, see: Configuring the maximum number of meeting participants .| Disabling guest access You can disable guest access and remove the option from the meeting attend page. Configuring live streaming If you have a high number of users that need to attend a meeting without two-way interaction, you can live stream the conference to YouTube. It will only be a listen and watch experience for attendees in the live stream. The users will attend this meeting using a YouTube URL. Most of the live stream requirements are on the YouTube account that belongs to the user who moderates the meeting. In the context of YouTube live streaming, consider the Sametime Meeting server as an \u201cencoder\u201d for YouTube. There is no requirement to install additional software. Increasing active cameras The default allowed active cameras is eight, with the most recent active cameras displaying. Managing recording You can control how long meeting recordings are available and also disable the recording feature. Managing user sign-on You can control how long your Sametime meeting credentials are maintained to reduce the number of times you have to sign-in. Disabling virtual background Disabling custom background uploads Parent topic: Administering","title":"Managing Sametime Meetings"},{"location":"admin/sametime_premium.html","text":"Sametime versus Sametime Premium Depending on the Sametime product that is installed, detemines which Sametime features are available. HCL Sametime provides secure real-time communication across devices, and HCL Sametime Premium expands those features to include video and file sharing. The following tables shows the features included with Sametime and Sametime Premium. Feature HCL Sametime HCL Sametime Premium Sametime embedded client in HCL Notes X X Sametime Connect client X X Presence awareness in HCL Notes X X Instant chat X X Persistent chat X X Local client chat history X X Screen capture and image transfer in chat X Support for multiple Sametime communities X External conferencing integration X File transfer X Feature HCL Sametime HCL Sametime Premium Sametime mobile chat X X Sametime web client chat X X Sametime presence and chat API for HCL Connections and HCL Digital Experience X X Sametime presence and chat in HCL Verse and iNotes X X Feature HCL Sametime HCL Sametime Premium Screen sharing X Multiple users screen sharing X Audio and video X Meeting group chat X Meeting group chat integration with desktop clients X Moderated meetings X Password protection X Reserved meeting names and URLs X Meeting recordings X Live streaming to YouTube X Note: For HCL Domino users with a limited Sametime capabilities, see Managing Sametime features for the list of features that are not available. Parent topic: Planning","title":"Sametime versus Sametime Premium"},{"location":"admin/sametime_premium.html#sametime_premium","text":"Depending on the Sametime product that is installed, detemines which Sametime features are available. HCL Sametime provides secure real-time communication across devices, and HCL Sametime Premium expands those features to include video and file sharing. The following tables shows the features included with Sametime and Sametime Premium. Feature HCL Sametime HCL Sametime Premium Sametime embedded client in HCL Notes X X Sametime Connect client X X Presence awareness in HCL Notes X X Instant chat X X Persistent chat X X Local client chat history X X Screen capture and image transfer in chat X Support for multiple Sametime communities X External conferencing integration X File transfer X Feature HCL Sametime HCL Sametime Premium Sametime mobile chat X X Sametime web client chat X X Sametime presence and chat API for HCL Connections and HCL Digital Experience X X Sametime presence and chat in HCL Verse and iNotes X X Feature HCL Sametime HCL Sametime Premium Screen sharing X Multiple users screen sharing X Audio and video X Meeting group chat X Meeting group chat integration with desktop clients X Moderated meetings X Password protection X Reserved meeting names and URLs X Meeting recordings X Live streaming to YouTube X Note: For HCL Domino users with a limited Sametime capabilities, see Managing Sametime features for the list of features that are not available. Parent topic: Planning","title":"Sametime versus Sametime Premium"},{"location":"admin/secrets_delete.html","text":"Deleting a secret The kubectl delete command can be used to delete a secret. To delete a secret, issue the command specifying the secret. kubectl delete secret secretname The following example shows the command to delete extra-community-configs secret. kubectl delete secret extra-community-configs Parent topic: Managing secrets in Kubernetes","title":"Deleting a secret {#secrets_delete .task}"},{"location":"admin/secrets_delete.html#secrets_delete","text":"The kubectl delete command can be used to delete a secret. To delete a secret, issue the command specifying the secret. kubectl delete secret secretname The following example shows the command to delete extra-community-configs secret. kubectl delete secret extra-community-configs Parent topic: Managing secrets in Kubernetes","title":"Deleting a secret"},{"location":"admin/secrets_modify.html","text":"Modifying secrets Some of the content within a secret can be changed using the edit secret command. When the secret is in edit mode, you can modify the content by placing data in secrets. Most of the secret fields, such as user names, passwords, and URLs, are base64 encoded. To view a base64 encoded value, you can copy the value and decode using the following command: echo -n secret\\_value | base64 -d To change the value to a new encoded value, you can base64 encode the new value using the following command: echo -n \"new\\_secret\\_value\" | base64 For example to set a new LdapBindEntryDn in the sametime-global-secrets, enter the command: echo -n \u201cCN=LDAPBind,O=Example\u201d | base64 The resulting value should be used in the configuration. The following are considerations when making configuration modifications: If you make a permanent change to the configuration and the secret has a template, the template must also be changed. See Managing secrets in Kubernetes for list of secrets with templates. If changes to the configuration helm charts are not committed, the next time you run a helm upgrade, the secret is overwritten with the values that are defined in the templates. Issue the following command specifying the name of the secret. kubectl edit secret secret\\_name Type the letter i to get into insert mode and make modifications. To save the changes, type the characters: Esc+ :wq! . To close the file without saving changes, type in the characters Esc+ :q! . Parent topic: Managing secrets in Kubernetes","title":"Modifying secrets {#secret_modiify .task}"},{"location":"admin/secrets_modify.html#secret_modiify","text":"Some of the content within a secret can be changed using the edit secret command. When the secret is in edit mode, you can modify the content by placing data in secrets. Most of the secret fields, such as user names, passwords, and URLs, are base64 encoded. To view a base64 encoded value, you can copy the value and decode using the following command: echo -n secret\\_value | base64 -d To change the value to a new encoded value, you can base64 encode the new value using the following command: echo -n \"new\\_secret\\_value\" | base64 For example to set a new LdapBindEntryDn in the sametime-global-secrets, enter the command: echo -n \u201cCN=LDAPBind,O=Example\u201d | base64 The resulting value should be used in the configuration. The following are considerations when making configuration modifications: If you make a permanent change to the configuration and the secret has a template, the template must also be changed. See Managing secrets in Kubernetes for list of secrets with templates. If changes to the configuration helm charts are not committed, the next time you run a helm upgrade, the secret is overwritten with the values that are defined in the templates. Issue the following command specifying the name of the secret. kubectl edit secret secret\\_name Type the letter i to get into insert mode and make modifications. To save the changes, type the characters: Esc+ :wq! . To close the file without saving changes, type in the characters Esc+ :q! . Parent topic: Managing secrets in Kubernetes","title":"Modifying secrets"},{"location":"admin/secrets_view.html","text":"Viewing secrets The get command can be used to list secrets and view their contents. To view a list of all secrets, run the following command. kubectl get secrets If a namepace is beign used, the -n argument must be inclued. kubectl get secrets -n namespace\\_name where namespace_name is the name of the namespace. To view the content of a secret, run the following command. kubectl describe secret secret\\_name where secret_name is the name of the secret. Parent topic: Managing secrets in Kubernetes","title":"Viewing secrets {#secrets_view .task}"},{"location":"admin/secrets_view.html#secrets_view","text":"The get command can be used to list secrets and view their contents. To view a list of all secrets, run the following command. kubectl get secrets If a namepace is beign used, the -n argument must be inclued. kubectl get secrets -n namespace\\_name where namespace_name is the name of the namespace. To view the content of a secret, run the following command. kubectl describe secret secret\\_name where secret_name is the name of the secret. Parent topic: Managing secrets in Kubernetes","title":"Viewing secrets"},{"location":"admin/secure_rooms.html","text":"Disabling secure meeting room names Users are provisioned with a personal meeting room the first time that they log into their meeting. Their personal meeting room is created with a secure name that cannot be easily guessed by other users. For example: be:MeetMe.CWGRAff90q9HETLne4mhzA. Meeting rooms with a user-friendly name or naming conventions might be preferred, for example: MeetMe.username~40company.com. If this is the case, the secure naming feature can be disabled. Disabling secure meeting room name feature does not affect existing meeting rooms. Changing the setting affects only the meeting rooms provisioned after changing the setting. Disabling secure rooms on Docker Disabling secure rooms on Kubernetes Parent topic: Meetings","title":"Disabling secure meeting room names {#secure_rooms .task}"},{"location":"admin/secure_rooms.html#secure_rooms","text":"Users are provisioned with a personal meeting room the first time that they log into their meeting. Their personal meeting room is created with a secure name that cannot be easily guessed by other users. For example: be:MeetMe.CWGRAff90q9HETLne4mhzA. Meeting rooms with a user-friendly name or naming conventions might be preferred, for example: MeetMe.username~40company.com. If this is the case, the secure naming feature can be disabled. Disabling secure meeting room name feature does not affect existing meeting rooms. Changing the setting affects only the meeting rooms provisioned after changing the setting. Disabling secure rooms on Docker Disabling secure rooms on Kubernetes Parent topic: Meetings","title":"Disabling secure meeting room names"},{"location":"admin/secure_rooms_docker.html","text":"Disabling secure rooms on Docker Edit the docker-compose.yaml file. Locate the STCONF_MEETING_SECUREUSERROOMNAME variable in the Proxy section and set the value to false . Save the changes. To apply the changes, stop Sametime server and then start it again. Run the following command to stop the server. docker-compose down Run the following command to start the server. docker-compose up -d Parent topic: Disabling secure meeting room names","title":"Disabling secure rooms on Docker {#secure_rooms_docker .task}"},{"location":"admin/secure_rooms_docker.html#secure_rooms_docker","text":"Edit the docker-compose.yaml file. Locate the STCONF_MEETING_SECUREUSERROOMNAME variable in the Proxy section and set the value to false . Save the changes. To apply the changes, stop Sametime server and then start it again. Run the following command to stop the server. docker-compose down Run the following command to start the server. docker-compose up -d Parent topic: Disabling secure meeting room names","title":"Disabling secure rooms on Docker"},{"location":"admin/secure_rooms_kubernetes.html","text":"Disabling secure rooms on Kubernetes Chang to the helm directory where the Sametime installation package was decompressed. cd helm Open the values.yaml file and put in edit mode. Locate the useSecurePersonalRoomName value and change the value to false. useSecurePersonalRoomName: false Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Disabling secure meeting room names","title":"Disabling secure rooms on Kubernetes {#secure_rooms_kubernetes .task}"},{"location":"admin/secure_rooms_kubernetes.html#secure_rooms_kubernetes","text":"Chang to the helm directory where the Sametime installation package was decompressed. cd helm Open the values.yaml file and put in edit mode. Locate the useSecurePersonalRoomName value and change the value to false. useSecurePersonalRoomName: false Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Disabling secure meeting room names","title":"Disabling secure rooms on Kubernetes"},{"location":"admin/securing.html","text":"Securing This section provides information on securing your HCL Sametime environments. Securing connections The various connections to Sametime can be secured using TLS. Enabling Single Sign-on The HCL Sametime server installer enables required JSON Web Token (JWT) authentication. Additionally, the Sametime server supports Security Assertion Markup Language (SAML) and Lightweight Third Party Authentication (LTPA) Single Sign-on (SSO). Enabling security in the MongoDB To enable MongoDB securing, edit the mongod.conf file authorization: enabled setting. Enabling TLS for the Mongo database You can update the MongoDB connection with the Sametime Community server to encrypt data flowing between the Sametime server and a TLS enabled MongoDB. Updating the Sametime server TLS certificates The Sametime server is pre-configured with a self-signed certificate. You can replace the self-signed certificate with a third party certificate. Applying Let's Encrypt certificates Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Securing {#securing .task}"},{"location":"admin/securing.html#securing","text":"This section provides information on securing your HCL Sametime environments. Securing connections The various connections to Sametime can be secured using TLS. Enabling Single Sign-on The HCL Sametime server installer enables required JSON Web Token (JWT) authentication. Additionally, the Sametime server supports Security Assertion Markup Language (SAML) and Lightweight Third Party Authentication (LTPA) Single Sign-on (SSO). Enabling security in the MongoDB To enable MongoDB securing, edit the mongod.conf file authorization: enabled setting. Enabling TLS for the Mongo database You can update the MongoDB connection with the Sametime Community server to encrypt data flowing between the Sametime server and a TLS enabled MongoDB. Updating the Sametime server TLS certificates The Sametime server is pre-configured with a self-signed certificate. You can replace the self-signed certificate with a third party certificate. Applying Let's Encrypt certificates Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Securing"},{"location":"admin/securing_connections.html","text":"Securing connections The various connections to Sametime can be secured using TLS. Desktop client to Sametime server : These are connections from the Sametime Connect client or Sametime embedded client inside HCL Notes that connect on port 1533 to the Sametime Multiplexer (Mux) by default. Sametime has legacy encryption enabled by default. These connections can be secured over TLS 1.2. For additional information, see Securing connections between the Sametime mux and clients . Sametime web and mobile clients : Sametime meetings and web chat come with a self-signed certificate. You can replace the self-signed certificate with a third party certificate. For more details on this configuration, see Updating the Sametime server TLS certificates . Sametime server to LDAP server : By default the LDAP operations are not encrypted. It is recommended to enable encryption using TLS to encrypt sensitive user data, such as names and passwords. The secure port for LDAPS is typically 636 but may be different in your environment. For more details on this configuration, see Securing connections between Sametime servers and LDAP . Decrypting SAML assertions : When Sametime server is configured for SAML, the Sametime server can validate the encrypted assertions are from the Identity Provider (IdP). These settings is used for the decryption. For more information, see Setting up SSO using SAML . MongoDB : The connection Sametime uses to access MongoDB can be secured with TLS. For more details, see Securing connections between Sametime servers and LDAP . Configuration scope : Beginning with Sametime 12, Kubernetes environments have a separate TLS scope for each type of connection as described above. Docker environments can be configured to use key and trust stores at the global level, where all certificates are shared among the different community services. For more details on this configuration, see Implementing the Global TLS Scope . Choosing the TLS configuration scope Securing connections between the Sametime mux and clients There are several connection methods to connect to the Sametime server. This topic includes the steps to encrypt connections between the clients and the Sametime mux using TLS. Securing connections between Sametime servers and LDAP When Sametime is configured to connect to an LDAP server, the Sametime servers makes five separate connections to the LDAP server. Creating a truststore with a third party certificate When creating a connection between the Sametime server and a service using TLS, a truststore is needed. The truststore is used to store Sametime certificates. How to create a new Java Keystore with a Third Party certificate Parent topic: Securing","title":"Securing connections {#securing_connections .concept}"},{"location":"admin/securing_connections.html#securing_connections","text":"The various connections to Sametime can be secured using TLS. Desktop client to Sametime server : These are connections from the Sametime Connect client or Sametime embedded client inside HCL Notes that connect on port 1533 to the Sametime Multiplexer (Mux) by default. Sametime has legacy encryption enabled by default. These connections can be secured over TLS 1.2. For additional information, see Securing connections between the Sametime mux and clients . Sametime web and mobile clients : Sametime meetings and web chat come with a self-signed certificate. You can replace the self-signed certificate with a third party certificate. For more details on this configuration, see Updating the Sametime server TLS certificates . Sametime server to LDAP server : By default the LDAP operations are not encrypted. It is recommended to enable encryption using TLS to encrypt sensitive user data, such as names and passwords. The secure port for LDAPS is typically 636 but may be different in your environment. For more details on this configuration, see Securing connections between Sametime servers and LDAP . Decrypting SAML assertions : When Sametime server is configured for SAML, the Sametime server can validate the encrypted assertions are from the Identity Provider (IdP). These settings is used for the decryption. For more information, see Setting up SSO using SAML . MongoDB : The connection Sametime uses to access MongoDB can be secured with TLS. For more details, see Securing connections between Sametime servers and LDAP . Configuration scope : Beginning with Sametime 12, Kubernetes environments have a separate TLS scope for each type of connection as described above. Docker environments can be configured to use key and trust stores at the global level, where all certificates are shared among the different community services. For more details on this configuration, see Implementing the Global TLS Scope . Choosing the TLS configuration scope Securing connections between the Sametime mux and clients There are several connection methods to connect to the Sametime server. This topic includes the steps to encrypt connections between the clients and the Sametime mux using TLS. Securing connections between Sametime servers and LDAP When Sametime is configured to connect to an LDAP server, the Sametime servers makes five separate connections to the LDAP server. Creating a truststore with a third party certificate When creating a connection between the Sametime server and a service using TLS, a truststore is needed. The truststore is used to store Sametime certificates. How to create a new Java Keystore with a Third Party certificate Parent topic: Securing","title":"Securing connections"},{"location":"admin/securing_connections_between_community_clients.html","text":"Securing connections between the Sametime mux and clients There are several connection methods to connect to the Sametime server. This topic includes the steps to encrypt connections between the clients and the Sametime mux using TLS. You must configure the sametime.ini settings, either at the global or individual TLS scope. To implement the use of TLS, the clients must have the Direct connection using TLS connection option enabled. This setting is under Preferences > Server Communities > Global Connection Settings . There are three methods to set the client connection preferences. Push the setting to users in the managed-community-configs.xml file, which is a good option for clients that are already deployed and in use. Use the plugin_customization.ini file which can be configured and included with the installation package. Manually configure the settings. For additional information, see Updating connectivity settings with the managed-community-configs.xml file . When you enable TLS for the Sametime server connections, TLS version 1.2 is used by default. SSLv3 and TLSv1 have security vulnerabilities and should not be used. To configure the connection between the Sametime server and clients, there are two tasks that must be completed: Configure the encryption settings. Configure the client settings to support a direct connection with TLS. Sametime can be configured to allow legacy encryption along with TLS encryption (both enabled), or strict TLS where only TLS encrypted connections are allowed. The Sametime Mux can listen for both TLS and legacy encrypted connections on the same port number, so there is no need to have a unique port for the TLS encrypted connections, they can also use port 1533. The port number can be changed if desired. For details on configuring the encryption settings, follow the instructions in one of the following topics. Configuring the encryption settings on Docker Configuring TLS for Sametime mux on Kubernetes From the Sametime Connect Client, click File > Preferences . To select this connection method for all server communities, click Server Communities . In the Global connection settings section, click Direct connection using TLS > OK . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Uncheck Use global connection settings, then click Direct connection using TLS . Click OK to close the Preferences window. Configuring TLS for Sametime mux on Kubernetes Configuring the encryption settings on Docker Parent topic: Securing connections","title":"Securing connections between the Sametime mux and clients {#securing_connections_between_community_clients .task}"},{"location":"admin/securing_connections_between_community_clients.html#securing_connections_between_community_clients","text":"There are several connection methods to connect to the Sametime server. This topic includes the steps to encrypt connections between the clients and the Sametime mux using TLS. You must configure the sametime.ini settings, either at the global or individual TLS scope. To implement the use of TLS, the clients must have the Direct connection using TLS connection option enabled. This setting is under Preferences > Server Communities > Global Connection Settings . There are three methods to set the client connection preferences. Push the setting to users in the managed-community-configs.xml file, which is a good option for clients that are already deployed and in use. Use the plugin_customization.ini file which can be configured and included with the installation package. Manually configure the settings. For additional information, see Updating connectivity settings with the managed-community-configs.xml file . When you enable TLS for the Sametime server connections, TLS version 1.2 is used by default. SSLv3 and TLSv1 have security vulnerabilities and should not be used. To configure the connection between the Sametime server and clients, there are two tasks that must be completed: Configure the encryption settings. Configure the client settings to support a direct connection with TLS. Sametime can be configured to allow legacy encryption along with TLS encryption (both enabled), or strict TLS where only TLS encrypted connections are allowed. The Sametime Mux can listen for both TLS and legacy encrypted connections on the same port number, so there is no need to have a unique port for the TLS encrypted connections, they can also use port 1533. The port number can be changed if desired. For details on configuring the encryption settings, follow the instructions in one of the following topics. Configuring the encryption settings on Docker Configuring TLS for Sametime mux on Kubernetes From the Sametime Connect Client, click File > Preferences . To select this connection method for all server communities, click Server Communities . In the Global connection settings section, click Direct connection using TLS > OK . To select this connection method for only one server community, click Server Communities , select the server community name, and open the Connection tab. Uncheck Use global connection settings, then click Direct connection using TLS . Click OK to close the Preferences window. Configuring TLS for Sametime mux on Kubernetes Configuring the encryption settings on Docker Parent topic: Securing connections","title":"Securing connections between the Sametime mux and clients"},{"location":"admin/securing_connections_between_community_clients_docker.html","text":"Configuring the encryption settings on Docker Create a mux.env with the following setting and values appropriate for your configuration. STI__Debug__VPMX_DISABLE_CONFIGURATION_UPDATE=1 STI__Debug__VPMX_PORT=1533 STI__Debug__VPMX_TLS_PORT=1533 STI__Config__VPMX_CAPACITY=20000 STI__Config__ST_TLS_KEY_STORE_TYPE=p12 STI__Config__ST_TLS_KEY_STORE_FILE=/local/sametimemuxdata/keystore.p12 STI__Config__ST_TLS_KEY_STORE_PASSWORD=keystorepass Add mux.env to the environment file variable in to the mux section of docker-compose.yaml file. env file: -mux.env Map the keyfile into the container volumes: - ./keystore.p12:/local/sametimemuxdata/keystore.p12 Restart the server. Parent topic: Securing connections between the Sametime mux and clients","title":"Configuring the encryption settings on Docker {#securing_connections_between_community_clients_docker .task}"},{"location":"admin/securing_connections_between_community_clients_docker.html#securing_connections_between_community_clients_docker","text":"Create a mux.env with the following setting and values appropriate for your configuration. STI__Debug__VPMX_DISABLE_CONFIGURATION_UPDATE=1 STI__Debug__VPMX_PORT=1533 STI__Debug__VPMX_TLS_PORT=1533 STI__Config__VPMX_CAPACITY=20000 STI__Config__ST_TLS_KEY_STORE_TYPE=p12 STI__Config__ST_TLS_KEY_STORE_FILE=/local/sametimemuxdata/keystore.p12 STI__Config__ST_TLS_KEY_STORE_PASSWORD=keystorepass Add mux.env to the environment file variable in to the mux section of docker-compose.yaml file. env file: -mux.env Map the keyfile into the container volumes: - ./keystore.p12:/local/sametimemuxdata/keystore.p12 Restart the server. Parent topic: Securing connections between the Sametime mux and clients","title":"Configuring the encryption settings on Docker"},{"location":"admin/securing_connections_between_community_clients_kubernetes.html","text":"Configuring TLS for Sametime mux on Kubernetes You can use a self-signed certificate or a third party certificate to configure TSL for Sametime mux. Obtain a third party certificate and private key with a subject that contains the host name assigned to the mux Kubernetes service. If you do not know the mux Kubernetes service IP address issue the kubectl get svc | grep mux command. TLS can be used to secure the connection between the Sametime Connect client and Sametime embedded client inside of HCL Notes to the Sametime mux. The changes in this task apply to the community and mux pods. Create a secret that contains your trust store. kubectl create secret generic samlConfigSecret --from-literal=KeyStorePassword=samet1me --from-file=./saml.p12 In the values.yaml file remove the comment tag (#) surrounding the muxTlsConfigSecret: mux-secret parameter. Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Securing connections between the Sametime mux and clients","title":"Configuring TLS for Sametime mux on Kubernetes {#securing_connections_between_community_clients_kubernetes .task}"},{"location":"admin/securing_connections_between_community_clients_kubernetes.html#securing_connections_between_community_clients_kubernetes","text":"You can use a self-signed certificate or a third party certificate to configure TSL for Sametime mux. Obtain a third party certificate and private key with a subject that contains the host name assigned to the mux Kubernetes service. If you do not know the mux Kubernetes service IP address issue the kubectl get svc | grep mux command. TLS can be used to secure the connection between the Sametime Connect client and Sametime embedded client inside of HCL Notes to the Sametime mux. The changes in this task apply to the community and mux pods. Create a secret that contains your trust store. kubectl create secret generic samlConfigSecret --from-literal=KeyStorePassword=samet1me --from-file=./saml.p12 In the values.yaml file remove the comment tag (#) surrounding the muxTlsConfigSecret: mux-secret parameter. Save and close the values.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Securing connections between the Sametime mux and clients","title":"Configuring TLS for Sametime mux on Kubernetes"},{"location":"admin/securing_connections_sametime_community_and_ldap.html","text":"Securing connections between Sametime servers and LDAP When Sametime is configured to connect to an LDAP server, the Sametime servers makes five separate connections to the LDAP server. This text is marked \"not ready\" for the public server. Shows only on the review server. There is a comment that this topic needs updating or removing. Issue 44523. The Sametime Community Server makes a separate connection to the LDAP server to perform each of these five tasks: Authenticate users. Resolve a user name to a distinguished name as part of the login procedure. Resolve user and group names (for example, as a response to an \"Add Person or Group\" request from a Sametime Connect Client). Browse the directory. Get the content of public groups. The Sametime Community Server and LDAP servers exchange directory information, including user names and passwords, over these connections. To ensure this information is secure, the administrator can use SSL to encrypt the data that passes over these connections. The administrator should consider the level of protection required before enabling SSL. Using SSL to encrypt these connections can slow the server performance.\u202f The administrator has the following options when using SSL to encrypt the data transmitted between the Sametime and LDAP servers: Encrypt all data - This option encrypts all directory information (both user names and passwords) that is transmitted between the Sametime Community Server and the LDAP server. If you encrypt all data, all five connections between the Sametime Community Server and LDAP server are encrypted with SSL. This option provides the most security but also has the greatest effect on server performance. Encrypt only user passwords - This option encrypts passwords but no other directory information (such as usernames) passing over the connections between the Sametime Community Server and LDAP servers. If you encrypt only user passwords, only the \"authenticating users\" connection between the Sametime server and the LDAP server is encrypted with SSL. This option provides an intermediate level of security and has less effect on server performance than encrypting all the data. Encrypt no data - This option allows all directory information and passwords to pass unencrypted between the Sametime and LDAP servers. This option does not affect server performance and should be used if the administrator feels there is no chance that an unauthorized user can intercept information transmitted over the connections between the Sametime and LDAP servers. This is the default setting, if you wish to encrypt no data, no additional steps are necessary.\u202f Using SSL to encrypt connections between the Sametime Userinfo servlet and LDAP - This option secures the communication for the business card data. Prerequisites You must already have created the TLS Trust Store in .p12 or .jks format.\u202f You can configure Sametime LDAP to use the same TLS settings as the rest of the server by setting the configuration at the global scope, or the LDAP settings can be secured using its own key store and settings by following the instructions in the Individual TLS scope and using the pre-fix STLDAP_.\u202f\u202f You must configure the sametime.ini settings by completing one of these topics:\u202f Implementing the Global TLS Scope Implementing the Individual TLS Scope Procedure Follow these steps to encrypt all data as explained above. Import the LDAP server\u2019s certificate into the trust store If the LDAP server is using a public certificate, then you need to obtain the public root CA and import it into the trust store on the Sametime server. If your LDAP server is using a self-signed certificate, then you simply import the self-signed certificate. In the prerequisite topics, your trust store filename is defined in sametime.ini setting ST_TLS_TRUST_STORE_FILE or if using the individual scope in STLDAP_TLS_TRUST_STORE_FILE.\u202f If you are securing Sametime using the global scope, the LDAP connections can use the same key and trust stores and these sametime.ini parameters are not needed. Update the stconfig.nsf to use the secure LDAP settings See the topic Configuring the LDAPServer Document and Set the Connection settings to the secure LDAP port (typically 636). Set the field SSL Enabled to true. Update the userinfoconfig.xml to use the secure LDAP settings By default, the business cards LDAP connection is unsecure. To secure these settings, see the topic Configuring Business cards using an LDAP Directory and complete the optional step \u201cEnabling Encryption\u201d . Encrypt only password related operations If you wish to only encrypt operations that involve passwords, the rest of the traffic can remain unencrypted (sent in the clear), follow these steps: Remote to the Sametime Community Server. Open the sametime.ini file using a text editor (located in the Domino program directory). In the [Directory] section add the following line: ST_DB_LDAP_SSL_ONLY_FOR_PASSWORDS=1 Save and close the sametime.ini file. Restart Sametime Server for the change to take effect. Securing LDAP on Kubernetes This section covers the steps to import your LDAP trust store and password into Kubernetes as a secret, then define the secret in the Sametime configuration. Securing LDAP on Docker This topic covers the steps to import your LDAP trust store and password into Docker as a secret, then define the secret in the Sametime configuration. Parent topic: Securing connections","title":"Securing connections between Sametime servers and LDAP {#task_ar1_cnv_dlb .task}"},{"location":"admin/securing_connections_sametime_community_and_ldap.html#task_ar1_cnv_dlb","text":"When Sametime is configured to connect to an LDAP server, the Sametime servers makes five separate connections to the LDAP server. This text is marked \"not ready\" for the public server. Shows only on the review server. There is a comment that this topic needs updating or removing. Issue 44523. The Sametime Community Server makes a separate connection to the LDAP server to perform each of these five tasks: Authenticate users. Resolve a user name to a distinguished name as part of the login procedure. Resolve user and group names (for example, as a response to an \"Add Person or Group\" request from a Sametime Connect Client). Browse the directory. Get the content of public groups. The Sametime Community Server and LDAP servers exchange directory information, including user names and passwords, over these connections. To ensure this information is secure, the administrator can use SSL to encrypt the data that passes over these connections. The administrator should consider the level of protection required before enabling SSL. Using SSL to encrypt these connections can slow the server performance.\u202f The administrator has the following options when using SSL to encrypt the data transmitted between the Sametime and LDAP servers: Encrypt all data - This option encrypts all directory information (both user names and passwords) that is transmitted between the Sametime Community Server and the LDAP server. If you encrypt all data, all five connections between the Sametime Community Server and LDAP server are encrypted with SSL. This option provides the most security but also has the greatest effect on server performance. Encrypt only user passwords - This option encrypts passwords but no other directory information (such as usernames) passing over the connections between the Sametime Community Server and LDAP servers. If you encrypt only user passwords, only the \"authenticating users\" connection between the Sametime server and the LDAP server is encrypted with SSL. This option provides an intermediate level of security and has less effect on server performance than encrypting all the data. Encrypt no data - This option allows all directory information and passwords to pass unencrypted between the Sametime and LDAP servers. This option does not affect server performance and should be used if the administrator feels there is no chance that an unauthorized user can intercept information transmitted over the connections between the Sametime and LDAP servers. This is the default setting, if you wish to encrypt no data, no additional steps are necessary.\u202f Using SSL to encrypt connections between the Sametime Userinfo servlet and LDAP - This option secures the communication for the business card data. Prerequisites You must already have created the TLS Trust Store in .p12 or .jks format.\u202f You can configure Sametime LDAP to use the same TLS settings as the rest of the server by setting the configuration at the global scope, or the LDAP settings can be secured using its own key store and settings by following the instructions in the Individual TLS scope and using the pre-fix STLDAP_.\u202f\u202f You must configure the sametime.ini settings by completing one of these topics:\u202f Implementing the Global TLS Scope Implementing the Individual TLS Scope Procedure Follow these steps to encrypt all data as explained above. Import the LDAP server\u2019s certificate into the trust store If the LDAP server is using a public certificate, then you need to obtain the public root CA and import it into the trust store on the Sametime server. If your LDAP server is using a self-signed certificate, then you simply import the self-signed certificate. In the prerequisite topics, your trust store filename is defined in sametime.ini setting ST_TLS_TRUST_STORE_FILE or if using the individual scope in STLDAP_TLS_TRUST_STORE_FILE.\u202f If you are securing Sametime using the global scope, the LDAP connections can use the same key and trust stores and these sametime.ini parameters are not needed. Update the stconfig.nsf to use the secure LDAP settings See the topic Configuring the LDAPServer Document and Set the Connection settings to the secure LDAP port (typically 636). Set the field SSL Enabled to true. Update the userinfoconfig.xml to use the secure LDAP settings By default, the business cards LDAP connection is unsecure. To secure these settings, see the topic Configuring Business cards using an LDAP Directory and complete the optional step \u201cEnabling Encryption\u201d . Encrypt only password related operations If you wish to only encrypt operations that involve passwords, the rest of the traffic can remain unencrypted (sent in the clear), follow these steps: Remote to the Sametime Community Server. Open the sametime.ini file using a text editor (located in the Domino program directory). In the [Directory] section add the following line: ST_DB_LDAP_SSL_ONLY_FOR_PASSWORDS=1 Save and close the sametime.ini file. Restart Sametime Server for the change to take effect. Securing LDAP on Kubernetes This section covers the steps to import your LDAP trust store and password into Kubernetes as a secret, then define the secret in the Sametime configuration. Securing LDAP on Docker This topic covers the steps to import your LDAP trust store and password into Docker as a secret, then define the secret in the Sametime configuration. Parent topic: Securing connections","title":"Securing connections between Sametime servers and LDAP"},{"location":"admin/securing_ldap_docker.html","text":"Securing LDAP on Docker This topic covers the steps to import your LDAP trust store and password into Docker as a secret, then define the secret in the Sametime configuration. Before getting started, create a trust store with the LDAP certificate from the LDAP server. Name the file ldaptruststore.p12 and place it into the directory where the docker-compose.yml file is located. The steps in the following procedure must be completed with root access or you can use sudo which allows you to run commands as root. Change directories to the root directory where Sametime installation package was decompressed. Create a new file called tlsldap.env. vi tlsldap.env Add the following lines into the tlsldap.env file. STI__Config__STLDAP_TLS_TRUST_STORE_TYPE=p12 STI__Config__STLDAP_TLS_TRUST_STORE_FILE=/local/notesdata/ldaptruststore.p12 STI__Config__STLDAP_TLS_TRUST_STORE_PASSWORD=ldaptruststorepass Open the docker-compose.yaml for editing. Locate the env_file: parameter and move custom.env to a new line. Add the following line below custom.env . tlsldap.env The results should look like the following: env_file: - custom.env - tlsldap.env Add a path to the LDAP trust store. If you do not have a volumes section in the docker-compose.yml file, create one under the networks section and add the following line to the section. If you already have a volumes section, add the following line to the section. - ./ldaptruststore.p12:/local/notesdata/ldaptruststore.p12 The section should look like the following example. Ensure that the indentations look like the example. networks: - sametime.test volumes: - ./ldaptruststore.p12:/local/notesdata/ldaptruststore.p12 Start the Sametime server to apply the changes. docker-compose up -d Parent topic: Securing connections between Sametime servers and LDAP","title":"Securing LDAP on Docker {#securing_ldap_docker .task}"},{"location":"admin/securing_ldap_docker.html#securing_ldap_docker","text":"This topic covers the steps to import your LDAP trust store and password into Docker as a secret, then define the secret in the Sametime configuration. Before getting started, create a trust store with the LDAP certificate from the LDAP server. Name the file ldaptruststore.p12 and place it into the directory where the docker-compose.yml file is located. The steps in the following procedure must be completed with root access or you can use sudo which allows you to run commands as root. Change directories to the root directory where Sametime installation package was decompressed. Create a new file called tlsldap.env. vi tlsldap.env Add the following lines into the tlsldap.env file. STI__Config__STLDAP_TLS_TRUST_STORE_TYPE=p12 STI__Config__STLDAP_TLS_TRUST_STORE_FILE=/local/notesdata/ldaptruststore.p12 STI__Config__STLDAP_TLS_TRUST_STORE_PASSWORD=ldaptruststorepass Open the docker-compose.yaml for editing. Locate the env_file: parameter and move custom.env to a new line. Add the following line below custom.env . tlsldap.env The results should look like the following: env_file: - custom.env - tlsldap.env Add a path to the LDAP trust store. If you do not have a volumes section in the docker-compose.yml file, create one under the networks section and add the following line to the section. If you already have a volumes section, add the following line to the section. - ./ldaptruststore.p12:/local/notesdata/ldaptruststore.p12 The section should look like the following example. Ensure that the indentations look like the example. networks: - sametime.test volumes: - ./ldaptruststore.p12:/local/notesdata/ldaptruststore.p12 Start the Sametime server to apply the changes. docker-compose up -d Parent topic: Securing connections between Sametime servers and LDAP","title":"Securing LDAP on Docker"},{"location":"admin/securing_ldap_kubernetes.html","text":"Securing LDAP on Kubernetes This section covers the steps to import your LDAP trust store and password into Kubernetes as a secret, then define the secret in the Sametime configuration. Create a trust store in p12 format that contains a copy of the LDAP server\u2019s certificate. To perform this step you will need to know the password of your trust store. The changes in this task affect the following pods: community Create a secret a secret that contains your certificate. Rename your trust store file name to ldaptruststore.p12.ls. Copy the ldaptruststore.p12 file to the machine where you are running kubectl. Run the following command to create the Kubernetes secret. kubectl create secret generic ldap-config-secret --from-literal=KeyStorePassword=password --from-file=./ldaptruststore.p12 Substitute your password for password. If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure the secret is created in the correct namespace. Change to the helm directory where the Sametime installation package was decompressed. Open the values.yaml file to update the secret parameter. Set the value of the ldapConfigSecret parameter to ldap-config-secret . ldapConfigSecret: ldap-config-secret If the parameter is commented out, remove the comment tag. Save and close the file. Ensure you are in the helm directory. To apply your changes to the environment run the following command, specifying the deployment name in your environment. The default for Sametime version 12 is sametime. helm upgrade deployment\\_name. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Note: Be sure to include the dot, it is part of the command. Scale the Community pods to zero and then to one. Run the following command to scale the pod to zero. kubectl scale deploy community --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy community --replicas=1 Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Securing connections between Sametime servers and LDAP","title":"Securing LDAP on Kubernetes {#securing_ldap_kubernetes .task}"},{"location":"admin/securing_ldap_kubernetes.html#securing_ldap_kubernetes","text":"This section covers the steps to import your LDAP trust store and password into Kubernetes as a secret, then define the secret in the Sametime configuration. Create a trust store in p12 format that contains a copy of the LDAP server\u2019s certificate. To perform this step you will need to know the password of your trust store. The changes in this task affect the following pods: community Create a secret a secret that contains your certificate. Rename your trust store file name to ldaptruststore.p12.ls. Copy the ldaptruststore.p12 file to the machine where you are running kubectl. Run the following command to create the Kubernetes secret. kubectl create secret generic ldap-config-secret --from-literal=KeyStorePassword=password --from-file=./ldaptruststore.p12 Substitute your password for password. If you have a namespace dedicated to Sametime, add the -n argument with your namespace to ensure the secret is created in the correct namespace. Change to the helm directory where the Sametime installation package was decompressed. Open the values.yaml file to update the secret parameter. Set the value of the ldapConfigSecret parameter to ldap-config-secret . ldapConfigSecret: ldap-config-secret If the parameter is commented out, remove the comment tag. Save and close the file. Ensure you are in the helm directory. To apply your changes to the environment run the following command, specifying the deployment name in your environment. The default for Sametime version 12 is sametime. helm upgrade deployment\\_name. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Note: Be sure to include the dot, it is part of the command. Scale the Community pods to zero and then to one. Run the following command to scale the pod to zero. kubectl scale deploy community --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy community --replicas=1 Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Securing connections between Sametime servers and LDAP","title":"Securing LDAP on Kubernetes"},{"location":"admin/security_mongodb.html","text":"Enabling security in the MongoDB To enable MongoDB securing, edit the mongod.conf file authorization: enabled setting. More information on this can be found in MongoDB documentation found in the MongoDB Documention Configuration File Options topic. security: authorization: enabled After security is enabled, you must enter the mongo shell as an authenticated user. More information regarding this requirement see the MongoDB Documentation Authentication topic. Enable security after all installation steps for Sametime Community, Sametime Proxy, and Sametime Meetings are successful. If necessary, you can disable the security to complete the installation and configuration steps, and after installation and configuration of the Sametime servers are verified, enable security. Parent topic: Securing","title":"Enabling security in the MongoDB {#security_mongodb .task}"},{"location":"admin/security_mongodb.html#security_mongodb","text":"To enable MongoDB securing, edit the mongod.conf file authorization: enabled setting. More information on this can be found in MongoDB documentation found in the MongoDB Documention Configuration File Options topic. security: authorization: enabled After security is enabled, you must enter the mongo shell as an authenticated user. More information regarding this requirement see the MongoDB Documentation Authentication topic. Enable security after all installation steps for Sametime Community, Sametime Proxy, and Sametime Meetings are successful. If necessary, you can disable the security to complete the installation and configuration steps, and after installation and configuration of the Sametime servers are verified, enable security. Parent topic: Securing","title":"Enabling security in the MongoDB"},{"location":"admin/security_mongodb_tls.html","text":"Enabling TLS for the Mongo database You can update the MongoDB connection with the Sametime Community server to encrypt data flowing between the Sametime server and a TLS enabled MongoDB. You must have a TLS enabled MongoDB server. For details, refer to the topic Configure mongod and mongos for TLS/SSL in the MongoDB documentation. During Sametime Meeting installation, the chatlogging.ini file is created to contain MongoDB server connection information. The connection configuration information within the chatlogging.ini file must be modified to include parameters necessary to establish a secure connection. The Sametime administrator can specify a custom connection URL to the MongoDB server. The CL_MONGO_URL configuration parameter can be set with a MongoDB server URL which includes the required settings for the Sametime server to establish a secure connection to the MongoDB server. After adding the CL_MONGO_URL configuration parameter to the chatlogging.ini file, the default setting is overridden by the settings contained within the URL string. If a self-signed certificate is being used, the certificate must be added to the Sametime certificate store. Open the chatlogging.ini file which is in the HCL Notes data directory . Update or add the CL_MONGO_URL configuration parameter. This parameter is used to override existing configuration settings specified during installation. If changes were made post installation, this parameter exists in the file. If no changes have been made, add the parameter. CL_MONGO_URL=mongodb://user:password@hostname\\_tcpip:port/tls\\_information where: hostname_tcpip : The hostname or TCPIP address of the MongoDB server. port : The port to be used for communication. tls_information : The attributes that identify use of a TLS MongoDB. Copy and past the following into the CL_MONGO_URL parameter. ``` /admin?retryWrites=true&w=majority&ssl=true&tlsCAFile=/local/notesdata/cacert.pem ``` For example: CL_MONGO_URL=mongodb://user:password@192.168.150.1:27017/admin?retryWrites=true&w=majority&ssl=true&tlsCAFile=/local/notesdata/cacert.pem Save the file and restart the Sametime Community server to apply the changes. Parent topic: Securing","title":"Enabling TLS for the Mongo database {#security_mongodb_tls .task}"},{"location":"admin/security_mongodb_tls.html#security_mongodb_tls","text":"You can update the MongoDB connection with the Sametime Community server to encrypt data flowing between the Sametime server and a TLS enabled MongoDB. You must have a TLS enabled MongoDB server. For details, refer to the topic Configure mongod and mongos for TLS/SSL in the MongoDB documentation. During Sametime Meeting installation, the chatlogging.ini file is created to contain MongoDB server connection information. The connection configuration information within the chatlogging.ini file must be modified to include parameters necessary to establish a secure connection. The Sametime administrator can specify a custom connection URL to the MongoDB server. The CL_MONGO_URL configuration parameter can be set with a MongoDB server URL which includes the required settings for the Sametime server to establish a secure connection to the MongoDB server. After adding the CL_MONGO_URL configuration parameter to the chatlogging.ini file, the default setting is overridden by the settings contained within the URL string. If a self-signed certificate is being used, the certificate must be added to the Sametime certificate store. Open the chatlogging.ini file which is in the HCL Notes data directory . Update or add the CL_MONGO_URL configuration parameter. This parameter is used to override existing configuration settings specified during installation. If changes were made post installation, this parameter exists in the file. If no changes have been made, add the parameter. CL_MONGO_URL=mongodb://user:password@hostname\\_tcpip:port/tls\\_information where: hostname_tcpip : The hostname or TCPIP address of the MongoDB server. port : The port to be used for communication. tls_information : The attributes that identify use of a TLS MongoDB. Copy and past the following into the CL_MONGO_URL parameter. ``` /admin?retryWrites=true&w=majority&ssl=true&tlsCAFile=/local/notesdata/cacert.pem ``` For example: CL_MONGO_URL=mongodb://user:password@192.168.150.1:27017/admin?retryWrites=true&w=majority&ssl=true&tlsCAFile=/local/notesdata/cacert.pem Save the file and restart the Sametime Community server to apply the changes. Parent topic: Securing","title":"Enabling TLS for the Mongo database"},{"location":"admin/session_traversal_utilities.html","text":"Session Traversal Utilities for NAT (STUN) Session Traversal Utilities for NAT (STUN) is a standardized set of methods, including a network protocol, for NAT traversal of Network address transalation (NAT) gateways in applications of real-time voice, video, messaging, and other interactive communications. STUN is a tool used by other protocols, such as Interactive Connectivity Establishment (ICE) , the Session Initiation Protocol (SIP) , and WebRTC . It provides a tool for hosts to discover the presence of a network address translator, and to discover the mapped, usually public, Internet Protocol (IP) address and port number that the NAT has allocated for the application's User Datagram Protocol (UDP) flows to remote hosts. The protocol requires assistance from a third-party network server STUN server located on the opposing public side of the NAT, usually the public Internet . For More Information see Session Traversal Utilities for NAT (STUN) . Why is STUN needed? Simply put, we use STUN as a tool to help clients determine their public IP address so that they can connect to each other and the Sametime Meeting Server to send and receive audio and video data. If your deployment of Meetings is all internal and there are is no NAT or Firewalls between the users and the server, then you might not need to use STUN. If you deployment also consists of users external to your network, like people working from home, then you likely need a STUN server to help negotiate the audio and video sessions. Default configuration By default, the Sametime Meeting Server is configured to use the Google Public STUN servers. For Docker, this information is configured in the .env file like this: # STUN servers used to discover the server's public IP. JVB_STUN_SERVERS=stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 For Kubernetes, this information is configured in the hem/values.yaml file like this: jvbStunServers: stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 In both cases, this configuration is telling the server to use these STUN servers: stun.l.google.com stun1.l.google.com stun2.l.google.com Using UDP port 19302. It is important to note that if the server or clients is unable to reach the configured STUN servers, n-way meetings does not work properly. When planning your deployment, make sure that the STUN servers are available over the network. Optional configurations If you already have a STUN server in your environment or wish to use an alternative public STUN server, simply update the appropriate settings above before you deploy the server. It can be modified post deployment as well. For more information on this, see Configuring alternate STUN servers . If your deployment does not require the use of STUN, then you can disable this by simply commenting out the appropriate line in either the .env or values.yaml file and installing the server. Parent topic: Network planning for meetings","title":"Session Traversal Utilities for NAT \\(STUN\\) {#session_traversal_utilities .concept}"},{"location":"admin/session_traversal_utilities.html#session_traversal_utilities","text":"Session Traversal Utilities for NAT (STUN) is a standardized set of methods, including a network protocol, for NAT traversal of Network address transalation (NAT) gateways in applications of real-time voice, video, messaging, and other interactive communications. STUN is a tool used by other protocols, such as Interactive Connectivity Establishment (ICE) , the Session Initiation Protocol (SIP) , and WebRTC . It provides a tool for hosts to discover the presence of a network address translator, and to discover the mapped, usually public, Internet Protocol (IP) address and port number that the NAT has allocated for the application's User Datagram Protocol (UDP) flows to remote hosts. The protocol requires assistance from a third-party network server STUN server located on the opposing public side of the NAT, usually the public Internet . For More Information see Session Traversal Utilities for NAT (STUN) .","title":"Session Traversal Utilities for NAT (STUN)"},{"location":"admin/session_traversal_utilities.html#section_p4l_jrw_v5b","text":"Simply put, we use STUN as a tool to help clients determine their public IP address so that they can connect to each other and the Sametime Meeting Server to send and receive audio and video data. If your deployment of Meetings is all internal and there are is no NAT or Firewalls between the users and the server, then you might not need to use STUN. If you deployment also consists of users external to your network, like people working from home, then you likely need a STUN server to help negotiate the audio and video sessions.","title":"Why is STUN needed?"},{"location":"admin/session_traversal_utilities.html#section_a5x_drw_v5b","text":"By default, the Sametime Meeting Server is configured to use the Google Public STUN servers. For Docker, this information is configured in the .env file like this: # STUN servers used to discover the server's public IP. JVB_STUN_SERVERS=stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 For Kubernetes, this information is configured in the hem/values.yaml file like this: jvbStunServers: stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 In both cases, this configuration is telling the server to use these STUN servers: stun.l.google.com stun1.l.google.com stun2.l.google.com Using UDP port 19302. It is important to note that if the server or clients is unable to reach the configured STUN servers, n-way meetings does not work properly. When planning your deployment, make sure that the STUN servers are available over the network.","title":"Default configuration"},{"location":"admin/session_traversal_utilities.html#section_ydm_drw_v5b","text":"If you already have a STUN server in your environment or wish to use an alternative public STUN server, simply update the appropriate settings above before you deploy the server. It can be modified post deployment as well. For more information on this, see Configuring alternate STUN servers . If your deployment does not require the use of STUN, then you can disable this by simply commenting out the appropriate line in either the .env or values.yaml file and installing the server. Parent topic: Network planning for meetings","title":"Optional configurations"},{"location":"admin/st_adm_comm_manageclientlogin_c.html","text":"Managing client types and log-ins You can manage the manner and order of client connections to Sametime. Configuring allowed client types You can define the types of clients that can connect to the Sametime server. Configuring the preferred login list By default, persistent chat enables a user that is logged in to multiple clients to receive instant messaging sessions across all clients concurrently. In an environment that does not support persistent chat and where the single login type feature is disabled, Sametime uses a default login order to determine which client type should receive the instant messaging session. A preferred login list allows you to override the default order. Configuring the single login type The single login type mode means that only one login per user is allowed. When a client attempts to log in to the Sametime server, the server checks if there are any existing logins of the same user and disconnects them. Any client on the exclusion list is not disconnected, which is useful for users who want to run multiple clients simultaneously. Sametime Client IDs Parent topic: Managing Sametime clients","title":"Managing client types and log-ins {#st_adm_comm_manageclientlogin_c .concept}"},{"location":"admin/st_adm_comm_manageclientlogin_c.html#st_adm_comm_manageclientlogin_c","text":"You can manage the manner and order of client connections to Sametime. Configuring allowed client types You can define the types of clients that can connect to the Sametime server. Configuring the preferred login list By default, persistent chat enables a user that is logged in to multiple clients to receive instant messaging sessions across all clients concurrently. In an environment that does not support persistent chat and where the single login type feature is disabled, Sametime uses a default login order to determine which client type should receive the instant messaging session. A preferred login list allows you to override the default order. Configuring the single login type The single login type mode means that only one login per user is allowed. When a client attempts to log in to the Sametime server, the server checks if there are any existing logins of the same user and disconnects them. Any client on the exclusion list is not disconnected, which is useful for users who want to run multiple clients simultaneously. Sametime Client IDs Parent topic: Managing Sametime clients","title":"Managing client types and log-ins"},{"location":"admin/st_adm_comm_prefloginlist_t.html","text":"Configuring the preferred login list By default, persistent chat enables a user that is logged in to multiple clients to receive instant messaging sessions across all clients concurrently. In an environment that does not support persistent chat and where the single login type feature is disabled, Sametime uses a default login order to determine which client type should receive the instant messaging session. A preferred login list allows you to override the default order. By default, once persistent chat is disabled, the Sametime server depends on the default list of client types, each of which has a predefined weight. Login order for each user depends upon the login-type weight. The first login type, having minimal weight, is the one provided for the incoming instant messaging session. Default order of login types on Sametime: Sametime connect clients Sametime mobile clients Sametime proxy clients The Sametime server is installed with a pre-defined list of client IDs for preferred login types. Use the below steps to customize this list and include Sametime clients as necessary. As administrator, open a text editor on the Sametime server. Open the sametime.ini file located in the Sametime server installation directory. The default directory in Windows is C:\\program files\\HCL\\domino. In the Config section, specify the order of the login types that overrides the default order. If a user is logged in to multiple clients, offline messages are delivered to the client running the latest release, if available. If that release of the client is not available, offline messages are delivered to the client based on this default order. VPS_PREFERRED_LOGIN_TYPES=login_type1, login_type2 For example, VPS_PREFERRED_LOGIN_TYPES=130C,130B,130A,1308,1306,1304,1436,1435,1434,1433,1432,1431,1430,14A3,14A2,14A1,14A0 Save the sametime.ini file. Restart the Sametime server to allow the changes to take effect. Parent topic: Managing client types and log-ins","title":"Configuring the preferred login list {#st_adm_comm_prefloginlist_t .task}"},{"location":"admin/st_adm_comm_prefloginlist_t.html#st_adm_comm_prefloginlist_t","text":"By default, persistent chat enables a user that is logged in to multiple clients to receive instant messaging sessions across all clients concurrently. In an environment that does not support persistent chat and where the single login type feature is disabled, Sametime uses a default login order to determine which client type should receive the instant messaging session. A preferred login list allows you to override the default order. By default, once persistent chat is disabled, the Sametime server depends on the default list of client types, each of which has a predefined weight. Login order for each user depends upon the login-type weight. The first login type, having minimal weight, is the one provided for the incoming instant messaging session. Default order of login types on Sametime: Sametime connect clients Sametime mobile clients Sametime proxy clients The Sametime server is installed with a pre-defined list of client IDs for preferred login types. Use the below steps to customize this list and include Sametime clients as necessary. As administrator, open a text editor on the Sametime server. Open the sametime.ini file located in the Sametime server installation directory. The default directory in Windows is C:\\program files\\HCL\\domino. In the Config section, specify the order of the login types that overrides the default order. If a user is logged in to multiple clients, offline messages are delivered to the client running the latest release, if available. If that release of the client is not available, offline messages are delivered to the client based on this default order. VPS_PREFERRED_LOGIN_TYPES=login_type1, login_type2 For example, VPS_PREFERRED_LOGIN_TYPES=130C,130B,130A,1308,1306,1304,1436,1435,1434,1433,1432,1431,1430,14A3,14A2,14A1,14A0 Save the sametime.ini file. Restart the Sametime server to allow the changes to take effect. Parent topic: Managing client types and log-ins","title":"Configuring the preferred login list"},{"location":"admin/st_adm_comm_singlelogintype_t.html","text":"Configuring the single login type The single login type mode means that only one login per user is allowed. When a client attempts to log in to the Sametime server, the server checks if there are any existing logins of the same user and disconnects them. Any client on the exclusion list is not disconnected, which is useful for users who want to run multiple clients simultaneously. To configure the single login function and exclude certain client types from qualifying as logins, edit the sametime.ini file. Open a text editor on the Sametime server. Open the sametime.ini file located in the Sametime server installation directory. For example, the default directory in Windows is C:\\program files\\HCL\\domino. In the Config section, set the following flag to activate single client login mode: VP_ONLY_SINGLE_LOGIN_ALLOWED=1 If the flag is set to 1 the server works in the single login allowed mode. When a new client login request is received, all the previous logins are disconnected. Only one client type connection per computer is allowed at one time (related to client types, not users). Specify which client types are not considered logins when the server checks whether to accept or disconnect clients. Separate the client types with commas. VPS_EXCLUDED_LOGIN_TYPES=clienttype1, clienttype2 In the following configuration, even though single client login mode is activated, logins originating from C++ clients and Unified instant messaging clients are not disconnected if they have logged in from the Sametime client too. VPS_EXCLUDED_LOGIN_TYPES=1002, 1304 To access Sametime from the HCL\u00ae Notes\u00ae Basic client, update or add these settings as indicated. Reset VP_SECURITY_LEVEL=7000 to VP_SECURITY_LEVEL=6510 Add this setting to the [Config] section: ST_MINIMAL_CLIENT_VERSION=6510 Save the sametime.ini file. Parent topic: Managing client types and log-ins","title":"Configuring the single login type {#st_adm_comm_singlelogintype_t .task}"},{"location":"admin/st_adm_comm_singlelogintype_t.html#st_adm_comm_singlelogintype_t","text":"The single login type mode means that only one login per user is allowed. When a client attempts to log in to the Sametime server, the server checks if there are any existing logins of the same user and disconnects them. Any client on the exclusion list is not disconnected, which is useful for users who want to run multiple clients simultaneously. To configure the single login function and exclude certain client types from qualifying as logins, edit the sametime.ini file. Open a text editor on the Sametime server. Open the sametime.ini file located in the Sametime server installation directory. For example, the default directory in Windows is C:\\program files\\HCL\\domino. In the Config section, set the following flag to activate single client login mode: VP_ONLY_SINGLE_LOGIN_ALLOWED=1 If the flag is set to 1 the server works in the single login allowed mode. When a new client login request is received, all the previous logins are disconnected. Only one client type connection per computer is allowed at one time (related to client types, not users). Specify which client types are not considered logins when the server checks whether to accept or disconnect clients. Separate the client types with commas. VPS_EXCLUDED_LOGIN_TYPES=clienttype1, clienttype2 In the following configuration, even though single client login mode is activated, logins originating from C++ clients and Unified instant messaging clients are not disconnected if they have logged in from the Sametime client too. VPS_EXCLUDED_LOGIN_TYPES=1002, 1304 To access Sametime from the HCL\u00ae Notes\u00ae Basic client, update or add these settings as indicated. Reset VP_SECURITY_LEVEL=7000 to VP_SECURITY_LEVEL=6510 Add this setting to the [Config] section: ST_MINIMAL_CLIENT_VERSION=6510 Save the sametime.ini file. Parent topic: Managing client types and log-ins","title":"Configuring the single login type"},{"location":"admin/starting_and_stopping_meeting_servers.html","text":"Starting and stopping Meeting servers This section provides information on starting and stopping HCL Sametime Meeting servers. This page will provide steps to stop and start the Sametime Meeting server on Docker and Kubernetes. Procedure Stop the Meeting server. Docker: docker-compose down Kubernetes: helm uninstall sametime-meetings Note: In helm, the term uninstall is terminating the deployment. Additionally, the command assumes you are in the helm directory. The . represents current directory. Start the Meeting server. Docker: docker-compose up -d Kubernetes: helm install sametime-meetings . Note: In helm, the term install is a deployment of the applications. Additionally, the command assumes you are in the helm directory. The . represents current directory.","title":"Starting and stopping Meeting servers {#starting_and_stopping_meeting_servers .task}"},{"location":"admin/starting_and_stopping_meeting_servers.html#starting_and_stopping_meeting_servers","text":"This section provides information on starting and stopping HCL Sametime Meeting servers. This page will provide steps to stop and start the Sametime Meeting server on Docker and Kubernetes. Procedure Stop the Meeting server. Docker: docker-compose down Kubernetes: helm uninstall sametime-meetings Note: In helm, the term uninstall is terminating the deployment. Additionally, the command assumes you are in the helm directory. The . represents current directory. Start the Meeting server. Docker: docker-compose up -d Kubernetes: helm install sametime-meetings . Note: In helm, the term install is a deployment of the applications. Additionally, the command assumes you are in the helm directory. The . represents current directory.","title":"Starting and stopping Meeting servers"},{"location":"admin/starting_and_stopping_mongodb.html","text":"Starting and stopping MongoDB Configuring MongoDB for Sametime When you complete the prerequisite task, a service is created. Use the service to start and stop the MongoDB server. Windows: Navigate to the Control Panel and open the Services. Locate the MongoDB service from the list and use the start and stop buttons. Linux: Services are started and stopped using a command line. To start the server, enter the command: service mongod start To stop the server, enter the command: service mongod stop Parent topic: Administering","title":"Starting and stopping MongoDB {#starting_and_stopping_mongodb .task}"},{"location":"admin/starting_and_stopping_mongodb.html#starting_and_stopping_mongodb","text":"Configuring MongoDB for Sametime When you complete the prerequisite task, a service is created. Use the service to start and stop the MongoDB server. Windows: Navigate to the Control Panel and open the Services. Locate the MongoDB service from the list and use the start and stop buttons. Linux: Services are started and stopped using a command line. To start the server, enter the command: service mongod start To stop the server, enter the command: service mongod stop Parent topic: Administering","title":"Starting and stopping MongoDB"},{"location":"admin/starting_and_stopping_servers.html","text":"Starting and stopping the Sametime server Starting and stopping the Sametime server involves starting and stopping the Sametime services running in the container management system. To manage the Sametime server on Docker, you use the docker-compose command. To start the Sametime server on Docker, run the following command. docker-compose up -d To stop the Sametime server, run the following command. docker-compose down On Kubernetes, scaling the pods can be used to start and stop the Sametime service. The kubectl scale command is use. Scale the pod to one, starts the service. kubectl scale deploy deployment\\_name --replicas=1 Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy deployment\\_name --replicas=0 Parent topic: Administering","title":"Starting and stopping the Sametime server {#starting_and_stopping_servers .task}"},{"location":"admin/starting_and_stopping_servers.html#starting_and_stopping_servers","text":"Starting and stopping the Sametime server involves starting and stopping the Sametime services running in the container management system. To manage the Sametime server on Docker, you use the docker-compose command. To start the Sametime server on Docker, run the following command. docker-compose up -d To stop the Sametime server, run the following command. docker-compose down On Kubernetes, scaling the pods can be used to start and stop the Sametime service. The kubectl scale command is use. Scale the pod to one, starts the service. kubectl scale deploy deployment\\_name --replicas=1 Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy deployment\\_name --replicas=0 Parent topic: Administering","title":"Starting and stopping the Sametime server"},{"location":"admin/storing_photos.html","text":"Storing photos in the Domino directory If the Sametime server is connected to a Domino LDAP server, you can store business cards photos in the Domino Directory. The file name of the photo attached to the person document must be named ContactPhoto.jpg. Domino serves this photo as an attribute called Photo. It is possible to use a custom field with the attachment or thumbnail field type, photo types used by Domino are JPEG and GIF file types. Photo size should be smaller than 45 KB, for best results use a 10 KB sized photo. This option requires the Domino Designer Client and modifying the design, which is outside the scope of this document. This configuration only applies to the rich clients. In order to display photos in meetings or webchat, you must use the PhotoURL attribute. The Domino directory has a field in the person document that allows the user to upload their contact. It is saved as a thumbnail which automatically reduces the size of the file. Important considerations: Before storing photos in the name and address book, consider the size of the address book. Adding photos for many users can greatly increase the size of your directory and can have a performance impact on another application that uses the same Domino directory. The Sametime server does not support this method of photo retrieval. If you have users with the mobile or web clients, consider using a PhotoURL instead of storing photos as attachments in the Domino directory. Open the Notes contact file using a Notes client. The default file is names.nsf. Locate and open the person document where the photos is to be attached. Click Edit Person . To the left of the First name and Last name fields, click the photo icon. Locate the .jpeg photo file on your hard drive and rename the file to ContactPhoto.jpg. Click the icon to upload the photo and browse to the location of the renamed photo file. Confirm that the photo is correct and click Save and Close . Parent topic: Setting up business cards","title":"Storing photos in the Domino directory {#storing_photos .task}"},{"location":"admin/storing_photos.html#storing_photos","text":"If the Sametime server is connected to a Domino LDAP server, you can store business cards photos in the Domino Directory. The file name of the photo attached to the person document must be named ContactPhoto.jpg. Domino serves this photo as an attribute called Photo. It is possible to use a custom field with the attachment or thumbnail field type, photo types used by Domino are JPEG and GIF file types. Photo size should be smaller than 45 KB, for best results use a 10 KB sized photo. This option requires the Domino Designer Client and modifying the design, which is outside the scope of this document. This configuration only applies to the rich clients. In order to display photos in meetings or webchat, you must use the PhotoURL attribute. The Domino directory has a field in the person document that allows the user to upload their contact. It is saved as a thumbnail which automatically reduces the size of the file. Important considerations: Before storing photos in the name and address book, consider the size of the address book. Adding photos for many users can greatly increase the size of your directory and can have a performance impact on another application that uses the same Domino directory. The Sametime server does not support this method of photo retrieval. If you have users with the mobile or web clients, consider using a PhotoURL instead of storing photos as attachments in the Domino directory. Open the Notes contact file using a Notes client. The default file is names.nsf. Locate and open the person document where the photos is to be attached. Click Edit Person . To the left of the First name and Last name fields, click the photo icon. Locate the .jpeg photo file on your hard drive and rename the file to ContactPhoto.jpg. Click the icon to upload the photo and browse to the location of the renamed photo file. Confirm that the photo is correct and click Save and Close . Parent topic: Setting up business cards","title":"Storing photos in the Domino directory"},{"location":"admin/system_requirements.html","text":"System requirements System requirements includes the minimum HCL Sametime and HCL Sametime Premimum requirements, such as: operating systems, hardware, software, and more. The minimum requirements must be available to install the product successfully. For detail system requirements, see the System requirements article. The graphic below shows a simple topology with required components: MongoDB and LDAP. The system requirements article along with the installation and configuration topics provides details for including them in your environment. Parent topic: Prerequistes","title":"System Requirements"},{"location":"admin/system_requirements.html#system_requirements","text":"System requirements includes the minimum HCL Sametime and HCL Sametime Premimum requirements, such as: operating systems, hardware, software, and more. The minimum requirements must be available to install the product successfully. For detail system requirements, see the System requirements article. The graphic below shows a simple topology with required components: MongoDB and LDAP. The system requirements article along with the installation and configuration topics provides details for including them in your environment. Parent topic: Prerequistes","title":"System requirements"},{"location":"admin/t_collecting_configuration_logging_data.html","text":"Collecting Sametime client configuration and log data You can collect client logs and configuration data into a zip file. Go the Collect Support Data window. In the Notes embedded client, click Help > Support > Collect Support Data . In the stand-alone Connect Client, click Gear icon > Help > Support > Collect Support Data . Select Enable Customized Tracing , and then click Next . Select one or more Sametime options, and then click Next . If you want to reproduce the issue, click Collect . When the collection completes, a link to the collection zip file is provided. Parent topic: Troubleshooting Sametime clients","title":"Collecting Sametime client configuration and log data {#collecting_sametime_client_configuration_logging .task}"},{"location":"admin/t_collecting_configuration_logging_data.html#collecting_sametime_client_configuration_logging","text":"You can collect client logs and configuration data into a zip file. Go the Collect Support Data window. In the Notes embedded client, click Help > Support > Collect Support Data . In the stand-alone Connect Client, click Gear icon > Help > Support > Collect Support Data . Select Enable Customized Tracing , and then click Next . Select one or more Sametime options, and then click Next . If you want to reproduce the issue, click Collect . When the collection completes, a link to the collection zip file is provided. Parent topic: Troubleshooting Sametime clients","title":"Collecting Sametime client configuration and log data"},{"location":"admin/t_configure_default_virtual_background.html","text":"Adding virtual backgrounds to the global library By default, you can customize your meetings with virtual backgrounds and themes. As an administrator, you can choose which backgrounds and themes are available to all users. Adding default virtual backgrounds on Docker By default, virtual background is enabled. You can choose which backgrounds are available to users by default. Depending on your business needs, you can customize the global library and prevent users from uploading custom background images. For more information, refer to Disabling custom background uploads . Adding default virtual backgrounds on Kubernetes Parent topic: Configuring","title":"Adding virtual backgrounds to the global library {#t_configure_default_virtual_background .task}"},{"location":"admin/t_configure_default_virtual_background.html#t_configure_default_virtual_background","text":"By default, you can customize your meetings with virtual backgrounds and themes. As an administrator, you can choose which backgrounds and themes are available to all users. Adding default virtual backgrounds on Docker By default, virtual background is enabled. You can choose which backgrounds are available to users by default. Depending on your business needs, you can customize the global library and prevent users from uploading custom background images. For more information, refer to Disabling custom background uploads . Adding default virtual backgrounds on Kubernetes Parent topic: Configuring","title":"Adding virtual backgrounds to the global library"},{"location":"admin/t_configure_jitsi.html","text":"Enabling multiple videobridges This section covers the steps on how to enable multiple videobridges. Below are a list of several secrets defined in the sametime-global-secrets resource. There are others not mentioned here as well. Refer to Managing secrets in Kubernetes for the basic guidelines regarding post-installation configuration. Obtain the geolocation license key from Geolocation DB . The location service determines the region matching and is needed for the primary installation. This configuration must be done as part of installation. Run the command to prepare the primary deployment. ./prepareDeployment.sh When prompted, answer Y to the Enable Octo prompt. For more information, refer to Preparing the deployment . Deploy the helm charts. Save the deployed charts for future reference. For more information, refer to Deploying Sametime to Kubernetes cluster . helm install sametime . Note: The command assumes you are in the helm directory. The . represents current directory. Instead of sametime , you can choose any descriptive name for the deployment. You can also deploy the application in a namespace through the -n or --namespace option. First create the namespace with kubectl create namespace . Confirm if you have a working single region deployment. For more information, refer to Kubernetes Deployment . Obtain MeetingLocationSecret , JvbAuthPassword , and JwtSecret from the primary installation. You can find this in <ReleaseName>-global-secrets . Ensure that the TCP primary Prosody is open on port 5222 for the secondary JVB to connect. The prosody host is accessible through the network load balancer if one is available in your deployment. Every deployment has a different FQDN and region. Run the command to obtain the FQDN of the prosody host on the primary deployment. kubectl get service jitsi -o yaml | grep -E 'hostname|ip' If your deployment does not have a load balancer, you may use the nginx ingress controller to forward tcp-services for port 5222. Make sure you configure the nginx-ingress-controller to enable tcp-services . Then in the tcp-services configmap, add an entry. In the following example, the primary Sametime deployment is in the default namespace. \"5222\": default/jitsi:5222 Run the command for the second deployment, using the information gathered in step 4. ./prepareDeployment.sh Optional: Repeat step 6 for every deployment if you have more than one primary or secondary installation. Switch to each remote regional cluster and deploy each deployment using helm. Save the deployed charts. Note: Assuming you use a single kubectl client to deploy against the primary and remote clusters, you can run the command to see the possible cluster contexts. kubectl config get-contexts You can use the --kube-context on the helm command and the --context option on the kubectl command to switch the context as you perform tasks against each deployment. After enabling multiple videobridges, you end up with a single primary installation and one or more secondary installations. Having multiple primary installations in one or multiple regions is not required. Open the correct port to establish a UDP connection. Primary JVB talks to secondary JVB and vice versa through JVB_OCTO_BIND_PORT. In a Kubernetes environment, JVB has a separate node group. Port 4096 should be open for UDP in that node group. JVB should be reachable from the other JVB through port 4096. Note: You can obtain the IP address of JVB using http://ifconfig.me . An alternative method is to set harvestOctoPublic to false in the values.yaml file and then enter the JVB public address in jvbOctoPublicAddress in values.yaml for both primary and secondary installations. Test the UDP connection to ensure that the users who have joined from separate bridges are able to communicate. Parent topic: Installing Sametime in a Kubernetes environment","title":"Enabling multiple videobridges {#t_configure_jitsi .task}"},{"location":"admin/t_configure_jitsi.html#t_configure_jitsi","text":"This section covers the steps on how to enable multiple videobridges. Below are a list of several secrets defined in the sametime-global-secrets resource. There are others not mentioned here as well. Refer to Managing secrets in Kubernetes for the basic guidelines regarding post-installation configuration. Obtain the geolocation license key from Geolocation DB . The location service determines the region matching and is needed for the primary installation. This configuration must be done as part of installation. Run the command to prepare the primary deployment. ./prepareDeployment.sh When prompted, answer Y to the Enable Octo prompt. For more information, refer to Preparing the deployment . Deploy the helm charts. Save the deployed charts for future reference. For more information, refer to Deploying Sametime to Kubernetes cluster . helm install sametime . Note: The command assumes you are in the helm directory. The . represents current directory. Instead of sametime , you can choose any descriptive name for the deployment. You can also deploy the application in a namespace through the -n or --namespace option. First create the namespace with kubectl create namespace . Confirm if you have a working single region deployment. For more information, refer to Kubernetes Deployment . Obtain MeetingLocationSecret , JvbAuthPassword , and JwtSecret from the primary installation. You can find this in <ReleaseName>-global-secrets . Ensure that the TCP primary Prosody is open on port 5222 for the secondary JVB to connect. The prosody host is accessible through the network load balancer if one is available in your deployment. Every deployment has a different FQDN and region. Run the command to obtain the FQDN of the prosody host on the primary deployment. kubectl get service jitsi -o yaml | grep -E 'hostname|ip' If your deployment does not have a load balancer, you may use the nginx ingress controller to forward tcp-services for port 5222. Make sure you configure the nginx-ingress-controller to enable tcp-services . Then in the tcp-services configmap, add an entry. In the following example, the primary Sametime deployment is in the default namespace. \"5222\": default/jitsi:5222 Run the command for the second deployment, using the information gathered in step 4. ./prepareDeployment.sh Optional: Repeat step 6 for every deployment if you have more than one primary or secondary installation. Switch to each remote regional cluster and deploy each deployment using helm. Save the deployed charts. Note: Assuming you use a single kubectl client to deploy against the primary and remote clusters, you can run the command to see the possible cluster contexts. kubectl config get-contexts You can use the --kube-context on the helm command and the --context option on the kubectl command to switch the context as you perform tasks against each deployment. After enabling multiple videobridges, you end up with a single primary installation and one or more secondary installations. Having multiple primary installations in one or multiple regions is not required. Open the correct port to establish a UDP connection. Primary JVB talks to secondary JVB and vice versa through JVB_OCTO_BIND_PORT. In a Kubernetes environment, JVB has a separate node group. Port 4096 should be open for UDP in that node group. JVB should be reachable from the other JVB through port 4096. Note: You can obtain the IP address of JVB using http://ifconfig.me . An alternative method is to set harvestOctoPublic to false in the values.yaml file and then enter the JVB public address in jvbOctoPublicAddress in values.yaml for both primary and secondary installations. Test the UDP connection to ensure that the users who have joined from separate bridges are able to communicate. Parent topic: Installing Sametime in a Kubernetes environment","title":"Enabling multiple videobridges"},{"location":"admin/t_configure_mongodb.html","text":"Configuring MongoDB for Sametime This topic describes how to configure MongoDB on both the Windows and Linux platform to support an HCL Sametime and HCL Sametime Premium deployment. MongoDB security is not enabled by default. Securing MongoDB is not required for Sametime, but provides the best results. For more information, see Enabling security in the MongoDB . Note: In the following steps, MongoDB version 4.4 is used as an example. If you are using a different version of MongoDB, refer to the MongoDB documentation for how to issue commands for the version that you are using. Start the MongoDB server as a service, if it has not already been started. Start the MongoDB console. For Windows, run the mongo.exe program which is in the following directory: C:\\Program Files\\MongoDB\\Server\\4.4\\bin For Linux, run >mongo. From the MongoDB console, run the following commands to create sametimeUser in MongoDB. You can use and modify the following example. If you change the user and password, you must use the new values when you configure the Sametime server in a later step. use admin db.createUser({user: \"sametimeUser\", pwd: \"sametime\", roles:[{role:\"readWrite\", db:\"chatlogging\"},{ role:\"readWrite\", db:\"mobileOffline\"},{ role:\"readWrite\", db:\"meeting\"},{role:\"dbAdmin\", db:\"meeting\"},{role:\"userAdminAnyDatabase\", db:\"admin\"}]}) When complete, a message is displayed that the user was added along with details as shown in the following example. From the MongoDB console, run the following commands to create the chatlogging database with events and sessions collections in MongoDB. use chatlogging db.EVENTS.insertOne({\"_id\" : \"dummy\"}) db.SESSIONS.insertOne({\"_id\" : \"dummy\"}) Note: The commands are case sensitive and must be typed as shown. Stop the MongoDB server and exit the console to pick up the new schema version change. To exit the MongoDB console, use the exit command. To shut down the MongoDB server: On Windows stop the MongoDB service On Linux use run the service mongod stop command Edit the mongod.cfg file. Windows: C:\\Program Files\\MongoDB\\Server\\4.4\\bin Linux: /etc/mongod.conf Remove the comment character or add the replication statement. Add add replSetName: rs0 under it. replication: replSetName: rs0 Under # network interfaces, add bindIpAll: true . net: port: 27017 bindIp: 127.0.0.1 bindIpAll: true Note: You can copy and paste the instructions from this document. Be aware that the format of the instructions is critical and must remain the same. The indentations are two spaces and not a tab. Also, there can be no trailing spaces at the end of each line. If the MongoDB logs and data were different from the default values, confirm this file needs to be updated correctly. Save the file. Make sure the file is not saved as a .txt filetype when saving. Start the MongoDB service. For Windows, start the MongoDB Server ( MongoDB) service from the Wiondows Services panel. For Linux, run the following command: service mongod start Start the MongoDB console. For Windows: C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongo.exe For Linux: >mongo From the MongoDB console, run the following command to initiate the Replica Set in MongoDB. rs.initiate() Note: For Windows, review the message that is displayed. The expected message is rs0:Secondary or rs0:OTHER. Press Enter and the message changes to rs0:Primary>. rs.conf() The replica set is now operational. To view the replica set con\ufb01guration, run the command from the MongoDB Console. To check the status of the replica set, use the rs.status() command. At this point, you can exit the console using the exit command. Note: When MongoDB is not configured on the local host, the configuration must reflect the correct host name or IP. See the HCL Sametime 11 clients fail when MongoDB host is not configured correctly on the Community server article for known issues. After the MongoDB is configured, you can install Sametime. Refer to the Installing Sametime topic for details. Parent topic: Installing the MongoDB","title":"Configuring MongoDB for Sametime"},{"location":"admin/t_configure_mongodb.html#configure_mongodb","text":"This topic describes how to configure MongoDB on both the Windows and Linux platform to support an HCL Sametime and HCL Sametime Premium deployment. MongoDB security is not enabled by default. Securing MongoDB is not required for Sametime, but provides the best results. For more information, see Enabling security in the MongoDB . Note: In the following steps, MongoDB version 4.4 is used as an example. If you are using a different version of MongoDB, refer to the MongoDB documentation for how to issue commands for the version that you are using. Start the MongoDB server as a service, if it has not already been started. Start the MongoDB console. For Windows, run the mongo.exe program which is in the following directory: C:\\Program Files\\MongoDB\\Server\\4.4\\bin For Linux, run >mongo. From the MongoDB console, run the following commands to create sametimeUser in MongoDB. You can use and modify the following example. If you change the user and password, you must use the new values when you configure the Sametime server in a later step. use admin db.createUser({user: \"sametimeUser\", pwd: \"sametime\", roles:[{role:\"readWrite\", db:\"chatlogging\"},{ role:\"readWrite\", db:\"mobileOffline\"},{ role:\"readWrite\", db:\"meeting\"},{role:\"dbAdmin\", db:\"meeting\"},{role:\"userAdminAnyDatabase\", db:\"admin\"}]}) When complete, a message is displayed that the user was added along with details as shown in the following example. From the MongoDB console, run the following commands to create the chatlogging database with events and sessions collections in MongoDB. use chatlogging db.EVENTS.insertOne({\"_id\" : \"dummy\"}) db.SESSIONS.insertOne({\"_id\" : \"dummy\"}) Note: The commands are case sensitive and must be typed as shown. Stop the MongoDB server and exit the console to pick up the new schema version change. To exit the MongoDB console, use the exit command. To shut down the MongoDB server: On Windows stop the MongoDB service On Linux use run the service mongod stop command Edit the mongod.cfg file. Windows: C:\\Program Files\\MongoDB\\Server\\4.4\\bin Linux: /etc/mongod.conf Remove the comment character or add the replication statement. Add add replSetName: rs0 under it. replication: replSetName: rs0 Under # network interfaces, add bindIpAll: true . net: port: 27017 bindIp: 127.0.0.1 bindIpAll: true Note: You can copy and paste the instructions from this document. Be aware that the format of the instructions is critical and must remain the same. The indentations are two spaces and not a tab. Also, there can be no trailing spaces at the end of each line. If the MongoDB logs and data were different from the default values, confirm this file needs to be updated correctly. Save the file. Make sure the file is not saved as a .txt filetype when saving. Start the MongoDB service. For Windows, start the MongoDB Server ( MongoDB) service from the Wiondows Services panel. For Linux, run the following command: service mongod start Start the MongoDB console. For Windows: C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongo.exe For Linux: >mongo From the MongoDB console, run the following command to initiate the Replica Set in MongoDB. rs.initiate() Note: For Windows, review the message that is displayed. The expected message is rs0:Secondary or rs0:OTHER. Press Enter and the message changes to rs0:Primary>. rs.conf() The replica set is now operational. To view the replica set con\ufb01guration, run the command from the MongoDB Console. To check the status of the replica set, use the rs.status() command. At this point, you can exit the console using the exit command. Note: When MongoDB is not configured on the local host, the configuration must reflect the correct host name or IP. See the HCL Sametime 11 clients fail when MongoDB host is not configured correctly on the Community server article for known issues. After the MongoDB is configured, you can install Sametime. Refer to the Installing Sametime topic for details. Parent topic: Installing the MongoDB","title":"Configuring MongoDB for Sametime"},{"location":"admin/t_configure_virtual_docker.html","text":"Adding default virtual backgrounds on Docker By default, virtual background is enabled. You can choose which backgrounds are available to users by default. Depending on your business needs, you can customize the global library and prevent users from uploading custom background images. For more information, refer to Disabling custom background uploads . Ensure that all images are in JPG or GIF format. Copy the image files into the sametime-config/web/virtual-background/custom directory. Run docker-compose up -d command to apply all changes. Parent topic: Adding virtual backgrounds to the global library Removing default virtual backgrounds on Docker Existing default background can be deleted from the global library. Edit the custom.env file in the directory where the installation package was decompressed. Add the following statement under the REMOVE_BACKGROUND_IMAGES variable specifying the image name. REMOVE_VIRTUAL_BACKGROUNDS=<background-N>,*<background-N\\>* N is a number from 1 through 7. Run docker-compose up -d command to apply all changes.","title":"Adding default virtual backgrounds on Docker {#t_configure_virtual_docker .task}"},{"location":"admin/t_configure_virtual_docker.html#t_configure_virtual_docker","text":"By default, virtual background is enabled. You can choose which backgrounds are available to users by default. Depending on your business needs, you can customize the global library and prevent users from uploading custom background images. For more information, refer to Disabling custom background uploads . Ensure that all images are in JPG or GIF format. Copy the image files into the sametime-config/web/virtual-background/custom directory. Run docker-compose up -d command to apply all changes. Parent topic: Adding virtual backgrounds to the global library","title":"Adding default virtual backgrounds on Docker"},{"location":"admin/t_configure_virtual_docker.html#task_e31_gql_z5b","text":"Existing default background can be deleted from the global library. Edit the custom.env file in the directory where the installation package was decompressed. Add the following statement under the REMOVE_BACKGROUND_IMAGES variable specifying the image name. REMOVE_VIRTUAL_BACKGROUNDS=<background-N>,*<background-N\\>* N is a number from 1 through 7. Run docker-compose up -d command to apply all changes.","title":"Removing default virtual backgrounds on Docker"},{"location":"admin/t_configure_virtual_k8s.html","text":"Adding default virtual backgrounds on Kubernetes Ensure that all images are in JPG or GIF format. Copy the image files into the /usr/share/jitsi-meet/images/virtual-background/custom directory under the web pod and then restart the pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <filename.gif> $POD:/usr/share/jitsi-meet/images/virtual-background/custom/. kubectl delete po $POD Note: Add the Namespace argument if Sametime is installed in a Namespace. Parent topic: Adding virtual backgrounds to the global library Removing default virtual backgrounds on Kubernetes Existing default background can be deleted from the global library. Edit the values.yaml file in the directory where the installation package was decompressed. Add the following statement under the global.removeVirtualBackgrounds variable specifying the image name and then restart your pod. global: removeVirtualBackgrounds=*<background-N\\>*,*<background-N\\>* N is a number from 1 through 7. Note: You are not required to scale the backgrounds pod as these settings are global to the web app and only add to or subtract away from the default set of available \"system\" backgrounds. The backgrounds pod only deals with individual user settings and what background a user has selected.","title":"Adding default virtual backgrounds on Kubernetes {#t_configure_virtual_k8s .task}"},{"location":"admin/t_configure_virtual_k8s.html#t_configure_virtual_k8s","text":"Ensure that all images are in JPG or GIF format. Copy the image files into the /usr/share/jitsi-meet/images/virtual-background/custom directory under the web pod and then restart the pod. POD=$(kubectl get po --selector=name=web-0 | tail -1 | awk ' { print $1 } ') kubectl cp <filename.gif> $POD:/usr/share/jitsi-meet/images/virtual-background/custom/. kubectl delete po $POD Note: Add the Namespace argument if Sametime is installed in a Namespace. Parent topic: Adding virtual backgrounds to the global library","title":"Adding default virtual backgrounds on Kubernetes"},{"location":"admin/t_configure_virtual_k8s.html#task_e31_gql_z5b","text":"Existing default background can be deleted from the global library. Edit the values.yaml file in the directory where the installation package was decompressed. Add the following statement under the global.removeVirtualBackgrounds variable specifying the image name and then restart your pod. global: removeVirtualBackgrounds=*<background-N\\>*,*<background-N\\>* N is a number from 1 through 7. Note: You are not required to scale the backgrounds pod as these settings are global to the web app and only add to or subtract away from the default set of available \"system\" backgrounds. The backgrounds pod only deals with individual user settings and what background a user has selected.","title":"Removing default virtual backgrounds on Kubernetes"},{"location":"admin/t_create_truststore.html","text":"Creating a truststore with a third party certificate When creating a connection between the Sametime server and a service using TLS, a truststore is needed. The truststore is used to store Sametime certificates. To create a trust store, the Java Keytool command is used. The keytool utility must be installed to complete the steps. The command is part of the Oracle and OpenJDK toolkits. The OpenJDK is included with Sametime. For more information on keytool, see the OpenJDK The keytool Command or Oracle Tools Reference websites. Run the utility from the directory where it is installed. The certificate used to trust the connection must be a CRT file type format. For chained certificates, you also need the root and intermediate certificates. When using SAML connections, LDAP connections, and business card photos, there are additional considerations for creating the truststore. See the following sections for details. Parent topic: Securing connections Creating a truststore when using SAML Ensure that you read the introductory section. When using a SAML connection, the Sametime server must be able to decodes the SAML tokens. You need to know how many SAML partnerships or relying party trusts are required. For information on identifying the number, see Setting up SSO using SAML . If you are supporting more than one relying party trust, create one trust store that contains certificates for each one. The SAML trust store file name must be samltruststore.p12. Run the following command. keytool -importcert -storetype PKCS12 -keystore samltruststore.p12 -storepass truststore\\_password -alias alias\\_name -file file\\_to\\_trust.crt -noprompt truststore_password : The desired password for your trust store. Save the password for later use. alias_name : The value to display in the trust store, each certificate must have a unique alias. file_to_trust.crt : The full path to the certificate you are adding to the trust store. Note: If you are using OpenJDK version 11 and later, add the -J-Dkeystore.pkcs12.legacy parameter to the command. For example: keytool -importcert -storetype PKCS12 -keystore samltruststore.p12 -storepass truststore\\_password -alias alias\\_name -file file\\_to\\_trust.crt -noprompt -J-Dkeystore.pkcs12.legacy To complete the configuration, refer to one of the following topics. Configuring SAML on Docker Configuring SAML in Kubernetes Creating a truststore when using LDAP Ensure that you read the introductory section. If the connection is secured using TLS, a certificate is needed to complete the SSL handshake with LDAP. If you are connecting to multiple LDAP servers that have different certificates, you need to trust each certificate in a single trust store. The LDAP trust store file name must be ldaptruststore.p12. It is defined using the commands in this procedure. Copy the certificates to be trusted to the machine where the keytool utility is installed, and stage them in a temporary directory. Create a keystore by issuing the below command with the parameters: keytool -importcert -storetype PKCS12 -keystore ldaptruststore.p12 -storepass truststore\\_password -alias alias\\_name -file file\\_to\\_trust.crt -noprompt truststore_password : The desired password for your trust store. Save the password for later use. alias_name : The value to display in the trust store, each certificate must have a unique alias. file_to_trust.crt : The full path to the certificate you are adding to the trust store. To import additional certificates into an existing trust store, run the below command, be sure to use a unique alias for each additional certificate. keytool -importcert -storetype PKCS12 -keystore ldaptruststore.p12 -storepass truststore\\_password -alias aliasname -file file\\_to\\_trust.crt -noprompt To implement the trust store, refer to one of the following topics. Configuring LDAP on Docker Configuring LDAP on Kubernetes Creating a truststore when using business card photos If you are retrieving photos from an HTTPS trusted URL, the Sametime Proxy service needs a truststore to properly retrieve the photos from the https protected PhotoURL. The truststore file name must be named XXXX.p12. To create the truststore, run the following command. keytool -importcert -storetype PKCS12 -keystore XXX.p12 -storepass truststore_password -alias alias_name -file file_to_trust.crt -noprompt truststore_password : The desired password for your truststore. Save the password for later use. use.alias_name : The value to display in the truststore, each certificate must have a unique alias. file_to_trust.crt : The full path to the certificate you are adding to the truststore. After creating the truststore, see Setting up business cards .","title":"Creating a truststore with a third party certificate {#t_create_truststore .task}"},{"location":"admin/t_create_truststore.html#t_create_truststore","text":"When creating a connection between the Sametime server and a service using TLS, a truststore is needed. The truststore is used to store Sametime certificates. To create a trust store, the Java Keytool command is used. The keytool utility must be installed to complete the steps. The command is part of the Oracle and OpenJDK toolkits. The OpenJDK is included with Sametime. For more information on keytool, see the OpenJDK The keytool Command or Oracle Tools Reference websites. Run the utility from the directory where it is installed. The certificate used to trust the connection must be a CRT file type format. For chained certificates, you also need the root and intermediate certificates. When using SAML connections, LDAP connections, and business card photos, there are additional considerations for creating the truststore. See the following sections for details. Parent topic: Securing connections","title":"Creating a truststore with a third party certificate"},{"location":"admin/t_create_truststore.html#task_kh3_h2r_dvb","text":"Ensure that you read the introductory section. When using a SAML connection, the Sametime server must be able to decodes the SAML tokens. You need to know how many SAML partnerships or relying party trusts are required. For information on identifying the number, see Setting up SSO using SAML . If you are supporting more than one relying party trust, create one trust store that contains certificates for each one. The SAML trust store file name must be samltruststore.p12. Run the following command. keytool -importcert -storetype PKCS12 -keystore samltruststore.p12 -storepass truststore\\_password -alias alias\\_name -file file\\_to\\_trust.crt -noprompt truststore_password : The desired password for your trust store. Save the password for later use. alias_name : The value to display in the trust store, each certificate must have a unique alias. file_to_trust.crt : The full path to the certificate you are adding to the trust store. Note: If you are using OpenJDK version 11 and later, add the -J-Dkeystore.pkcs12.legacy parameter to the command. For example: keytool -importcert -storetype PKCS12 -keystore samltruststore.p12 -storepass truststore\\_password -alias alias\\_name -file file\\_to\\_trust.crt -noprompt -J-Dkeystore.pkcs12.legacy To complete the configuration, refer to one of the following topics. Configuring SAML on Docker Configuring SAML in Kubernetes","title":"Creating a truststore when using SAML"},{"location":"admin/t_create_truststore.html#task_igr_nmr_dvb","text":"Ensure that you read the introductory section. If the connection is secured using TLS, a certificate is needed to complete the SSL handshake with LDAP. If you are connecting to multiple LDAP servers that have different certificates, you need to trust each certificate in a single trust store. The LDAP trust store file name must be ldaptruststore.p12. It is defined using the commands in this procedure. Copy the certificates to be trusted to the machine where the keytool utility is installed, and stage them in a temporary directory. Create a keystore by issuing the below command with the parameters: keytool -importcert -storetype PKCS12 -keystore ldaptruststore.p12 -storepass truststore\\_password -alias alias\\_name -file file\\_to\\_trust.crt -noprompt truststore_password : The desired password for your trust store. Save the password for later use. alias_name : The value to display in the trust store, each certificate must have a unique alias. file_to_trust.crt : The full path to the certificate you are adding to the trust store. To import additional certificates into an existing trust store, run the below command, be sure to use a unique alias for each additional certificate. keytool -importcert -storetype PKCS12 -keystore ldaptruststore.p12 -storepass truststore\\_password -alias aliasname -file file\\_to\\_trust.crt -noprompt To implement the trust store, refer to one of the following topics. Configuring LDAP on Docker Configuring LDAP on Kubernetes","title":"Creating a truststore when using LDAP"},{"location":"admin/t_create_truststore.html#task_xjf_s3v_fvb","text":"If you are retrieving photos from an HTTPS trusted URL, the Sametime Proxy service needs a truststore to properly retrieve the photos from the https protected PhotoURL. The truststore file name must be named XXXX.p12. To create the truststore, run the following command. keytool -importcert -storetype PKCS12 -keystore XXX.p12 -storepass truststore_password -alias alias_name -file file_to_trust.crt -noprompt truststore_password : The desired password for your truststore. Save the password for later use. use.alias_name : The value to display in the truststore, each certificate must have a unique alias. file_to_trust.crt : The full path to the certificate you are adding to the truststore. After creating the truststore, see Setting up business cards .","title":"Creating a truststore when using business card photos"},{"location":"admin/t_delete_ldap.html","text":"Deleting user IDs Stop the Sametime server prior to running the Sametime database utility. Refer to Starting and stopping the Sametime server for the steps. To remove specified individual contact names from contact lists and privacy lists, follow these steps: Using a text editor, create a CSV file for only one type of change. You cannot mix name change types in the same CSV. Follow the syntax below. The file must be saved in UTF-8 format. Delete uid For example, DELETE uid=John Deere,ou=sametime,dc=hcl,dc=com uid=Marta Smith,ou=sametime,dc=hcl,dc=com cn=portaladminid,o=example.com Copy the CSV file into an accessible read or writable location. Edit the .env file used to contain the environment variables. Follow the syntax below. MONGO_CONNECTION_URL=mongodb://sametimeUser:xxxxxxxx@192.168.1.1:27017/admin?authSource=admin&authMechanism=SCRAM-SHA-256&readPreference=primary&directConnection=true&ssl=false USER_ID_CSV=/data/test_id.csv Run the command below manually on a stand-alone community server or on a server in a cluster which replicates the change throughout the cluster. The CSV file is mounted in the container for the application to access and process. docker run -v <path-to-data-directory>:<path-to-data-directory>:rw --env-file default.env hclcr.io/st/sametime-db-utility Verify if the changes have been applied. For more information, refer to Sametime DB Utility reporting . Parent topic: Updating Sametime data in MongoDB","title":"Deleting user IDs {#t_delete_ldap .task}"},{"location":"admin/t_delete_ldap.html#t_delete_ldap","text":"Stop the Sametime server prior to running the Sametime database utility. Refer to Starting and stopping the Sametime server for the steps. To remove specified individual contact names from contact lists and privacy lists, follow these steps: Using a text editor, create a CSV file for only one type of change. You cannot mix name change types in the same CSV. Follow the syntax below. The file must be saved in UTF-8 format. Delete uid For example, DELETE uid=John Deere,ou=sametime,dc=hcl,dc=com uid=Marta Smith,ou=sametime,dc=hcl,dc=com cn=portaladminid,o=example.com Copy the CSV file into an accessible read or writable location. Edit the .env file used to contain the environment variables. Follow the syntax below. MONGO_CONNECTION_URL=mongodb://sametimeUser:xxxxxxxx@192.168.1.1:27017/admin?authSource=admin&authMechanism=SCRAM-SHA-256&readPreference=primary&directConnection=true&ssl=false USER_ID_CSV=/data/test_id.csv Run the command below manually on a stand-alone community server or on a server in a cluster which replicates the change throughout the cluster. The CSV file is mounted in the container for the application to access and process. docker run -v <path-to-data-directory>:<path-to-data-directory>:rw --env-file default.env hclcr.io/st/sametime-db-utility Verify if the changes have been applied. For more information, refer to Sametime DB Utility reporting . Parent topic: Updating Sametime data in MongoDB","title":"Deleting user IDs"},{"location":"admin/t_different_hostname.html","text":"Configuring alternate host name for Web Chat The default host name for Meetings and Web Chat are the same. However, you can configure Web Chat to use a different host name. Parent topic: Meetings Configuring an alternate host name in Kubernetes To specify a different host name for your Web Chat access, update the values.yaml file. For example, if you want to webchat.company.com as your host name add the following statement in the values.yaml file. extraChatHostname: webchat.company.com Configuring an alternate host name in Docker To specify a different host name, edit the custom.env file. For example, if you want to webchat.company.com as your host name add the following statement in the REACT_APP_chat\\_server\\_hostname","title":"Configuring alternate host name for Web Chat {#t_different_hostname .task}"},{"location":"admin/t_different_hostname.html#t_different_hostname","text":"The default host name for Meetings and Web Chat are the same. However, you can configure Web Chat to use a different host name. Parent topic: Meetings","title":"Configuring alternate host name for Web Chat"},{"location":"admin/t_different_hostname.html#task_jww_2k2_rvb","text":"To specify a different host name for your Web Chat access, update the values.yaml file. For example, if you want to webchat.company.com as your host name add the following statement in the values.yaml file. extraChatHostname: webchat.company.com","title":"Configuring an alternate host name in Kubernetes"},{"location":"admin/t_different_hostname.html#task_jx3_hk2_rvb","text":"To specify a different host name, edit the custom.env file. For example, if you want to webchat.company.com as your host name add the following statement in the REACT_APP_chat\\_server\\_hostname","title":"Configuring an alternate host name in Docker"},{"location":"admin/t_disable_background_upload.html","text":"Disabling custom background uploads By default, you can upload any supported image type to use as your background during a meeting. Depending on your organization's requirements, you can disable custom background uploads by modifying the applicable file. Docker .env Kubernetes values.yaml Modify the configuration file. The default value is TRUE. For Docker, update the value of the ENABLE_USER_VIRTUAL_BACKGROUND parameter: ENABLE_USER_VIRTUAL_BACKGROUND=false For Kubernetes, update the value of the UserVirtualBackgroundsEnabled parameter: userVirtualBackgroundsEnabled: false Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Managing Sametime Meetings","title":"Disabling custom background uploads {#t_disable_background_upload .task}"},{"location":"admin/t_disable_background_upload.html#t_disable_background_upload","text":"By default, you can upload any supported image type to use as your background during a meeting. Depending on your organization's requirements, you can disable custom background uploads by modifying the applicable file. Docker .env Kubernetes values.yaml Modify the configuration file. The default value is TRUE. For Docker, update the value of the ENABLE_USER_VIRTUAL_BACKGROUND parameter: ENABLE_USER_VIRTUAL_BACKGROUND=false For Kubernetes, update the value of the UserVirtualBackgroundsEnabled parameter: userVirtualBackgroundsEnabled: false Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Managing Sametime Meetings","title":"Disabling custom background uploads"},{"location":"admin/t_docker_manage_meeting_policies.html","text":"Managing policies on Docker This section outlines the steps on how to manage policies in a Docker environment. You can manage your policies on Docker by modifying the following file. docker-compose.yaml To manage your policies on Docker, follow these steps: Copy the applicable files out of the container. docker cp <container_name>:/local/notesdata/policies.user.xml . docker cp <container_name>:/local/notesdata/policies.server.xml . This step places the files in the current directory. Locate and edit the policies as necessary. In the Community section of docker-compose.yaml , add a volume reference. Below is an example. services: community: image: hclcr.io/st/chat-server:${BUILD_LEVEL} restart: ${RESTART_POLICY} env_file: - custom.env - debug.env environment: - JWT_SECRET_ENV=${JWT_APP_SECRET} - DOMINO_SERVER_HOST_ENV=domino - DOMINO_SERVER_NAME_ENV=CN\\=domino\\/O\\=test - DOMINO_SERVER_DOMAIN_ENV=test - ST_BRANDING_INFO_ENV=standard volumes: - ./policies.user.xml:/local/notesdata/policies.user.xml networks: - sametime.test extra_hosts: - \"stmobilev12:10.134.102.40\" Restart the server to apply the changes. Parent topic: Configuring policies","title":"Managing policies on Docker {#t_docker_manage_meeting_policies .task}"},{"location":"admin/t_docker_manage_meeting_policies.html#t_docker_manage_meeting_policies","text":"This section outlines the steps on how to manage policies in a Docker environment. You can manage your policies on Docker by modifying the following file. docker-compose.yaml To manage your policies on Docker, follow these steps: Copy the applicable files out of the container. docker cp <container_name>:/local/notesdata/policies.user.xml . docker cp <container_name>:/local/notesdata/policies.server.xml . This step places the files in the current directory. Locate and edit the policies as necessary. In the Community section of docker-compose.yaml , add a volume reference. Below is an example. services: community: image: hclcr.io/st/chat-server:${BUILD_LEVEL} restart: ${RESTART_POLICY} env_file: - custom.env - debug.env environment: - JWT_SECRET_ENV=${JWT_APP_SECRET} - DOMINO_SERVER_HOST_ENV=domino - DOMINO_SERVER_NAME_ENV=CN\\=domino\\/O\\=test - DOMINO_SERVER_DOMAIN_ENV=test - ST_BRANDING_INFO_ENV=standard volumes: - ./policies.user.xml:/local/notesdata/policies.user.xml networks: - sametime.test extra_hosts: - \"stmobilev12:10.134.102.40\" Restart the server to apply the changes. Parent topic: Configuring policies","title":"Managing policies on Docker"},{"location":"admin/t_enabling_community_debug.html","text":"Enabling Community trace in Kubernetes The Sametime Community pod supports a variety of debug parameters as documented in Common debug parameters for Sametime Community Server article. Note: In Sametime 12, the Community debug is located in the sametime.ini file is handled by a ConfigMap in Kubernetes. The debug parameters from previous releases must be modified if they are configured into the ConfigMap. The changes in this task affect the following pods: community Change directories to where helm is located.; Open the values.yaml file for editing. In the global section, add the following line: enableCommunityDebug: true Note: Confirm the indentation matches the other settings (two spaces). When finished, save and close the file. Apply the changes. Upgrade the deployment by following the instructions in Applying configuration changes in Docker . Run the following command to open the ConfigMap. kubectl edit cm sametime-community-logging Press i to switch to edit mode. Configure any custom debug parameters. If you know the parameter, it should be configured with the following format. The first characters are STI__DEBUG. Note: Enter two underscores to separate. If your debug parameters belong in the [Debug] section of the sametime.ini originally, add two underscores and then your parameter, followed by a colon and its value in quotes. For example, if setting VP_LDAP_TRACE=1 at the [Debug] section of the sametime.ini file, then the configuration setting would be: STI__DEBUG__VP_LDAP_TRACE: \u201c1\u201d Note: In the example, there are two underscores between STI and DEBUG and then two more underscores before the parameter. If your debug setting is a component level debug such as [Debug-StUsers], then the parameter must have the same beginning STI__DEBUG, followed by a single underscore and the component name, and then two underscores and the parameter. For example, if you are setting component level debug for VP_TRACE_ALL=1 for the component [Debug-StUsers], then the configuration setting would be like this: STI__Debug_StUsers__VP_TRACE_ALL: \"1\" Save and close the ConfigMap. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Troubleshooting Sametime on Kubernetes","title":"Enabling Community trace in Kubernetes {#t_enabling_community_debug .task}"},{"location":"admin/t_enabling_community_debug.html#t_enabling_community_debug","text":"The Sametime Community pod supports a variety of debug parameters as documented in Common debug parameters for Sametime Community Server article. Note: In Sametime 12, the Community debug is located in the sametime.ini file is handled by a ConfigMap in Kubernetes. The debug parameters from previous releases must be modified if they are configured into the ConfigMap. The changes in this task affect the following pods: community Change directories to where helm is located.; Open the values.yaml file for editing. In the global section, add the following line: enableCommunityDebug: true Note: Confirm the indentation matches the other settings (two spaces). When finished, save and close the file. Apply the changes. Upgrade the deployment by following the instructions in Applying configuration changes in Docker . Run the following command to open the ConfigMap. kubectl edit cm sametime-community-logging Press i to switch to edit mode. Configure any custom debug parameters. If you know the parameter, it should be configured with the following format. The first characters are STI__DEBUG. Note: Enter two underscores to separate. If your debug parameters belong in the [Debug] section of the sametime.ini originally, add two underscores and then your parameter, followed by a colon and its value in quotes. For example, if setting VP_LDAP_TRACE=1 at the [Debug] section of the sametime.ini file, then the configuration setting would be: STI__DEBUG__VP_LDAP_TRACE: \u201c1\u201d Note: In the example, there are two underscores between STI and DEBUG and then two more underscores before the parameter. If your debug setting is a component level debug such as [Debug-StUsers], then the parameter must have the same beginning STI__DEBUG, followed by a single underscore and the component name, and then two underscores and the parameter. For example, if you are setting component level debug for VP_TRACE_ALL=1 for the component [Debug-StUsers], then the configuration setting would be like this: STI__Debug_StUsers__VP_TRACE_ALL: \"1\" Save and close the ConfigMap. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Troubleshooting Sametime on Kubernetes","title":"Enabling Community trace in Kubernetes"},{"location":"admin/t_grafana_docker.html","text":"Configuring Docker to run Grafana Open the following ports for the different monitoring services: Grafana: 3001 Prometheus: 9091 Pushgateway: 9092 Node-exporter: 9100 Cadvisor: 8088 When applicable, ensure that these services are up and active for panels to be working. Pushgateway: http://host.docker.internal:9092 Proxy metrics: http://host.docker.internal:8081/actuator/prometheus Cadvisor: http://host.docker.internal:8088/containers Note: You can use localhost instead of the Docker address if you are on a local server. Before you can create your first dashboard, you need to add your data source. Note: Only users with the organization Admin role can add data sources. To run Grafana and import your dashboard, follow these steps: Update the docker-compose.yml file. In community > environment, add the evironment variable below. MONITORING_ENABLED=true Run the command to start monitoring services. docker-compose -f docker-compose.yml -f docker-compose-monitoring.yml up -d Navigate to the Grafana sign-in page in your browser. localhost:3001 Note: 3001 is the default port for Grafana. Alternatively, you can use http://host.docker.internal:3001 if you are using a remote setup. Enter admin for both username and password, and then select Sign In . If successful, you will be prompted to change the password. Select OK and enter the new password. From the side menu, select Settings . Select Data sources . Select Add data source . Select Prometheus as the data source. Open the Prometheus data source and edit the settings. Under the HTTP section, enter the following URL. http://host.docker.internal:9091 Select Save and test . A message is displayed to confirm if the data source is working. Upload the Docker_Sametime_Dashboard.json file. For more information, contact HCL Customer Support . Select Prometheus (default) as data source and then select Import . Save the dashboard. Parent topic: Monitoring your meeting and chat metrics with Grafana\u00ae","title":"Configuring Docker to run Grafana {#t_grafana_docker .task}"},{"location":"admin/t_grafana_docker.html#t_grafana_docker","text":"Open the following ports for the different monitoring services: Grafana: 3001 Prometheus: 9091 Pushgateway: 9092 Node-exporter: 9100 Cadvisor: 8088 When applicable, ensure that these services are up and active for panels to be working. Pushgateway: http://host.docker.internal:9092 Proxy metrics: http://host.docker.internal:8081/actuator/prometheus Cadvisor: http://host.docker.internal:8088/containers Note: You can use localhost instead of the Docker address if you are on a local server. Before you can create your first dashboard, you need to add your data source. Note: Only users with the organization Admin role can add data sources. To run Grafana and import your dashboard, follow these steps: Update the docker-compose.yml file. In community > environment, add the evironment variable below. MONITORING_ENABLED=true Run the command to start monitoring services. docker-compose -f docker-compose.yml -f docker-compose-monitoring.yml up -d Navigate to the Grafana sign-in page in your browser. localhost:3001 Note: 3001 is the default port for Grafana. Alternatively, you can use http://host.docker.internal:3001 if you are using a remote setup. Enter admin for both username and password, and then select Sign In . If successful, you will be prompted to change the password. Select OK and enter the new password. From the side menu, select Settings . Select Data sources . Select Add data source . Select Prometheus as the data source. Open the Prometheus data source and edit the settings. Under the HTTP section, enter the following URL. http://host.docker.internal:9091 Select Save and test . A message is displayed to confirm if the data source is working. Upload the Docker_Sametime_Dashboard.json file. For more information, contact HCL Customer Support . Select Prometheus (default) as data source and then select Import . Save the dashboard. Parent topic: Monitoring your meeting and chat metrics with Grafana\u00ae","title":"Configuring Docker to run Grafana"},{"location":"admin/t_grafana_k8s.html","text":"Configuring Kubernetes to run Grafana Install Prometheus. For more information, refer to Installing Prometheus . Install Grafana in your Kubernetes cluster. For the installation details, refer to Deploying Grafana on Kubernetes . To check if the service was created correctly, run kubectl get svc -n monitoring . A list of all the services is displayed. Ensure that the Grafana type is ClusterIP and the port is 3000 . Below is an example. Name Type Cluster-IP External-IP Port Age grafana ClusterIP 10.97.236.243 <none> 3000/TCP 7m2s Before you can create your first dashboard, you need to add your data source. Note: Only users with the organization Admin role can add data sources. To run Grafana and import your dashboard, follow these steps: Enable port forwarding for the Grafana service. kubectl port-forward service/grafana 3000:3000 -n monitoring Navigate to the Grafana sign-in page in your browser. localhost:3000 Note: 3000 is the default port for Grafana. Alternatively, you can use <Cluster-IP>:3000 if you are using a remote setup. Enter admin for both username and password, and then select Sign In . If successful, you will be prompted to change the password. Select OK and enter the new password. From the left panel, hover over + Create and select Import . Upload the K8_Sametime_Dashboard.json file. For more information, contact HCL Customer Support . Select Prometheus (default) as data source and then select Import . Save the dashboard. Parent topic: Monitoring your meeting and chat metrics with Grafana\u00ae","title":"Configuring Kubernetes to run Grafana {#t_grafana_k8s .task}"},{"location":"admin/t_grafana_k8s.html#t_grafana_k8s","text":"Install Prometheus. For more information, refer to Installing Prometheus . Install Grafana in your Kubernetes cluster. For the installation details, refer to Deploying Grafana on Kubernetes . To check if the service was created correctly, run kubectl get svc -n monitoring . A list of all the services is displayed. Ensure that the Grafana type is ClusterIP and the port is 3000 . Below is an example. Name Type Cluster-IP External-IP Port Age grafana ClusterIP 10.97.236.243 <none> 3000/TCP 7m2s Before you can create your first dashboard, you need to add your data source. Note: Only users with the organization Admin role can add data sources. To run Grafana and import your dashboard, follow these steps: Enable port forwarding for the Grafana service. kubectl port-forward service/grafana 3000:3000 -n monitoring Navigate to the Grafana sign-in page in your browser. localhost:3000 Note: 3000 is the default port for Grafana. Alternatively, you can use <Cluster-IP>:3000 if you are using a remote setup. Enter admin for both username and password, and then select Sign In . If successful, you will be prompted to change the password. Select OK and enter the new password. From the left panel, hover over + Create and select Import . Upload the K8_Sametime_Dashboard.json file. For more information, contact HCL Customer Support . Select Prometheus (default) as data source and then select Import . Save the dashboard. Parent topic: Monitoring your meeting and chat metrics with Grafana\u00ae","title":"Configuring Kubernetes to run Grafana"},{"location":"admin/t_ingress_configure.html","text":"Configuring Ingress for Mux Complete the steps in the topic Installing Ingress It is recommended to save the file that you are creating as a result of this topic. Do not save the file in the helm folder, save it at the root directory or sub-directory where the Sametime installation package was unzipped. Sametime mux serves connections from Sametime Connect and embedded clients on port 1533. This connection can be routed through the ingress controller as well. This is suitable for an on-premise Kubernetes cluster. If you are deploying in a cloud hosted Kubernetes environment (Google Kubernetes Engine, Amazon Elastic Kubernetes Service, etc) the Sametime mux is deployed as a Kubernetes load balancer service automatically. These steps are not necessary for cloud hosted environments. For traffic to flow through the Ingress controller, you must apply a configuration map to Ingress. Create a file called mux-configmap.yaml with the following content. apiVersion: v1 kind: ConfigMap metadata: name: tcp-services namespace: namespace\\_name data: 1533: \"default/mux:mux\" If ingress is installed in a namespace, include the namespace: namespace\\_name statement, otherwise remove it. Apply the configMap values to the configuration by running the following command. kubectl apply -f mux-configmap.yaml Run the following kubectl patch command so that port 1533 is available. kubectl -n ingress-nginx patch deployment ingress-nginx-controller --type=json -p='[\\{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/args\", \"value\": [\"/nginx-ingress-controller\",\"--publish-service=$(POD_NAMESPACE)/ingress-nginx-controller\",\"--election-id=ingress-controller-leader\",\"--controller-class=k8s.io/ingress-nginx\",\"--configmap=$(POD_NAMESPACE)/ingress-nginx-controller\",\"--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services\"] }]' Parent topic: Installing Ingress","title":"Configuring Ingress for Mux {#t_ingress_configure .task}"},{"location":"admin/t_ingress_configure.html#t_ingress_configure","text":"Complete the steps in the topic Installing Ingress It is recommended to save the file that you are creating as a result of this topic. Do not save the file in the helm folder, save it at the root directory or sub-directory where the Sametime installation package was unzipped. Sametime mux serves connections from Sametime Connect and embedded clients on port 1533. This connection can be routed through the ingress controller as well. This is suitable for an on-premise Kubernetes cluster. If you are deploying in a cloud hosted Kubernetes environment (Google Kubernetes Engine, Amazon Elastic Kubernetes Service, etc) the Sametime mux is deployed as a Kubernetes load balancer service automatically. These steps are not necessary for cloud hosted environments. For traffic to flow through the Ingress controller, you must apply a configuration map to Ingress. Create a file called mux-configmap.yaml with the following content. apiVersion: v1 kind: ConfigMap metadata: name: tcp-services namespace: namespace\\_name data: 1533: \"default/mux:mux\" If ingress is installed in a namespace, include the namespace: namespace\\_name statement, otherwise remove it. Apply the configMap values to the configuration by running the following command. kubectl apply -f mux-configmap.yaml Run the following kubectl patch command so that port 1533 is available. kubectl -n ingress-nginx patch deployment ingress-nginx-controller --type=json -p='[\\{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/args\", \"value\": [\"/nginx-ingress-controller\",\"--publish-service=$(POD_NAMESPACE)/ingress-nginx-controller\",\"--election-id=ingress-controller-leader\",\"--controller-class=k8s.io/ingress-nginx\",\"--configmap=$(POD_NAMESPACE)/ingress-nginx-controller\",\"--tcp-services-configmap=$(POD_NAMESPACE)/tcp-services\"] }]' Parent topic: Installing Ingress","title":"Configuring Ingress for Mux"},{"location":"admin/t_ingress_install.html","text":"Installing Ingress When running Kubernetes on-prem, managing load-balancing must be considered for Sametime Meetings and Web Chat. Both of these Sametime features require the addition of an ingress controller. Ingress is secured with a SSL certificate which must be created. Create a secret for ingress by following the steps in Updating the TLS certificates on Kubernetes . If different the host names for Web Chat and Meetings are different, open the values.yaml file and add the following line to identify the Web Chat host name. extraChatHostname: web\\_chat\\_hostname Verify that there are two spaces at the beginning of the line. Save and close the values.yaml file. There are many different ingress controllers available, however; not all of them have been tested with Sametime. The procedure in this topic describes deploying the NGINX Ingress controller. If you are using another ingress controller, refer to the documentation for that ingress controller. An Ingress controller is also used for the Connect and Embedded clients mux traffic deployed on-premise Kubernetes. After installing the ingress controller, additional configuraiton steps are needed. See Configuring Ingress for Mux for details. Helm commands are used to install and configure the NGINX Ingress controller. Add the nginx repository using the helm repo command. helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx Update the repository with the following command. helm repo update Run the following command to install NGINX. helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.service.loadBalancerIP=IP\\_address Where IP_address is the reserved IP address. If you have a namespace dedicated to Sametime, include the namespace option on the command. Verify that nginx-ingress has accepted the correct static IP address by running the kubectl get command. Includes the -w parameter. To break free from this, use Ctrl+C. kubectl get services -o wide -w nginx-ingress-ingress-nginx-controller Use Contl+C to return to the command prompt. Configuring Ingress for Mux Parent topic: Installing Sametime in a Kubernetes environment","title":"Installing Ingress {#t_ingress_install .task}"},{"location":"admin/t_ingress_install.html#t_ingress_install","text":"When running Kubernetes on-prem, managing load-balancing must be considered for Sametime Meetings and Web Chat. Both of these Sametime features require the addition of an ingress controller. Ingress is secured with a SSL certificate which must be created. Create a secret for ingress by following the steps in Updating the TLS certificates on Kubernetes . If different the host names for Web Chat and Meetings are different, open the values.yaml file and add the following line to identify the Web Chat host name. extraChatHostname: web\\_chat\\_hostname Verify that there are two spaces at the beginning of the line. Save and close the values.yaml file. There are many different ingress controllers available, however; not all of them have been tested with Sametime. The procedure in this topic describes deploying the NGINX Ingress controller. If you are using another ingress controller, refer to the documentation for that ingress controller. An Ingress controller is also used for the Connect and Embedded clients mux traffic deployed on-premise Kubernetes. After installing the ingress controller, additional configuraiton steps are needed. See Configuring Ingress for Mux for details. Helm commands are used to install and configure the NGINX Ingress controller. Add the nginx repository using the helm repo command. helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx Update the repository with the following command. helm repo update Run the following command to install NGINX. helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.service.loadBalancerIP=IP\\_address Where IP_address is the reserved IP address. If you have a namespace dedicated to Sametime, include the namespace option on the command. Verify that nginx-ingress has accepted the correct static IP address by running the kubectl get command. Includes the -w parameter. To break free from this, use Ctrl+C. kubectl get services -o wide -w nginx-ingress-ingress-nginx-controller Use Contl+C to return to the command prompt. Configuring Ingress for Mux Parent topic: Installing Sametime in a Kubernetes environment","title":"Installing Ingress"},{"location":"admin/t_installing_deploy_st_kubernetes.html","text":"Deploying Sametime to Kubernetes cluster This section provides information to deploy Sametime to the Kubernetes cluster. Deploy the helm chart. helm install sametime . Note: The command assumes you are in the helm directory. The . represents current directory. Instead of sametime you can choose any descriptive name for the deployment. You can also deploy the application in a namespace through the -n or --namespace option. First create the namespace via kubectl create namespace . If there are any errors, you must remove the installed product and fix the error before trying the installation again. To uninstall the product, run the following commands: # helm uninstall sametime # kubectl delete job sametime # kubectl delete clusterrolebinding sametime # kubectl delete clusterrole sametime # kubectl delete serviceaccount sametime Sametime Meetings uses websockets for audio and video streams. If your network does not allow for, you might encounter issues when joining Meetings. For more information on how to diagnose if websockets are blocked, see Sametime Meeting fails to load if WebSockets are blocked . See Verify the service . Parent topic: Installing Sametime in a Kubernetes environment","title":"Deploying Sametime to Kubernetes cluster {#t_installing_deploy_st_kubernetes .task}"},{"location":"admin/t_installing_deploy_st_kubernetes.html#t_installing_deploy_st_kubernetes","text":"This section provides information to deploy Sametime to the Kubernetes cluster. Deploy the helm chart. helm install sametime . Note: The command assumes you are in the helm directory. The . represents current directory. Instead of sametime you can choose any descriptive name for the deployment. You can also deploy the application in a namespace through the -n or --namespace option. First create the namespace via kubectl create namespace . If there are any errors, you must remove the installed product and fix the error before trying the installation again. To uninstall the product, run the following commands: # helm uninstall sametime # kubectl delete job sametime # kubectl delete clusterrolebinding sametime # kubectl delete clusterrole sametime # kubectl delete serviceaccount sametime Sametime Meetings uses websockets for audio and video streams. If your network does not allow for, you might encounter issues when joining Meetings. For more information on how to diagnose if websockets are blocked, see Sametime Meeting fails to load if WebSockets are blocked . See Verify the service . Parent topic: Installing Sametime in a Kubernetes environment","title":"Deploying Sametime to Kubernetes cluster"},{"location":"admin/t_installing_docker_extrahosts.html","text":"Defining extra hosts for Docker deployments Extra hosts for Docker deployments can be defined when there are network or DNS issues. Defining extra hosts is optional and not a requirement to ensure the connections are successful. In some cases on CentOS 8, the host names fail to resolve properly. If the DNS is unreliable in resolving host names to IP addresses, these can be defined manually in the configuration. The following steps work for all supported Linux versions. Note: When modifying the yml file, the indentations use spaces to indent the text. Do not use tabs. The entries within the file must line up exactly. Use the networks: placement as a reference for extra_hosts: and the sametime.test: placement as a reference for where the - is placed. Open the docker-compose.yml file in edit mode. The following components require a connection to the MongoDB server. Locate and update each section with the MongoDB host name and IP address. community recordings files click2call location catalog app-registry activity backgrounds lobby After networks add an extra_hosts statement, where mongoDB_host is the fully qualified hostname of the MongoDB server and mongoDB_IP_address is the IP address of the MongoDB server. extra_hosts: - mongoDB\\_host: mongoDB\\_IP\\_address For example: The community component requires a connection to the LDAP server. Locate and update this section with the LDAP host name and IP address. After networks add an extra_hosts statement, where ldap_hostname is the fully qualified host name of the LDAP server and ldap_ip_address is the IP address of the LDAP server. extra_hosts: - ldap.host: ldap\\_ip\\_address For example: The jvb component requires a connection to the STUN servers. In the jvb section, add an extra_hosts section an include a statement for each STUN server, where stun_host_name is the fully qualified host name of the STUN server, and stun_ip_address is the IP address of the STUN server. - stun\\_host\\_name:stun\\_ip\\_address For example: extra_hosts: - stun_host_name:stun_ip_address - stun1_host_name:stun1_ip_address - stun2_host_name:stun2_ip_address Resolve the host names of the STUN servers and use the corresponding IP address for your region. In the following graphic, the Google STUN servers are used with the regional resolved IP addresses. Verify that the formatting is correct. Correct any indentations using spaces. Save the changes. Run the following commands to apply the changes. docker-compose down docker-compose up -d Parent topic: Installing Sametime in a Docker environment","title":"Defining extra hosts for Docker deployments {#t_installing_docker_extrahosts .task}"},{"location":"admin/t_installing_docker_extrahosts.html#t_installing_docker_extrahosts","text":"Extra hosts for Docker deployments can be defined when there are network or DNS issues. Defining extra hosts is optional and not a requirement to ensure the connections are successful. In some cases on CentOS 8, the host names fail to resolve properly. If the DNS is unreliable in resolving host names to IP addresses, these can be defined manually in the configuration. The following steps work for all supported Linux versions. Note: When modifying the yml file, the indentations use spaces to indent the text. Do not use tabs. The entries within the file must line up exactly. Use the networks: placement as a reference for extra_hosts: and the sametime.test: placement as a reference for where the - is placed. Open the docker-compose.yml file in edit mode. The following components require a connection to the MongoDB server. Locate and update each section with the MongoDB host name and IP address. community recordings files click2call location catalog app-registry activity backgrounds lobby After networks add an extra_hosts statement, where mongoDB_host is the fully qualified hostname of the MongoDB server and mongoDB_IP_address is the IP address of the MongoDB server. extra_hosts: - mongoDB\\_host: mongoDB\\_IP\\_address For example: The community component requires a connection to the LDAP server. Locate and update this section with the LDAP host name and IP address. After networks add an extra_hosts statement, where ldap_hostname is the fully qualified host name of the LDAP server and ldap_ip_address is the IP address of the LDAP server. extra_hosts: - ldap.host: ldap\\_ip\\_address For example: The jvb component requires a connection to the STUN servers. In the jvb section, add an extra_hosts section an include a statement for each STUN server, where stun_host_name is the fully qualified host name of the STUN server, and stun_ip_address is the IP address of the STUN server. - stun\\_host\\_name:stun\\_ip\\_address For example: extra_hosts: - stun_host_name:stun_ip_address - stun1_host_name:stun1_ip_address - stun2_host_name:stun2_ip_address Resolve the host names of the STUN servers and use the corresponding IP address for your region. In the following graphic, the Google STUN servers are used with the regional resolved IP addresses. Verify that the formatting is correct. Correct any indentations using spaces. Save the changes. Run the following commands to apply the changes. docker-compose down docker-compose up -d Parent topic: Installing Sametime in a Docker environment","title":"Defining extra hosts for Docker deployments"},{"location":"admin/t_kubernetes_manage_meeting_policies.html","text":"Managing policies on Kubernetes As administrators, you define what end-users can do on a cluster to comply with organization requirements. This section outlines the steps on how to manage policies in a Kubernetes environment. You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. You can manage your policies on Kubernetes by modifying copies of policies.users.xml and policies.servers.xml files and adding an overrideCommunityPolicy parameter to values.yaml . To manage your policies on Kubernetes, follow these steps: Copy the following extra community policy files out of the container to a local directory. kubectl exec -it <podID> --container community -- cat /local/notesdata/policies.user.xml > ./policies.user.xml kubectl exec -it <podID> --container community -- cat /local/notesdata/policies.server.xml > ./policies.server.xml Note: Both files are needed even if you are updating only one file. To find and identify the <podID>, run the command: kubectl get po Create a directory to store the extra community policy files. Move the copied files to the new directory. In the example below, the directory is called extra-community-policy . extra-community-policy Switch to the extra-community-policy directory. Edit the policy files and save the changes. Create the extra-community-policy ConfigMap from the directory with the policy files with the command: kubectl create configmap extra-community-policy --from-file=/. Edit values.yaml and add: overrideCommunityPolicy: extra-community-policy Run the command: helm upgrade <sametime_deployment> Scale the community pod. kubectl scale deploy community --replicas=0 kubectl scale deploy community --replicas=1 Parent topic: Configuring policies Updating configuration values This procedure assumes that you have previously made adjustments to your policies, following the detailed steps above. Delete the ConfigMap extra-community-policy: kubectl delete cm extra-community-policy Locate and edit the policies as necessary. Create the extra-community-policy ConfigMap: kubectl create configmap extra-community-policy --from-file=./ Scale the community pod. kubectl scale deploy community --replicas=0 kubectl scale deploy community --replicas=1","title":"Managing policies on Kubernetes {#t_kubernetes_manage_meeting_policies .task}"},{"location":"admin/t_kubernetes_manage_meeting_policies.html#t_kubernetes_manage_meeting_policies","text":"As administrators, you define what end-users can do on a cluster to comply with organization requirements. This section outlines the steps on how to manage policies in a Kubernetes environment. You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. You can manage your policies on Kubernetes by modifying copies of policies.users.xml and policies.servers.xml files and adding an overrideCommunityPolicy parameter to values.yaml . To manage your policies on Kubernetes, follow these steps: Copy the following extra community policy files out of the container to a local directory. kubectl exec -it <podID> --container community -- cat /local/notesdata/policies.user.xml > ./policies.user.xml kubectl exec -it <podID> --container community -- cat /local/notesdata/policies.server.xml > ./policies.server.xml Note: Both files are needed even if you are updating only one file. To find and identify the <podID>, run the command: kubectl get po Create a directory to store the extra community policy files. Move the copied files to the new directory. In the example below, the directory is called extra-community-policy . extra-community-policy Switch to the extra-community-policy directory. Edit the policy files and save the changes. Create the extra-community-policy ConfigMap from the directory with the policy files with the command: kubectl create configmap extra-community-policy --from-file=/. Edit values.yaml and add: overrideCommunityPolicy: extra-community-policy Run the command: helm upgrade <sametime_deployment> Scale the community pod. kubectl scale deploy community --replicas=0 kubectl scale deploy community --replicas=1 Parent topic: Configuring policies","title":"Managing policies on Kubernetes"},{"location":"admin/t_kubernetes_manage_meeting_policies.html#task_sdb_4zc_qtb","text":"This procedure assumes that you have previously made adjustments to your policies, following the detailed steps above. Delete the ConfigMap extra-community-policy: kubectl delete cm extra-community-policy Locate and edit the policies as necessary. Create the extra-community-policy ConfigMap: kubectl create configmap extra-community-policy --from-file=./ Scale the community pod. kubectl scale deploy community --replicas=0 kubectl scale deploy community --replicas=1","title":"Updating configuration values"},{"location":"admin/t_ldap_change.html","text":"Converting user information from Domino Directory format to LDAP format Stop the Sametime server prior to running the Sametime database utility. Refer to Starting and stopping the Sametime server for the steps. This task changes all contact list information from Domino Directory format to LDAP format. Changing all contact list information from Domino directory format to LDAP format converts forward slashes in the hierarchical name to commas. Attention: This task can be performed only once because you can only convert the directory format one time. Using a text editor, create a CSV file for only one type of change. You cannot mix name change types in the same CSV. Follow the syntax in the example below. The file must be saved in UTF-8 format. LDAP Copy the CSV file into an accessible read or writable location. Edit the .env file used to contain the environment variables. Follow the syntax below. MONGO_CONNECTION_URL=mongodb://sametimeUser:xxxxxxxx@192.168.1.1:27017/admin?authSource=admin&authMechanism=SCRAM-SHA-256&readPreference=primary&directConnection=true&ssl=false USER_ID_CSV=/data/test_id.csv Run the command below manually on a stand-alone community server or on a server in a cluster which replicates the change throughout the cluster. The CSV file is mounted in the container for the application to access and process. docker run -v <path-to-data-directory>:<path-to-data-directory>:rw --env-file default.env hclcr.io/st/sametime-db-utility Verify if the changes have been applied. For more information, refer to Sametime DB Utility reporting . Parent topic: Updating Sametime data in MongoDB","title":"Converting user information from Domino Directory format to LDAP format {#t_ldap_change .task}"},{"location":"admin/t_ldap_change.html#t_ldap_change","text":"Stop the Sametime server prior to running the Sametime database utility. Refer to Starting and stopping the Sametime server for the steps. This task changes all contact list information from Domino Directory format to LDAP format. Changing all contact list information from Domino directory format to LDAP format converts forward slashes in the hierarchical name to commas. Attention: This task can be performed only once because you can only convert the directory format one time. Using a text editor, create a CSV file for only one type of change. You cannot mix name change types in the same CSV. Follow the syntax in the example below. The file must be saved in UTF-8 format. LDAP Copy the CSV file into an accessible read or writable location. Edit the .env file used to contain the environment variables. Follow the syntax below. MONGO_CONNECTION_URL=mongodb://sametimeUser:xxxxxxxx@192.168.1.1:27017/admin?authSource=admin&authMechanism=SCRAM-SHA-256&readPreference=primary&directConnection=true&ssl=false USER_ID_CSV=/data/test_id.csv Run the command below manually on a stand-alone community server or on a server in a cluster which replicates the change throughout the cluster. The CSV file is mounted in the container for the application to access and process. docker run -v <path-to-data-directory>:<path-to-data-directory>:rw --env-file default.env hclcr.io/st/sametime-db-utility Verify if the changes have been applied. For more information, refer to Sametime DB Utility reporting . Parent topic: Updating Sametime data in MongoDB","title":"Converting user information from Domino Directory format to LDAP format"},{"location":"admin/t_logging_tracing.html","text":"Logging and tracing on the Sametime Embedded and Connect Client You can provide these instructions to Sametime Embedded and Connect Client users to enable tracing on their clients. Trace logs are stored in a workspace folder on the user's local hard drive or a network drive. Locate the client workspace. On the computer where you use the client, use a text editor and open the rcpinstall.properties file which is located in the following directory according to the client: Windows Sametime Connect Client C:\\Users\\user_name\\AppData\\Roaming\\HCL\\Sametime\\.config\\rcpinstall.properties Sametime Embedded Client (single user install path) C:\\Program Files\\HCL\\Notes\\Data\\workspace\\.config\\rcpinstall.properties Sametime Embedded Client (multi user install path) C:\\users\\user_name\\AppData\\Local\\HCL\\Notes\\Data\\workspace\\.config\\rcpinstall.properties Mac OS (use keyboard combination \"Cmd+Shift+Dot\" to show hidden folders) Sametime Connect Client /Users/user_name/Library/Application Support/HCL Sametime Data/.config/rcpinstall.properties Sametime Embedded Client /Users/user_name/Library/Application Support/HCL Notes Data/Expeditor/Applications/.config/rcpinstall.properties Sametime Embedded Client (multi user install path) C:\\users\\user_name\\AppData\\Local\\HCL\\Notes\\Data\\workspace\\.config\\rcpinstall.properties Add the following lines to the end of the file, depending on what kind of issue you're diagnosing. General client issues: com.ibm.collaboration.realtime.level=FINE Instant messaging issues: com.lotus.sametime.community.kernel.level=FINER com.lotus.sametime.im.level=FINEST com.lotus.sametime.places.level=FINEST com.ibm.collaboration.realtime.rtcadapter.level=FINEST com.ibm.collaboration.realtime.people.internal.level=FINE com.ibm.collaboration.realtime.internal.sametime.level=FINER com.ibm.collaboration.realtime.login.level=FINEST com.ibm.collaboration.realtime.community.internal.level=FINEST Login issues: General login failures: com.ibm.collaboration.realtime.community.internal.level=FINEST com.ibm.collaboration.realtime.im.community.level=FINEST org.apache.commons.httpclient.level=FINE com.ibm.rcp.internal.security.auth.module.level=FINEST com.ibm.collaboration.realtime.login.level=FINEST com.lotus.sametime.community.level=FINEST SSO failures: com.ibm.collaboration.realtime.community.internal.level=FINEST com.ibm.collaboration.realtime.im.community.level=FINEST org.apache.commons.httpclient.level=FINE com.ibm.rcp.internal.security.auth.module.level=FINEST com.ibm.collaboration.realtime.login.level=FINEST com.lotus.sametime.community.level=FINEST com.ibm.rcp.internal.security.level=FINEST com.ibm.rcp.security.level=FINEST Managed settings: com.ibm.collaboration.realtime.policy.sametime.managedsettings.level=FINEST Calendar integration issues: com.ibm.rtc.meetings.servers.level=FINEST com.ibm.rtc.meetings.shelf.level=FINEST com.ibm.rtc.meetings.shelf.ui.level=FINEST com.ibm.rtc.meetings.util.level=FINEST com.ibm.collaboration.realtime.calendar.level=FINER com.ibm.collaboration.realtime.calendar.notes.level=FINEST Connectivity issues: com.ibm.rtccore.level=FINEST com.ibm.rtc.spaces.level=FINER (Optional) Prevent more of the log and trace files from being overwritten by increasing the values of the following settings from the default to a larger number: com.ibm.rcp.core.internal.logger.boot.RCPTraceHandler.count=20 com.ibm.rcp.core.internal.logger.boot.RCPLogHandler.count=12 The default settings save 12 trace files and 6 log files (Connect client) or 10 trace files and 6 log files (Embedded client). In this example, we are saving 20 trace files and 12 log files for the Connect client. Save and close the file. Restart your Connect Client. View the error log and trace files in the Connect Client, by clicking Help > Support > View Log and View Trace . In most cases, View Trace provides the most useful information. Optional: You can collect logs and other data into a zip file and provide it to someone else for diagnostics. In the Notes embedded client, click Help > Support > Collect Support Data . In the stand-alone Connect Client, click gear icon > Help > Support > Collect Support Data . Select Enable Customized Tracing , and then click Next . Select one or more Sametime options, and then click Next . Specify if you want to reproduce the issue, and then click Collect . When the collection completes, a link to the collection zip file is provided. The resulting file will be located Windows Standalone Client C:\\Users\\user_name\\AppData\\Roaming\\HCL\\Sametime\\autopd Notes Embedded single user path C:\\Program Files\\HCL\\Notes\\Data\\workspace\\autopd Notes Embedded multi user path C:\\users\\user_name\\AppData\\Local\\HCL\\Notes\\Data\\workspace\\.autopd Mac OS Standalone Client /Users/user_name/Library/Application Support/HCL Sametime Data/autopd Notes Embedded /Users/user_name/Library/Application Support/HCL Notes Data/Expeditor/Applications/autopd Parent topic: Troubleshooting Sametime clients","title":"Logging and tracing on the Sametime Embedded and Connect Client {#t_logging_tracing .task}"},{"location":"admin/t_logging_tracing.html#t_logging_tracing","text":"You can provide these instructions to Sametime Embedded and Connect Client users to enable tracing on their clients. Trace logs are stored in a workspace folder on the user's local hard drive or a network drive. Locate the client workspace. On the computer where you use the client, use a text editor and open the rcpinstall.properties file which is located in the following directory according to the client: Windows Sametime Connect Client C:\\Users\\user_name\\AppData\\Roaming\\HCL\\Sametime\\.config\\rcpinstall.properties Sametime Embedded Client (single user install path) C:\\Program Files\\HCL\\Notes\\Data\\workspace\\.config\\rcpinstall.properties Sametime Embedded Client (multi user install path) C:\\users\\user_name\\AppData\\Local\\HCL\\Notes\\Data\\workspace\\.config\\rcpinstall.properties Mac OS (use keyboard combination \"Cmd+Shift+Dot\" to show hidden folders) Sametime Connect Client /Users/user_name/Library/Application Support/HCL Sametime Data/.config/rcpinstall.properties Sametime Embedded Client /Users/user_name/Library/Application Support/HCL Notes Data/Expeditor/Applications/.config/rcpinstall.properties Sametime Embedded Client (multi user install path) C:\\users\\user_name\\AppData\\Local\\HCL\\Notes\\Data\\workspace\\.config\\rcpinstall.properties Add the following lines to the end of the file, depending on what kind of issue you're diagnosing. General client issues: com.ibm.collaboration.realtime.level=FINE Instant messaging issues: com.lotus.sametime.community.kernel.level=FINER com.lotus.sametime.im.level=FINEST com.lotus.sametime.places.level=FINEST com.ibm.collaboration.realtime.rtcadapter.level=FINEST com.ibm.collaboration.realtime.people.internal.level=FINE com.ibm.collaboration.realtime.internal.sametime.level=FINER com.ibm.collaboration.realtime.login.level=FINEST com.ibm.collaboration.realtime.community.internal.level=FINEST Login issues: General login failures: com.ibm.collaboration.realtime.community.internal.level=FINEST com.ibm.collaboration.realtime.im.community.level=FINEST org.apache.commons.httpclient.level=FINE com.ibm.rcp.internal.security.auth.module.level=FINEST com.ibm.collaboration.realtime.login.level=FINEST com.lotus.sametime.community.level=FINEST SSO failures: com.ibm.collaboration.realtime.community.internal.level=FINEST com.ibm.collaboration.realtime.im.community.level=FINEST org.apache.commons.httpclient.level=FINE com.ibm.rcp.internal.security.auth.module.level=FINEST com.ibm.collaboration.realtime.login.level=FINEST com.lotus.sametime.community.level=FINEST com.ibm.rcp.internal.security.level=FINEST com.ibm.rcp.security.level=FINEST Managed settings: com.ibm.collaboration.realtime.policy.sametime.managedsettings.level=FINEST Calendar integration issues: com.ibm.rtc.meetings.servers.level=FINEST com.ibm.rtc.meetings.shelf.level=FINEST com.ibm.rtc.meetings.shelf.ui.level=FINEST com.ibm.rtc.meetings.util.level=FINEST com.ibm.collaboration.realtime.calendar.level=FINER com.ibm.collaboration.realtime.calendar.notes.level=FINEST Connectivity issues: com.ibm.rtccore.level=FINEST com.ibm.rtc.spaces.level=FINER (Optional) Prevent more of the log and trace files from being overwritten by increasing the values of the following settings from the default to a larger number: com.ibm.rcp.core.internal.logger.boot.RCPTraceHandler.count=20 com.ibm.rcp.core.internal.logger.boot.RCPLogHandler.count=12 The default settings save 12 trace files and 6 log files (Connect client) or 10 trace files and 6 log files (Embedded client). In this example, we are saving 20 trace files and 12 log files for the Connect client. Save and close the file. Restart your Connect Client. View the error log and trace files in the Connect Client, by clicking Help > Support > View Log and View Trace . In most cases, View Trace provides the most useful information. Optional: You can collect logs and other data into a zip file and provide it to someone else for diagnostics. In the Notes embedded client, click Help > Support > Collect Support Data . In the stand-alone Connect Client, click gear icon > Help > Support > Collect Support Data . Select Enable Customized Tracing , and then click Next . Select one or more Sametime options, and then click Next . Specify if you want to reproduce the issue, and then click Collect . When the collection completes, a link to the collection zip file is provided. The resulting file will be located Windows Standalone Client C:\\Users\\user_name\\AppData\\Roaming\\HCL\\Sametime\\autopd Notes Embedded single user path C:\\Program Files\\HCL\\Notes\\Data\\workspace\\autopd Notes Embedded multi user path C:\\users\\user_name\\AppData\\Local\\HCL\\Notes\\Data\\workspace\\.autopd Mac OS Standalone Client /Users/user_name/Library/Application Support/HCL Sametime Data/autopd Notes Embedded /Users/user_name/Library/Application Support/HCL Notes Data/Expeditor/Applications/autopd Parent topic: Troubleshooting Sametime clients","title":"Logging and tracing on the Sametime Embedded and Connect Client"},{"location":"admin/t_managing_transfer_data.html","text":"Managing file transfer data As with meeting recordings and reports, files that are shared in the chat are stored in a Docker volume or a Kubernetes persistent volume. By default, you can download these files within 90 days . You can modify the limit by updating the following files. Docker custom.env Kubernetes helm/values.yaml Note: The values are case sensitive and must be entered as shown below. Modify the configuration file. The minimum value is 1. For Docker environments, update the FILES_EXPIRE_IN_DAYS parameter. For example, FILES_EXPIRE_IN_DAYS=77 to indicate 77 days. For Kubernetes environments, update the filesExpireInDays parameter. For example, filesExpireInDays: 77 to indicate 77 days. Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Administering","title":"Managing file transfer data {#t_managing_transfer_data .task}"},{"location":"admin/t_managing_transfer_data.html#t_managing_transfer_data","text":"As with meeting recordings and reports, files that are shared in the chat are stored in a Docker volume or a Kubernetes persistent volume. By default, you can download these files within 90 days . You can modify the limit by updating the following files. Docker custom.env Kubernetes helm/values.yaml Note: The values are case sensitive and must be entered as shown below. Modify the configuration file. The minimum value is 1. For Docker environments, update the FILES_EXPIRE_IN_DAYS parameter. For example, FILES_EXPIRE_IN_DAYS=77 to indicate 77 days. For Kubernetes environments, update the filesExpireInDays parameter. For example, filesExpireInDays: 77 to indicate 77 days. Restart the Sametime server to apply the changes. For more information, refer to Starting and stopping servers . Parent topic: Administering","title":"Managing file transfer data"},{"location":"admin/t_meetings_configure_deployment.html","text":"Preparing the deployment This section provides information to configure secrets for deployment. Run the following script to prepare the deployment. ./prepareDeployment.sh LDAP server host : Enter the fully qualified host name or the IP address of the LDAP server. LDAP server port : Enter the port used by LDAP. Configure advanced LDAP settings : - Enter Y to configure advanced LDAP settings. Provide the following information. - LDAP bind user name - LDAP bind password - LDAP base DN for searching users - LDAP base DN for searching groups - Enter N to bypass the above prompts. This option results in an anonymous LDAP connection and sets the default settings for searching. Sametime server name : Enter the fully qualified Sametime server name. This value needs to be the fully qualified host name of the Sametime server. If you are separating host names for meeting and chat, enter the meeting host name. Server domain name : Enter the server domain name. This should be the DNS suffix of the host name of the server. Video bridge IP address : Enter the video bridge IP address. When left empty, the system automatically scans and automatically populates the field with the discovered IP address. Base64 encoded secret : Enter the Base64 encoded JWT_SECRET from the Sametime deployment. If migrating from another version of Sametime, you can re-use your existing secret. Otherwise, leave blank and press Enter to generate a new one. Mongo host : Enter the fully qualified host name of your MongoDB server. The default value is mongo. If you have more than one host, provide any of the hosts. You can provide the rest later on when prompted. Mongo port : Enter the MongoDB port. The default value is 27017. Mongo admin user name : Enter the Mongo administrator user name. Mongo admin user password : Enter the Mongo administrator password MongoDB connection URL : The default Mongo connection URL is [($TEMP_URL)] . Would you like to override? [Y/N] : - Enter Y if you have a MongoDB cluster with more than one host name. This allows you to enter your own MongoDB URL that includes the 3 host names. mongodb://<user>:<password>@<server1>:<port>,<server2>:<port>,<server3>:<port> Enter N to use the default value. TURN server address : Leave blank if you are not using TURN. Otherwise, enter the fully qualified host name of the TURN server. For more information, refer to Configuring the TURN Server for Docker and Configuring the TURN server for Kubernetes . Configure LTPA : Lightweight Third-Party Authentication (LTPA) is useful for achieving single sign-on with HCL Domino (including HCL Verse and iNotes), HCL Connections, HCL Digital Experience, and IBM WebSphere Application Server. The default value is N : To configure LTPA, enter Y and provide the following information: - The full path to the LTPA keys file. This should be the full path on the machine where the `prepareDeployment.sh` script is running. For example: /tmp/ltpa.keys. - LTPA keys password : For more information, refer to Setting up SSO using LTPA . Enable Octo : Octo allows you to extend the audio-video traffic to another network in an efficient way. If enabled, at least one other secondary cluster must be configured in order for this to work. To enable octo, enter Y. The following prompts are displayed. For more information, refer to Enabling multiple videobridges . - Is this a primary installation? - Select **Yes** to set this instance as the primary server. For primary servers, you must provide the region name. Enter the name of the primary region. - Select **No** to set this instance as a regional server. For regional servers, you must provide the region name. Enter the secondary region name. - If no, you must enter the fully qualified host name of your primary installation. Provide the following information. - Prosody host from primary installation - Meeting location secret in base64 from primary installation - JVB authentication password in base64 from primary installation **Note:** On your primary cluster, run this script to obtain the values for the meeting location secret and JVB authentication password. ``` {#codeblock_pdy_r1l_z5b} kubectl get secret sametime-global-secrets -o yaml | grep -E 'MeetingLocationSecret|JvbAuthPassword' ``` Change directories to helm. Open values.yaml for editing. Locate the setting hclImageRegistry: and then set the value to your image repository name. If you are using a secret to access the image repository, then set the hclImagePullSecret value with the name of the secret for the image repository. This is the Docker repository where the Sametime Docker images are located. If you use a cloud provider image registry or your own private registry, you should update this setting to the base name of that image registry. The default is http://hclcr.io/st and assumes that you have executed the ./load.sh script with its default configuration on each Kubernetes node. Locate the setting sametimeClaim . This is the name of the persistent storage volume claim that is used by recordings, proxy, files, and backgrounds for storage. You can also modify other values at this time to enable, disable, or configure features. Save and close values.yaml. Parent topic: Installing Sametime in a Kubernetes environment","title":"Preparing the deployment {#t_meetings_configure_deployment .task}"},{"location":"admin/t_meetings_configure_deployment.html#t_meetings_configure_deployment","text":"This section provides information to configure secrets for deployment. Run the following script to prepare the deployment. ./prepareDeployment.sh LDAP server host : Enter the fully qualified host name or the IP address of the LDAP server. LDAP server port : Enter the port used by LDAP. Configure advanced LDAP settings : - Enter Y to configure advanced LDAP settings. Provide the following information. - LDAP bind user name - LDAP bind password - LDAP base DN for searching users - LDAP base DN for searching groups - Enter N to bypass the above prompts. This option results in an anonymous LDAP connection and sets the default settings for searching. Sametime server name : Enter the fully qualified Sametime server name. This value needs to be the fully qualified host name of the Sametime server. If you are separating host names for meeting and chat, enter the meeting host name. Server domain name : Enter the server domain name. This should be the DNS suffix of the host name of the server. Video bridge IP address : Enter the video bridge IP address. When left empty, the system automatically scans and automatically populates the field with the discovered IP address. Base64 encoded secret : Enter the Base64 encoded JWT_SECRET from the Sametime deployment. If migrating from another version of Sametime, you can re-use your existing secret. Otherwise, leave blank and press Enter to generate a new one. Mongo host : Enter the fully qualified host name of your MongoDB server. The default value is mongo. If you have more than one host, provide any of the hosts. You can provide the rest later on when prompted. Mongo port : Enter the MongoDB port. The default value is 27017. Mongo admin user name : Enter the Mongo administrator user name. Mongo admin user password : Enter the Mongo administrator password MongoDB connection URL : The default Mongo connection URL is [($TEMP_URL)] . Would you like to override? [Y/N] : - Enter Y if you have a MongoDB cluster with more than one host name. This allows you to enter your own MongoDB URL that includes the 3 host names. mongodb://<user>:<password>@<server1>:<port>,<server2>:<port>,<server3>:<port> Enter N to use the default value. TURN server address : Leave blank if you are not using TURN. Otherwise, enter the fully qualified host name of the TURN server. For more information, refer to Configuring the TURN Server for Docker and Configuring the TURN server for Kubernetes . Configure LTPA : Lightweight Third-Party Authentication (LTPA) is useful for achieving single sign-on with HCL Domino (including HCL Verse and iNotes), HCL Connections, HCL Digital Experience, and IBM WebSphere Application Server. The default value is N : To configure LTPA, enter Y and provide the following information: - The full path to the LTPA keys file. This should be the full path on the machine where the `prepareDeployment.sh` script is running. For example: /tmp/ltpa.keys. - LTPA keys password : For more information, refer to Setting up SSO using LTPA . Enable Octo : Octo allows you to extend the audio-video traffic to another network in an efficient way. If enabled, at least one other secondary cluster must be configured in order for this to work. To enable octo, enter Y. The following prompts are displayed. For more information, refer to Enabling multiple videobridges . - Is this a primary installation? - Select **Yes** to set this instance as the primary server. For primary servers, you must provide the region name. Enter the name of the primary region. - Select **No** to set this instance as a regional server. For regional servers, you must provide the region name. Enter the secondary region name. - If no, you must enter the fully qualified host name of your primary installation. Provide the following information. - Prosody host from primary installation - Meeting location secret in base64 from primary installation - JVB authentication password in base64 from primary installation **Note:** On your primary cluster, run this script to obtain the values for the meeting location secret and JVB authentication password. ``` {#codeblock_pdy_r1l_z5b} kubectl get secret sametime-global-secrets -o yaml | grep -E 'MeetingLocationSecret|JvbAuthPassword' ``` Change directories to helm. Open values.yaml for editing. Locate the setting hclImageRegistry: and then set the value to your image repository name. If you are using a secret to access the image repository, then set the hclImagePullSecret value with the name of the secret for the image repository. This is the Docker repository where the Sametime Docker images are located. If you use a cloud provider image registry or your own private registry, you should update this setting to the base name of that image registry. The default is http://hclcr.io/st and assumes that you have executed the ./load.sh script with its default configuration on each Kubernetes node. Locate the setting sametimeClaim . This is the name of the persistent storage volume claim that is used by recordings, proxy, files, and backgrounds for storage. You can also modify other values at this time to enable, disable, or configure features. Save and close values.yaml. Parent topic: Installing Sametime in a Kubernetes environment","title":"Preparing the deployment"},{"location":"admin/t_meetings_kubernetes.html","text":"Configuring host aliases for Kubernetes deployments If your Kubernetes environment is unable to consistently resolve the host names of the supporting servers (MongoDB, Sametime Proxy, STUN) using DNS, configure the hosts manually. In Kubernetes, you can add host names and their corresponding IP addresses to the host aliases. In a Sametime Meetings on Kubernetes deployment, this setting is defined in the deployment.yaml in the various templates for each Kubernetes pod. Table 1 lists the pod name and template for each host to be resolved. Modify each template specified in Table 1 to include the host name and IP address of the required supporting server. Complete the following steps to modify each template in the table to include the host name and IP address of each supporting server. Note: When modifying yaml files, do not use the tab key for indentation, when using indentation use two spaces for each indentation. This process should be completed for all templates involved. There should be no extra blank lines in the template. Procedure Hostname to resolve Pod Template name MongoDB community helm/charts/community/templates/pod.yaml MongoDB proxy helm/charts/proxy/templates/deployment.yaml MongoDB catalog helm/charts/catalog/templates/deployment.yaml LDAP community helm/charts/catalog/templates/deployment.yaml STUN server video helm/charts/video/templates/deployment.yaml Recording repository and Sametime server recordings helm/charts/recordings/templates/deployment.yaml Open the template using a text editor and place into edit mode. Locate the line restartPolicy=Always and insert a new line. Use the below example text as a template and include the host names that need to be resolved: hostAliases: - hostnames: - \"ldap.company.com\" ip: \"10.10.10.10\" - hostnames: - \"mongodb.company.com\" ip: \"10.10.10.11\" Note: In the hostnames field your server might only be known as one host name, you can add multiple aliases if desired. Before saving the template, ensure the indentations are correct, using only spaces for indentation. The hostAliases: line should line up exactly under the restartPolicy line at the same level of indentation. You may need to correct the other lines as well after copy and pasting them. Save and close the template when changes are complete. After this process is complete continue to the steps to install Sametime, see Loading the Sametime image to Docker . If Sametime is already installed, follow the procedures in the Applying configuration changes in Kubernetes topic to apply the changes. Parent topic: Preparing the network","title":"Configuring host aliases for Kubernetes deployments"},{"location":"admin/t_meetings_kubernetes.html#t_meetings_kubernetes","text":"If your Kubernetes environment is unable to consistently resolve the host names of the supporting servers (MongoDB, Sametime Proxy, STUN) using DNS, configure the hosts manually. In Kubernetes, you can add host names and their corresponding IP addresses to the host aliases. In a Sametime Meetings on Kubernetes deployment, this setting is defined in the deployment.yaml in the various templates for each Kubernetes pod. Table 1 lists the pod name and template for each host to be resolved. Modify each template specified in Table 1 to include the host name and IP address of the required supporting server. Complete the following steps to modify each template in the table to include the host name and IP address of each supporting server. Note: When modifying yaml files, do not use the tab key for indentation, when using indentation use two spaces for each indentation. This process should be completed for all templates involved. There should be no extra blank lines in the template. Procedure Hostname to resolve Pod Template name MongoDB community helm/charts/community/templates/pod.yaml MongoDB proxy helm/charts/proxy/templates/deployment.yaml MongoDB catalog helm/charts/catalog/templates/deployment.yaml LDAP community helm/charts/catalog/templates/deployment.yaml STUN server video helm/charts/video/templates/deployment.yaml Recording repository and Sametime server recordings helm/charts/recordings/templates/deployment.yaml Open the template using a text editor and place into edit mode. Locate the line restartPolicy=Always and insert a new line. Use the below example text as a template and include the host names that need to be resolved: hostAliases: - hostnames: - \"ldap.company.com\" ip: \"10.10.10.10\" - hostnames: - \"mongodb.company.com\" ip: \"10.10.10.11\" Note: In the hostnames field your server might only be known as one host name, you can add multiple aliases if desired. Before saving the template, ensure the indentations are correct, using only spaces for indentation. The hostAliases: line should line up exactly under the restartPolicy line at the same level of indentation. You may need to correct the other lines as well after copy and pasting them. Save and close the template when changes are complete. After this process is complete continue to the steps to install Sametime, see Loading the Sametime image to Docker . If Sametime is already installed, follow the procedures in the Applying configuration changes in Kubernetes topic to apply the changes. Parent topic: Preparing the network","title":"Configuring host aliases for Kubernetes deployments"},{"location":"admin/t_meetings_prepare_network.html","text":"Preparing the network This section provides information on the network considerations needed to install Kubernetes. Network considerations Sametime Meetings uses UDP on port 30000 by default for media streams. Ensure that the clients you will service have UDP inbound access to this port and that outbound UDP traffic from the deployment is unrestricted. The Sametime Meeting server must be able to connect to MongoDB with a user account which has the authority to create databases. The database will be created during the installation. The Sametime Meeting server must be able to reach the Sametime server on the port used to service users (typically port 443). The meeting server requires the Sametime server to use a third-party certificate. STUN Service Sametime Meetings use internet accessible STUN servers to help clients and the server negotiate media paths for the exchange of audio/video/appshare data. Public Google STUN servers are configured by default. These addresses must be reachable by the container. If they are not, there may be issues joining meetings. stun.l.google.com:19302 stun1.l.google.com:19302 stun2.l.google.com:19302 To change the defult STUN server see, Configuring alternate STUN servers . For further information on STUN, see the topic Session Traversal Utilities for NAT (STUN) . Ingress Controller Docker and Kubernetes uses internal private network addresses for the deployed services. Applications may also expose network ports directly on the node as well. Sametime Meetings defines a LoadBalancer service for the HTTP/HTTPS traffic and a NodePort service for the media traffic. To expose these services to the outside world, an ingress controller is required for the HTTP/HTTPS traffic and the IP address of the node must be accessible for the media traffic. DNS Considerations Your Kubernetes cluster must be able to resolve the supporting servers: MongoDB, Sametime Proxy and STUN. If DNS is unreliable or not able to resolve these hostnames to their IP addresses, complete the topic Configuring Host Aliases for Kubernetes deployments .\" See Loading the Sametime image to Docker . Configuring host aliases for Kubernetes deployments If your Kubernetes environment is unable to consistently resolve the host names of the supporting servers (MongoDB, Sametime Proxy, STUN) using DNS, configure the hosts manually. Parent topic: Installing Sametime in a Kubernetes environment","title":"Preparing the network"},{"location":"admin/t_meetings_prepare_network.html#t_meetings_prepare_network","text":"This section provides information on the network considerations needed to install Kubernetes. Network considerations Sametime Meetings uses UDP on port 30000 by default for media streams. Ensure that the clients you will service have UDP inbound access to this port and that outbound UDP traffic from the deployment is unrestricted. The Sametime Meeting server must be able to connect to MongoDB with a user account which has the authority to create databases. The database will be created during the installation. The Sametime Meeting server must be able to reach the Sametime server on the port used to service users (typically port 443). The meeting server requires the Sametime server to use a third-party certificate. STUN Service Sametime Meetings use internet accessible STUN servers to help clients and the server negotiate media paths for the exchange of audio/video/appshare data. Public Google STUN servers are configured by default. These addresses must be reachable by the container. If they are not, there may be issues joining meetings. stun.l.google.com:19302 stun1.l.google.com:19302 stun2.l.google.com:19302 To change the defult STUN server see, Configuring alternate STUN servers . For further information on STUN, see the topic Session Traversal Utilities for NAT (STUN) . Ingress Controller Docker and Kubernetes uses internal private network addresses for the deployed services. Applications may also expose network ports directly on the node as well. Sametime Meetings defines a LoadBalancer service for the HTTP/HTTPS traffic and a NodePort service for the media traffic. To expose these services to the outside world, an ingress controller is required for the HTTP/HTTPS traffic and the IP address of the node must be accessible for the media traffic. DNS Considerations Your Kubernetes cluster must be able to resolve the supporting servers: MongoDB, Sametime Proxy and STUN. If DNS is unreliable or not able to resolve these hostnames to their IP addresses, complete the topic Configuring Host Aliases for Kubernetes deployments .\" See Loading the Sametime image to Docker . Configuring host aliases for Kubernetes deployments If your Kubernetes environment is unable to consistently resolve the host names of the supporting servers (MongoDB, Sametime Proxy, STUN) using DNS, configure the hosts manually. Parent topic: Installing Sametime in a Kubernetes environment","title":"Preparing the network"},{"location":"admin/t_meetings_recordings.html","text":"Creating the persistent volume This section provides information to create the persistent volume. In previous releases of Sametime, only the recordings pod needed to access the persistent volume. In Sametime 12, workloads moved from virtual or physical machines into Kubernetes pods. There are more than one type of pod that requires access to storage in Sametime 12. Sametime requires an access mode called read write many or RWX which allow for more than one node to access the volume at a time. Recordings : Meeting recordings are stored as MP4 files in a temp directory on the meeting recorder nodes during the meeting. After the meeting, the recordings are moved to a persistent volume. Allocate a volume accessible to the Kubernetes cluster that is substantial enough to handle the expected number of meeting recordings assuming a rate of about 100M per 1 hour of meeting. : By default, recordings persist for three days, so keep that in consideration as well when sizing the volume. Backgrounds : When users upload personal backgrounds to their meetings for use as a video background, these images are stored in the persistent volume. Files : When users upload files to chats in the chat clients or meeting, the files are stored in the persistent volume. Branding : When enabling custom meeting branding, the images used are stored in the persistent volume. Reports : Meeting reports are saved in the persistent volume. For additional information, see the Persistent Volumes topic in the Kubernetes documentation. Creating persistent volume for a single node deployment This procedure describes an approach to configuring persistent local node storage for the meeting recordings pod in a Kubernetes environment. Parent topic: Installing Sametime in a Kubernetes environment","title":"Creating the persistent volume {#t_meetings_recordings .concept}"},{"location":"admin/t_meetings_recordings.html#t_meetings_recordings","text":"This section provides information to create the persistent volume. In previous releases of Sametime, only the recordings pod needed to access the persistent volume. In Sametime 12, workloads moved from virtual or physical machines into Kubernetes pods. There are more than one type of pod that requires access to storage in Sametime 12. Sametime requires an access mode called read write many or RWX which allow for more than one node to access the volume at a time. Recordings : Meeting recordings are stored as MP4 files in a temp directory on the meeting recorder nodes during the meeting. After the meeting, the recordings are moved to a persistent volume. Allocate a volume accessible to the Kubernetes cluster that is substantial enough to handle the expected number of meeting recordings assuming a rate of about 100M per 1 hour of meeting. : By default, recordings persist for three days, so keep that in consideration as well when sizing the volume. Backgrounds : When users upload personal backgrounds to their meetings for use as a video background, these images are stored in the persistent volume. Files : When users upload files to chats in the chat clients or meeting, the files are stored in the persistent volume. Branding : When enabling custom meeting branding, the images used are stored in the persistent volume. Reports : Meeting reports are saved in the persistent volume. For additional information, see the Persistent Volumes topic in the Kubernetes documentation. Creating persistent volume for a single node deployment This procedure describes an approach to configuring persistent local node storage for the meeting recordings pod in a Kubernetes environment. Parent topic: Installing Sametime in a Kubernetes environment","title":"Creating the persistent volume"},{"location":"admin/t_meetings_sametime_image_docker.html","text":"Loading the Sametime image to Docker This section provides information on the network considerations needed to install Kubernetes. Download HCL Sametime installation package from the HCL Software Portal. Extract the zip file to any directory on either the master kubernetes host itself or on a machine which has management access to the kubernetes cluster. Change to that directory and load the docker images into your docker registry using the following command: sudo ./load.sh Note: The load script extracts the docker images to the local host by default. When prompted, specify your own Docker registry host FQDN. This can be a cloud provider registry or some other private registry accessible to all of the nodes. If you don't have your own registry, then run the load script on each node in the Kubernetes cluster and use the script defaults. See Preparing the deployment . Parent topic: Installing Sametime in a Kubernetes environment","title":"Loading the Sametime image to Docker {#t_meetings_sametime_image_docker .task}"},{"location":"admin/t_meetings_sametime_image_docker.html#t_meetings_sametime_image_docker","text":"This section provides information on the network considerations needed to install Kubernetes. Download HCL Sametime installation package from the HCL Software Portal. Extract the zip file to any directory on either the master kubernetes host itself or on a machine which has management access to the kubernetes cluster. Change to that directory and load the docker images into your docker registry using the following command: sudo ./load.sh Note: The load script extracts the docker images to the local host by default. When prompted, specify your own Docker registry host FQDN. This can be a cloud provider registry or some other private registry accessible to all of the nodes. If you don't have your own registry, then run the load script on each node in the Kubernetes cluster and use the script defaults. See Preparing the deployment . Parent topic: Installing Sametime in a Kubernetes environment","title":"Loading the Sametime image to Docker"},{"location":"admin/t_meetings_verify.html","text":"Verifying the service This section provides information to verify if you are able to join a meeting, see and hear the other participants. Verify that at least three parties can join a meeting, see, and hear each other. Two-person meetings are optimized to avoid a media path through the server and so don't provide a valid test. To verify the service from one machine: Log in to the meeting from one machine as three seperate users, each in their own browser tab. Unmute any user. If you can hear the user, the service is functioning. Parent topic: Installing Sametime in a Kubernetes environment","title":"Verifying the service {#t_meetings_verify .task}"},{"location":"admin/t_meetings_verify.html#t_meetings_verify","text":"This section provides information to verify if you are able to join a meeting, see and hear the other participants. Verify that at least three parties can join a meeting, see, and hear each other. Two-person meetings are optimized to avoid a media path through the server and so don't provide a valid test. To verify the service from one machine: Log in to the meeting from one machine as three seperate users, each in their own browser tab. Unmute any user. If you can hear the user, the service is functioning. Parent topic: Installing Sametime in a Kubernetes environment","title":"Verifying the service"},{"location":"admin/t_namechange_docker.html","text":"Updating user IDs Stop the Sametime server prior to running the Sametime database utility. Refer to Starting and stopping the Sametime server for the steps. The ID task works by comparing existing user IDs with the names provided in the CSV list, and replacing the IDs when a match is found. By default, comparisons are case sensitive. The ID task allows case-insensitive comparisons of user IDs by adding NC_ID_TASK_CASE_INSENSITIVE=1 to the sametime.ini file. For more information, refer to Managing client types and log-ins . After installing the Sametime Server, you can find the Sametime database utility in the image repository. Any system with access to the image repository and the mongo server can run the utility. Using a text editor, create a CSV file for only one type of change. You cannot mix name change types in the same CSV. Follow the syntax below. The file must be saved in UTF-8 format. ID \"old ID\", \"new ID\"[,\"new display name\"] For example, ID \"Maria Smith,\" \"Maria Smith-Brown\"[,\"Maria Brown\"] Note: The brackets [ ] indicate that the new display name is optional. If you use it, you must precede it with a comma. The new display name must immediately follow the comma. Do not leave a blank space between the comma and the new display name. Copy the CSV file into an accessible read or writable location. Edit the .env file used to contain the environment variables. Follow the syntax below. MONGO_CONNECTION_URL=mongodb://sametimeUser:xxxxxxxx@192.168.1.1:27017/admin?authSource=admin&authMechanism=SCRAM-SHA-256&readPreference=primary&directConnection=true&ssl=false USER_ID_CSV=/data/test_id.csv Run the command below manually on a stand-alone community server or on a server in a cluster which replicates the change throughout the cluster. The CSV file is mounted in the container for the application to access and process. docker run -v <path-to-data-directory>:<path-to-data-directory>:rw --env-file default.env hclcr.io/st/sametime-db-utility Verify if the changes have been applied. For more information, refer to Sametime DB Utility reporting . Below is a sample CSV showing changes from an LDAP directory: ID \"CN=Maria Smith,OU=Sales,O=HCL\", \"CN=Maria Brown,OU=Sales,O=HCL\", \"Maria Brown\" \"CN=John,OU=New York,O=HCL\", \"CN=John,OU=Texas,O=HCL\" \"CN=Old Group,OU=groups,O=HCL\", \"CN=New Group Name,OU=groups,O=HCL\", \"New Group Name\" Parent topic: Updating Sametime data in MongoDB","title":"Updating user IDs {#t_namechange_docker .task}"},{"location":"admin/t_namechange_docker.html#t_namechange_docker","text":"Stop the Sametime server prior to running the Sametime database utility. Refer to Starting and stopping the Sametime server for the steps. The ID task works by comparing existing user IDs with the names provided in the CSV list, and replacing the IDs when a match is found. By default, comparisons are case sensitive. The ID task allows case-insensitive comparisons of user IDs by adding NC_ID_TASK_CASE_INSENSITIVE=1 to the sametime.ini file. For more information, refer to Managing client types and log-ins . After installing the Sametime Server, you can find the Sametime database utility in the image repository. Any system with access to the image repository and the mongo server can run the utility. Using a text editor, create a CSV file for only one type of change. You cannot mix name change types in the same CSV. Follow the syntax below. The file must be saved in UTF-8 format. ID \"old ID\", \"new ID\"[,\"new display name\"] For example, ID \"Maria Smith,\" \"Maria Smith-Brown\"[,\"Maria Brown\"] Note: The brackets [ ] indicate that the new display name is optional. If you use it, you must precede it with a comma. The new display name must immediately follow the comma. Do not leave a blank space between the comma and the new display name. Copy the CSV file into an accessible read or writable location. Edit the .env file used to contain the environment variables. Follow the syntax below. MONGO_CONNECTION_URL=mongodb://sametimeUser:xxxxxxxx@192.168.1.1:27017/admin?authSource=admin&authMechanism=SCRAM-SHA-256&readPreference=primary&directConnection=true&ssl=false USER_ID_CSV=/data/test_id.csv Run the command below manually on a stand-alone community server or on a server in a cluster which replicates the change throughout the cluster. The CSV file is mounted in the container for the application to access and process. docker run -v <path-to-data-directory>:<path-to-data-directory>:rw --env-file default.env hclcr.io/st/sametime-db-utility Verify if the changes have been applied. For more information, refer to Sametime DB Utility reporting . Below is a sample CSV showing changes from an LDAP directory: ID \"CN=Maria Smith,OU=Sales,O=HCL\", \"CN=Maria Brown,OU=Sales,O=HCL\", \"Maria Brown\" \"CN=John,OU=New York,O=HCL\", \"CN=John,OU=Texas,O=HCL\" \"CN=Old Group,OU=groups,O=HCL\", \"CN=New Group Name,OU=groups,O=HCL\", \"New Group Name\" Parent topic: Updating Sametime data in MongoDB","title":"Updating user IDs"},{"location":"admin/t_namechangeutility.html","text":"Updating Sametime data in MongoDB When you update existing contact information in the directory, you must run the Sametime database utility in order to synchronize the information with that of the Community Server databases. Note: You do not need to run the Sametime database utility when adding new users or groups to the Domino or LDAP directory. The Sametime database utility uses a comma-separated value list that you compile to change names, delete names, or convert all names from Domino to Domino LDAP formatted names. When you create a CSV file, include the descriptor that corresponds to the task you are running. CSV files are case-sensitive and sensitive to spaces. You can create multiple CSV files, but each CSV file can include only one descriptor and can complete only one task. Note: The ID task allows case-insensitive comparisons of user IDs by adding NC_ID_TASK_CASE_INSENSITIVE=1 to the sametime.ini file. For more information, refer to Configuring the sametime.ini file . Descriptor Purpose ID Changes specified first names, last names, display names, or group names. LDAP Changes all contact list information from Domino Directory format to LDAP format. For example, a user listed as CN=Maria Smith/OU=Sales/O=HCL changes to CN=Maria Smith,OU=Sales,O=HCL. Note: This task can be performed only once because you can only convert the directory format one time. | |DELETE|Removes specified individual contact names from contact lists and privacy lists. | Updating user IDs Converting user information from Domino Directory format to LDAP format Deleting user IDs Sametime DB Utility reporting Parent topic: MongoDB","title":"Updating Sametime data in MongoDB {#t_namechangeutility .concept}"},{"location":"admin/t_namechangeutility.html#t_namechangeutility","text":"When you update existing contact information in the directory, you must run the Sametime database utility in order to synchronize the information with that of the Community Server databases. Note: You do not need to run the Sametime database utility when adding new users or groups to the Domino or LDAP directory. The Sametime database utility uses a comma-separated value list that you compile to change names, delete names, or convert all names from Domino to Domino LDAP formatted names. When you create a CSV file, include the descriptor that corresponds to the task you are running. CSV files are case-sensitive and sensitive to spaces. You can create multiple CSV files, but each CSV file can include only one descriptor and can complete only one task. Note: The ID task allows case-insensitive comparisons of user IDs by adding NC_ID_TASK_CASE_INSENSITIVE=1 to the sametime.ini file. For more information, refer to Configuring the sametime.ini file . Descriptor Purpose ID Changes specified first names, last names, display names, or group names. LDAP Changes all contact list information from Domino Directory format to LDAP format. For example, a user listed as CN=Maria Smith/OU=Sales/O=HCL changes to CN=Maria Smith,OU=Sales,O=HCL. Note: This task can be performed only once because you can only convert the directory format one time. | |DELETE|Removes specified individual contact names from contact lists and privacy lists. | Updating user IDs Converting user information from Domino Directory format to LDAP format Deleting user IDs Sametime DB Utility reporting Parent topic: MongoDB","title":"Updating Sametime data in MongoDB"},{"location":"admin/t_proxy_docker.html","text":"Configuring Docker to use a proxy server for push messaging When Sametime proxy interacts with mobile devices (phones, pads, watches, and cars), it sends notifications through push networks such as Apple's \"APNS\" and Google's \"FCM.\" To send APNS or FCM messages through a proxy server in Docker, follow these steps: Update the following values in your custom.env file. STCONF_PUSH_PROXY_SERVER\u2014Enter the fully qualified domain name. For example, push-proxy.company.com . Alternatively, you can enter the IP address of the push-proxy. For example, 123.111.222.333 . STCONF_PUSH_PROXY_PORT\u2014Enter the port of the of the push-proxy. For example, 3128 . STCONF_PUSH_PROXY_USER\u2014When necessary, enter the functional ID of the account required to use the push proxy. STCONF_PUSH_PROXY_PASSWORD\u2014When necessary, enter the password of the functional ID for the account required to use the push proxy. Ensure that the syntax for the .env file is followed, as shown in the example below. STCONF\\_PUSH\\_PROXY\\_SERVER=\"push-proxy.company.com\" STCONF\\_PUSH\\_PROXY\\_PORT=\"3128\" STCONF_PUSH_PROXY_USER=\"\" `STCONF_PUSH_PROXY_PASSWORD`=\"\" Run docker-compose up -d command to apply all changes. Parent topic: Push messaging through a proxy","title":"Configuring Docker to use a proxy server for push messaging {#t_proxy_Safelinx .task}"},{"location":"admin/t_proxy_docker.html#t_proxy_Safelinx","text":"When Sametime proxy interacts with mobile devices (phones, pads, watches, and cars), it sends notifications through push networks such as Apple's \"APNS\" and Google's \"FCM.\" To send APNS or FCM messages through a proxy server in Docker, follow these steps: Update the following values in your custom.env file. STCONF_PUSH_PROXY_SERVER\u2014Enter the fully qualified domain name. For example, push-proxy.company.com . Alternatively, you can enter the IP address of the push-proxy. For example, 123.111.222.333 . STCONF_PUSH_PROXY_PORT\u2014Enter the port of the of the push-proxy. For example, 3128 . STCONF_PUSH_PROXY_USER\u2014When necessary, enter the functional ID of the account required to use the push proxy. STCONF_PUSH_PROXY_PASSWORD\u2014When necessary, enter the password of the functional ID for the account required to use the push proxy. Ensure that the syntax for the .env file is followed, as shown in the example below. STCONF\\_PUSH\\_PROXY\\_SERVER=\"push-proxy.company.com\" STCONF\\_PUSH\\_PROXY\\_PORT=\"3128\" STCONF_PUSH_PROXY_USER=\"\" `STCONF_PUSH_PROXY_PASSWORD`=\"\" Run docker-compose up -d command to apply all changes. Parent topic: Push messaging through a proxy","title":"Configuring Docker to use a proxy server for push messaging"},{"location":"admin/t_proxy_k8s.html","text":"Configuring Kubernetes to use a proxy server for push messaging When Sametime proxy interacts with mobile devices (phones, pads, watches, and cars), it sends notifications through push networks such as Apple's \"APNS\" and Google's \"FCM.\" To send APNS or FCM messages through a proxy server in Kubernetes, follow these steps: Update the following values in your values.yaml file. pushProxyServer: \"\"\u2014Enter the fully qualified domain name. For example, push-proxy.company.com . Alternatively, you can enter the IP address of the push-proxy. For example, 123.111.222.333 . pushProxyPort: \"0\"\u2014Enter the port of the of the push-proxy. For example, 3128 . pushProxyUser: \"\"\u2014When necessary, enter the functional ID of the account required to use the push proxy. pushProxyPasswordBase64: \"\"\u2014When necessary, enter the password of the functional ID for the account required to use the push proxy. The value should the base64 encoded in your Kubernetes environment. Ensure that the syntax for the YAML file is followed, as shown in the example below. pushProxyServer: \"push-proxy.company.com\" pushProxyPort: \"3128\" pushProxyUser: \"\" pushProxyPasswordBase64: \"\" Restart the pod. Parent topic: Push messaging through a proxy","title":"Configuring Kubernetes to use a proxy server for push messaging {#t_proxy_k8s .task}"},{"location":"admin/t_proxy_k8s.html#t_proxy_k8s","text":"When Sametime proxy interacts with mobile devices (phones, pads, watches, and cars), it sends notifications through push networks such as Apple's \"APNS\" and Google's \"FCM.\" To send APNS or FCM messages through a proxy server in Kubernetes, follow these steps: Update the following values in your values.yaml file. pushProxyServer: \"\"\u2014Enter the fully qualified domain name. For example, push-proxy.company.com . Alternatively, you can enter the IP address of the push-proxy. For example, 123.111.222.333 . pushProxyPort: \"0\"\u2014Enter the port of the of the push-proxy. For example, 3128 . pushProxyUser: \"\"\u2014When necessary, enter the functional ID of the account required to use the push proxy. pushProxyPasswordBase64: \"\"\u2014When necessary, enter the password of the functional ID for the account required to use the push proxy. The value should the base64 encoded in your Kubernetes environment. Ensure that the syntax for the YAML file is followed, as shown in the example below. pushProxyServer: \"push-proxy.company.com\" pushProxyPort: \"3128\" pushProxyUser: \"\" pushProxyPasswordBase64: \"\" Restart the pod. Parent topic: Push messaging through a proxy","title":"Configuring Kubernetes to use a proxy server for push messaging"},{"location":"admin/t_push_proxy.html","text":"Push messaging through a proxy Depending on your network settings, your firewalls could prevent Sametime proxy from connecting to push networks like Apple Push Notification service (APNs) and Firebase Cloud Messaging (FCM) through the Internet. Sametime supports the sending of APNS and FCM messages through a proxy server. If you need to send APNS or FCM message through a proxy server in your environment, you need to configure the settings for the messages you want routed through the proxy. Configuring Docker to use a proxy server for push messaging Configuring Kubernetes to use a proxy server for push messaging Parent topic: Configuring","title":"Push messaging through a proxy {#t_push_proxy .concept}"},{"location":"admin/t_push_proxy.html#t_push_proxy","text":"Depending on your network settings, your firewalls could prevent Sametime proxy from connecting to push networks like Apple Push Notification service (APNs) and Firebase Cloud Messaging (FCM) through the Internet. Sametime supports the sending of APNS and FCM messages through a proxy server. If you need to send APNS or FCM message through a proxy server in your environment, you need to configure the settings for the messages you want routed through the proxy. Configuring Docker to use a proxy server for push messaging Configuring Kubernetes to use a proxy server for push messaging Parent topic: Configuring","title":"Push messaging through a proxy"},{"location":"admin/t_resolving_business_cards.html","text":"Resolving problems with business cards If business cards are not displaying user information as expected, first check the server configuration, then the client, and finally, the business cards themselves. To check the server configuration, verify that the storage repository, such as LDAP used with the Sametime server is configured correctly. A configuration problem is the most likely cause of problems with business cards. For more information, see Setting up business cards . If the configuration is correct, next verify that the business card information on requested from the clients is working correctly. For this, trace the UserInfo servlet flows to verify that the UserInfo servlet is working correctly. The UserInfo servlet runs on the server retrieves business card information on request from clients and responds to client requests. To determine if there are errors on the exchange of information, enable the UserInfo Debug trace. If the UserInfo servlet on the server is responding correctly, enable client-side tracing to determine what is happening on the client. Follow the instructions in Logging and tracing on the Sametime Embedded and Connect Client . For Web clients, review the Proxy service logs and capture a browser HTTP Archive (HAR) file to review the business card information received. Parent topic: Troubleshooting Enabling the UserInfo Debug trace on Docker If a debug.env doesn't exist in the directory where the installation package was decompress, you must create it. Add the following line to the debug.env file. STI__debug__USERINFO_DEBUG_LEVEL=5 Add the debug.env in the community section of the docker_compose.yaml file. Save the file. Start the Sametime server to apply the changes and enable the trace. docker-compose up -d Enabling the UserInfo Debug trace on Kubernetes Edit the values.yaml file, changing the enableCommunityDebug property from false to true. Save this change. Edit sameteime-community-logging ConfigMap, and add the following line to the data section. STI__debug__USERINFO_DEBUG_LEVEL: \"5\" For example: kubectl edit cm sametime-community-logging Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1","title":"Resolving problems with business cards {#t_resolving_business_cards .task}"},{"location":"admin/t_resolving_business_cards.html#t_resolving_business_cards","text":"If business cards are not displaying user information as expected, first check the server configuration, then the client, and finally, the business cards themselves. To check the server configuration, verify that the storage repository, such as LDAP used with the Sametime server is configured correctly. A configuration problem is the most likely cause of problems with business cards. For more information, see Setting up business cards . If the configuration is correct, next verify that the business card information on requested from the clients is working correctly. For this, trace the UserInfo servlet flows to verify that the UserInfo servlet is working correctly. The UserInfo servlet runs on the server retrieves business card information on request from clients and responds to client requests. To determine if there are errors on the exchange of information, enable the UserInfo Debug trace. If the UserInfo servlet on the server is responding correctly, enable client-side tracing to determine what is happening on the client. Follow the instructions in Logging and tracing on the Sametime Embedded and Connect Client . For Web clients, review the Proxy service logs and capture a browser HTTP Archive (HAR) file to review the business card information received. Parent topic: Troubleshooting","title":"Resolving problems with business cards"},{"location":"admin/t_resolving_business_cards.html#task_cmx_2pp_r5b","text":"If a debug.env doesn't exist in the directory where the installation package was decompress, you must create it. Add the following line to the debug.env file. STI__debug__USERINFO_DEBUG_LEVEL=5 Add the debug.env in the community section of the docker_compose.yaml file. Save the file. Start the Sametime server to apply the changes and enable the trace. docker-compose up -d","title":"Enabling the UserInfo Debug trace on Docker"},{"location":"admin/t_resolving_business_cards.html#task_ufj_rpp_r5b","text":"Edit the values.yaml file, changing the enableCommunityDebug property from false to true. Save this change. Edit sameteime-community-logging ConfigMap, and add the following line to the data section. STI__debug__USERINFO_DEBUG_LEVEL: \"5\" For example: kubectl edit cm sametime-community-logging Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1","title":"Enabling the UserInfo Debug trace on Kubernetes"},{"location":"admin/t_single_node.html","text":"Creating persistent volume for a single node deployment This procedure describes an approach to configuring persistent local node storage for the meeting recordings pod in a Kubernetes environment. This procedure assumes that you have a single worker node running the meetings-recording.node and persistence is mapped from the available disk space on the node itself. However, there are many complexities related to managing persistence in a Kubernetes environment. So you should find a solution that meets your needs, which might involve using network mounts, elastic cloud storage, and so forth. Extract the sametime_meetings.zip file and change to the directory with the extracted files. The extracted files contain YAML configuration files used in the following steps. From the worker node, run the following commands to create a mount point on the host. sudo mkdir -p /mnt/disk/vol1 sudo chcon -Rt svirt_sandbox_file_t /mnt/disk/vol1 sudo chmod 777 /mnt/disk/vol1 Run the following command to create a local storage class. kubectl create -f kubernetes/storage/single-node/storage-class.yaml From the directory with the extracted files, edit the following settings in thekubernetes/storage/single-node/persistent-volume.yaml file. Replace the value of REPLACE_WITH_NODE_NAME with your single node name. Adjust the capacity: storage: value to reflect your expected storage needs. Run the following command to create a persistent volume. kubectl create -f kubernetes/storage/single-node/peristent-volume.yaml Run the following command to create the persistent volume claim. kubectl create -f kubernetes/storage/single-node/peristent-volume-claim.yaml Parent topic: Creating the persistent volume","title":"Creating persistent volume for a single node deployment {#t_single_node .task}"},{"location":"admin/t_single_node.html#t_single_node","text":"This procedure describes an approach to configuring persistent local node storage for the meeting recordings pod in a Kubernetes environment. This procedure assumes that you have a single worker node running the meetings-recording.node and persistence is mapped from the available disk space on the node itself. However, there are many complexities related to managing persistence in a Kubernetes environment. So you should find a solution that meets your needs, which might involve using network mounts, elastic cloud storage, and so forth. Extract the sametime_meetings.zip file and change to the directory with the extracted files. The extracted files contain YAML configuration files used in the following steps. From the worker node, run the following commands to create a mount point on the host. sudo mkdir -p /mnt/disk/vol1 sudo chcon -Rt svirt_sandbox_file_t /mnt/disk/vol1 sudo chmod 777 /mnt/disk/vol1 Run the following command to create a local storage class. kubectl create -f kubernetes/storage/single-node/storage-class.yaml From the directory with the extracted files, edit the following settings in thekubernetes/storage/single-node/persistent-volume.yaml file. Replace the value of REPLACE_WITH_NODE_NAME with your single node name. Adjust the capacity: storage: value to reflect your expected storage needs. Run the following command to create a persistent volume. kubectl create -f kubernetes/storage/single-node/peristent-volume.yaml Run the following command to create the persistent volume claim. kubectl create -f kubernetes/storage/single-node/peristent-volume-claim.yaml Parent topic: Creating the persistent volume","title":"Creating persistent volume for a single node deployment"},{"location":"admin/t_testing_sametime_chat.html","text":"Testing Sametime chat and meeting clients This article assumes that you have successfully installed and configured Sametime or Sametime Premium. Before going live, it is important to test the following services to ensure that Sametime is working as expected. Verify if the Sametime web client chat is running. Using a web browser, go to the URL: https://yourserver.domain.com/chat The yourserver.domain variable is the name of your Sametime server and the domain name. Verify if the Sametime server is running. Using a web browser, go to the following URL: https://yourserver.domain.com https://yourserver.domain.com/meeting Verify if the Sametime Connect client and Sametime embedded client (in HCL Notes) are running. Add a Sametime Server Community under Preferences specifying the Host server and Server community port. The default Server community port value is 1533 . Enter a username and password on the Log In tab. Select OK to save the changes. Log in using the new credentials. Parent topic: Administering","title":"Testing Sametime chat and meeting clients {#t_testing_sametime_chat .task}"},{"location":"admin/t_testing_sametime_chat.html#t_testing_sametime_chat","text":"This article assumes that you have successfully installed and configured Sametime or Sametime Premium. Before going live, it is important to test the following services to ensure that Sametime is working as expected. Verify if the Sametime web client chat is running. Using a web browser, go to the URL: https://yourserver.domain.com/chat The yourserver.domain variable is the name of your Sametime server and the domain name. Verify if the Sametime server is running. Using a web browser, go to the following URL: https://yourserver.domain.com https://yourserver.domain.com/meeting Verify if the Sametime Connect client and Sametime embedded client (in HCL Notes) are running. Add a Sametime Server Community under Preferences specifying the Host server and Server community port. The default Server community port value is 1533 . Enter a username and password on the Log In tab. Select OK to save the changes. Log in using the new credentials. Parent topic: Administering","title":"Testing Sametime chat and meeting clients"},{"location":"admin/t_troubleshooting_clients.html","text":"Troubleshooting Sametime clients Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime clients. Collecting Sametime client configuration and log data You can collect client logs and configuration data into a zip file. Logging and tracing on the Sametime Embedded and Connect Client You can provide these instructions to Sametime Embedded and Connect Client users to enable tracing on their clients. Trace logs are stored in a workspace folder on the user's local hard drive or a network drive. Parent topic: Troubleshooting","title":"Troubleshooting Sametime clients {#t_troubleshooting_clients .task}"},{"location":"admin/t_troubleshooting_clients.html#t_troubleshooting_clients","text":"Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime clients. Collecting Sametime client configuration and log data You can collect client logs and configuration data into a zip file. Logging and tracing on the Sametime Embedded and Connect Client You can provide these instructions to Sametime Embedded and Connect Client users to enable tracing on their clients. Trace logs are stored in a workspace folder on the user's local hard drive or a network drive. Parent topic: Troubleshooting","title":"Troubleshooting Sametime clients"},{"location":"admin/t_troubleshooting_kubernetes_host_not_found.html","text":"Kubernetes: Containers not starting due to \"Host not found\" Use this information on troubleshooting Sametime 12 Premium on Kubernetes - containers not starting due to \"Host not found.\" After installing Sametime 12, the server is not responding correctly. You may experience any of the following symptoms: Unable to create or save a meeting room Can't get a list of meeting rooms Recordings fail Unable to login Group chat inside the meeting fails Media streams do not work To investigate the issue, use the command: kubectl get po This will display a list of the processes (pods) running. In a normal working environment, you'll see all of the processes with status \"running\". If any of your processes in this list are not \"Running\" it indicates a problem. Typically with the problems described above it indicates an issue with the meeting server connecting to MongoDB or the Sametime Proxy. To further investigate these two areas you'll take the name of the process as it is in the name column. For storage related issues (creating/retrieving meeting rooms), it is the catalog process. Run the below commands to further investigate. kubectl describe catalog For authentication issues, investigate the \"auth\" process. kubectl logs <auth-name> For example using the screenshot above the auth process name is auth-77fbc6cf67-vrf77, then the command is: kubectl logs auth-77fbc6cf67-vrf77 For recordings, investigate the \"recordings\" process. kubectl logs <recordings-name> For other Sametime Proxy related issues, investigate the \"web\" process. kubectl logs <web-name> For media issues, investigate the \"video\" process. kubectl logs deploy/video If you see errors about \"host not found\" then the Kubernetes environment is having difficulty resolving the MongoDB server and/or Proxy server. Resolution If the DNS is unable to consistently resolve the host names for MongoDB and/or Sametime Proxy, these hostnames and IP addresses can be added to the configuration manually. In Kubernetes you can add these hostnames and the IP addresses to the host aliases. For further reading on this feature see: Adding entries to Pod /etc/hosts with HostAliases . Each pod that is producing a \"host not found\" error message will need to have the host aliases updated. You can modify the template, so that any future changes that you wish to incorporate will bring these host aliases. Or you can also modify the instance that is running, so that the change will be in effect immediately. Note: If you modify the instance that is running, you will lose these settings if you restart the pod. It is recommended to change the template. Use the below table to determine which template needs to be modified. Also the command to modify the running instance is provided. Name to resolve Pod Template name(s) Command to modify running instance. Hostname of the Sametime Proxy auth and web pods helm/charts/web/templates/deployment.yaml helm/charts/auth/templates/deployment.yaml | {#codeblock_f2j_cb1_ptb} kubectl edit deploy web ``` {#codeblock_g2j_cb1_ptb} kubectl edit deploy auth ``` | |Hostname of the MongoDB server|catalog|helm/charts/catalog/templates/deployment.yaml| {#codeblock_h2j_cb1_ptb} kubectl edit deply catalog | |STUN server host|video|helm/charts/video/templates/deployment.yaml| {#codeblock_i2j_cb1_ptb} kubectl edit deploy video | |Recording repository host|recordings|helm/charts/recordings/templates/deployment.yaml| {#codeblock_j2j_cb1_ptb} kubectl edit deploy recordings | Modify the template. First a note about yaml files - do not use the tab key for indentation, when using indentation use two spaces for each indentation. Open the template in a text editor (such as vi). Locate the line restartPolicy=Always and insert a new line. Use the below example text to include the hostnames that need to be resolved: hostAliases: - hostnames: - \"sametimeproxy.example.com\" - \"sametimeproxyalias.example.com\" ip: \"10.10.10.10\" - hostnames: - \"mongodb.example.com\" ip: \"10.10.10.11\" In the hostnames field your server may only be known as one hostname, you can add multiple aliases if desired. Before saving the template, make sure the indentations are correct, using only spaces for indentation. The \"hostAliases:\" line should line up exactly under the \"restartPolicy\" line at the same level of indententaion. You may need to correct the other lines as well after copy and pasting them. Visually it should look like this: Note: There should be no extra blank lines in the template, so be sure to remove any. Save and close the template when changes are complete. This process should be completed for all templates involved. Apply the changes to the server. Run the commands: helm uninstall sametime-meetings helm install sametime-meetings . Note: The dot at the end is part of the command. Parent topic: Troubleshooting Sametime on Kubernetes","title":"Kubernetes: Containers not starting due to \"Host not found\" {#t_troubleshooting_kubernetes_host_not_found .task}"},{"location":"admin/t_troubleshooting_kubernetes_host_not_found.html#t_troubleshooting_kubernetes_host_not_found","text":"Use this information on troubleshooting Sametime 12 Premium on Kubernetes - containers not starting due to \"Host not found.\" After installing Sametime 12, the server is not responding correctly. You may experience any of the following symptoms: Unable to create or save a meeting room Can't get a list of meeting rooms Recordings fail Unable to login Group chat inside the meeting fails Media streams do not work To investigate the issue, use the command: kubectl get po This will display a list of the processes (pods) running. In a normal working environment, you'll see all of the processes with status \"running\". If any of your processes in this list are not \"Running\" it indicates a problem. Typically with the problems described above it indicates an issue with the meeting server connecting to MongoDB or the Sametime Proxy. To further investigate these two areas you'll take the name of the process as it is in the name column. For storage related issues (creating/retrieving meeting rooms), it is the catalog process. Run the below commands to further investigate. kubectl describe catalog For authentication issues, investigate the \"auth\" process. kubectl logs <auth-name> For example using the screenshot above the auth process name is auth-77fbc6cf67-vrf77, then the command is: kubectl logs auth-77fbc6cf67-vrf77 For recordings, investigate the \"recordings\" process. kubectl logs <recordings-name> For other Sametime Proxy related issues, investigate the \"web\" process. kubectl logs <web-name> For media issues, investigate the \"video\" process. kubectl logs deploy/video If you see errors about \"host not found\" then the Kubernetes environment is having difficulty resolving the MongoDB server and/or Proxy server. Resolution If the DNS is unable to consistently resolve the host names for MongoDB and/or Sametime Proxy, these hostnames and IP addresses can be added to the configuration manually. In Kubernetes you can add these hostnames and the IP addresses to the host aliases. For further reading on this feature see: Adding entries to Pod /etc/hosts with HostAliases . Each pod that is producing a \"host not found\" error message will need to have the host aliases updated. You can modify the template, so that any future changes that you wish to incorporate will bring these host aliases. Or you can also modify the instance that is running, so that the change will be in effect immediately. Note: If you modify the instance that is running, you will lose these settings if you restart the pod. It is recommended to change the template. Use the below table to determine which template needs to be modified. Also the command to modify the running instance is provided. Name to resolve Pod Template name(s) Command to modify running instance. Hostname of the Sametime Proxy auth and web pods helm/charts/web/templates/deployment.yaml helm/charts/auth/templates/deployment.yaml | {#codeblock_f2j_cb1_ptb} kubectl edit deploy web ``` {#codeblock_g2j_cb1_ptb} kubectl edit deploy auth ``` | |Hostname of the MongoDB server|catalog|helm/charts/catalog/templates/deployment.yaml| {#codeblock_h2j_cb1_ptb} kubectl edit deply catalog | |STUN server host|video|helm/charts/video/templates/deployment.yaml| {#codeblock_i2j_cb1_ptb} kubectl edit deploy video | |Recording repository host|recordings|helm/charts/recordings/templates/deployment.yaml| {#codeblock_j2j_cb1_ptb} kubectl edit deploy recordings | Modify the template. First a note about yaml files - do not use the tab key for indentation, when using indentation use two spaces for each indentation. Open the template in a text editor (such as vi). Locate the line restartPolicy=Always and insert a new line. Use the below example text to include the hostnames that need to be resolved: hostAliases: - hostnames: - \"sametimeproxy.example.com\" - \"sametimeproxyalias.example.com\" ip: \"10.10.10.10\" - hostnames: - \"mongodb.example.com\" ip: \"10.10.10.11\" In the hostnames field your server may only be known as one hostname, you can add multiple aliases if desired. Before saving the template, make sure the indentations are correct, using only spaces for indentation. The \"hostAliases:\" line should line up exactly under the \"restartPolicy\" line at the same level of indententaion. You may need to correct the other lines as well after copy and pasting them. Visually it should look like this: Note: There should be no extra blank lines in the template, so be sure to remove any. Save and close the template when changes are complete. This process should be completed for all templates involved. Apply the changes to the server. Run the commands: helm uninstall sametime-meetings helm install sametime-meetings . Note: The dot at the end is part of the command. Parent topic: Troubleshooting Sametime on Kubernetes","title":"Kubernetes: Containers not starting due to \"Host not found\""},{"location":"admin/t_troubleshooting_ldap_kubernetes.html","text":"Troubleshooting LDAP on the community pod If you are having difficulty connecting to a secure LDAP server, perform the following troubleshooting steps. Log into the community pod. Find the name of the community pod using the kubectl get pods command. The results shows the pod names which contains hashes. Run the following command to log into the community pod. Include the pod name. pod\\_name kubectl exec -it pod\\_name --container=community -\u2013 bash Confirm that the community pod is receiving the trust store. Look for the ldaptruststore.p12 file in /local/notesdata directory. If the file is present, continue to the next step. If the file is missing, the LDAP secret is not being read properly. Confirm that LDAP secret has been created in the correct namespace if using namespaces. Open the values.yaml file and confirm that the LDAP secret name is specified correctly in the ldapConfigSecret: \"ldap-config-secret\" format. Confirm that the sametime.ini and UserInfoConfig.xml files are updated. Open the /local/notesdata/sametime.ini file in the community pod. and confirm the LDAP TLS settings are present. Locate the following statements in the file: STLDAP_TLS_TRUST_STORE_TYPE=p12 STLDAP_TLS_TRUST_STORE_FILE = /local/notesdata/ldaptruststore.p12 The file name and path are hard coded and should not changed. STLDAP_TLS_TRUST_STORE_PASSWORD= thepassword This should be your actual password for the trust store. If these are missing, confirm the values.yaml settings are present as mentioned in the confirm you have the correct configuration details step. Open the /local/notesdata/UserInfoConfig.xml and confirm that you see the correct details in the <Storage Details> section for the host name and port of the LDAP server. Confirm that the below line is present, where \u201cthepassword\u201d is your trust store password: <SslProperties KeyStorePath=\"/local/notesdata/ldaptruststore.p12\" KeyStorePassword=\"password\" /> If anything in this section is missing, examine the settings in the values.yaml file for accuracy as decribed in the next step. Confirm you have correct configuration details . Confirm your other values in the values.yaml pertaining to LDAP: ldapHost: ldapHost: server\\_host\\_name ldapPort: \"636\" ldapTls: true Where server_host_name should be the LDAP server host name or IP address. Check the bind credentials in the sametime-global-secrets, they are base64 encoded. First, issue the command: kubectl edit secret sametime-global-secrets Locate the lines beginning with LdapBindEntryDn and LdapBindEntryPassword . Take the value of each setting and base64 decode them, they should be your Bind DN and the Bind password. If these are wrong, then base64 encode them. To decode the values, issue the following command: echo -n \u2018value\u2019 | base64 -d Where \u2018value\u2019 is the encoded value in the secret. If you need to change the credentials, you can set it to the base64 encoded value of the correct Bind name and password, directly in the secret, but it should also be set in the template file as well. If you fail to update the template file, then your existing secrets are overridden when you run a helm upgrade command. The template file is located where the helm directory was saved, and it is found under /helm/templates/sametime-secrets.yaml To change the Bind credentials, see Changing the LDAP service account password in Kubernetes . For more information on secrets, see the Managing secrets in Kubernetes and Modifying secrets topics. If you are overriding the default configuration using an extra-community-config secret, there are additional steps to take to correct the Bind DN. See Changing the LDAP service account password in Kubernetes . Confirm TLS is negotiating properly between Sametime and LDAP In Sametime 12 only TLS 1.2 is enabled by default. If the LDAP server you are connecting to doesnn't support TLS 1.2, then you need to override the default configuration. Sametime connects to LDAP attempting to negotiate TLS with the following ciphers: RSA_WITH_AES_256_GCM_SHA384 (0x009D) RSA_WITH_AES_128_CBC_SHA (0x002F) Support for at least one of the ciphers might need to be added to your LDAP server, such is the case for HCL Domino 12.0.2, for details see Sametime 12.0 TLS required ciphers to connect to Domino 12.0.2 LDAP There is a known issue when using a newer version of keytool to create the trust store, Sametime is unable to read it. To work around the problem, recreate the trust store with keytool and add the argument: -J-Dkeystore.pkcs12.legacy to the command. For more details, see the Sametime unable to read trust store causing LDAP connection to fail article. To determine if your TLS is not negotiating and finding a common cipher suite enable debug. Start with VP_LDAP_TRACE=1 and ST_TLS_DEBUG=1. See the Enabling Community trace in Kubernetes topic. By default, the community pod connects to LDAP on the pod IP address range, and the firewall should be configured to permit this traffic. If you are unable to open up the entire pod IP range to LDAP, consider implementing a network address translation, or IP Masquerade solution, which will give the traffic from the pods an IP in a range of your choosing. An example of this is the Google Kubernetes Engine IP masquerade agent solution. For more information, see the IP masquerade agent Google Cloud topic. Each cloud provider has an unique solution, see your vendor\u2019s documentation for more details. The community pod must resolve the host name of the LDAP server, or you can configure the IP address instead. If the host name of the LDAP server does not resolve in DNS, you can configure Host Aliases for the Community pod. See the Configuring host aliases for Kubernetes deployments article for steps. Netstat is installed on the community pod and can be helpful to understanding if the connectivity is succeeding or not succeeding. To use netstat on the community pod enter the command: netstat -an | grep 636 Substitute your secure LDAP port number if you are not using port 636. You might find that the default settings for LDAP are incompatible with your LDAP implementation and are causing problems Sametime 12 connects with multiple connections, the login, resolve and search connections uses the same settings. These settings are configured in the StCommunityConfig.xml, which are pulled from the values.yaml file and sametime-global-secrets. These can be overwritten by the extra-community-configs secret. The UserInfo task (business cards) uses different settings. These settings are in theUserInfoConfig.xml file and are also pulled from the values.yaml file and can be overwritten by the extra-community-configs secret. It is also possible to create a custom java class file to transform the LDAP searches for more efficient requests to LDAP. See Configuring the class file on Kubernetes for more details. Parent topic: Troubleshooting Sametime on Kubernetes","title":"Troubleshooting LDAP on the community pod {#t_troubleshooting_ldap_kubernetes .task}"},{"location":"admin/t_troubleshooting_ldap_kubernetes.html#t_troubleshooting_ldap_kubernetes","text":"If you are having difficulty connecting to a secure LDAP server, perform the following troubleshooting steps. Log into the community pod. Find the name of the community pod using the kubectl get pods command. The results shows the pod names which contains hashes. Run the following command to log into the community pod. Include the pod name. pod\\_name kubectl exec -it pod\\_name --container=community -\u2013 bash Confirm that the community pod is receiving the trust store. Look for the ldaptruststore.p12 file in /local/notesdata directory. If the file is present, continue to the next step. If the file is missing, the LDAP secret is not being read properly. Confirm that LDAP secret has been created in the correct namespace if using namespaces. Open the values.yaml file and confirm that the LDAP secret name is specified correctly in the ldapConfigSecret: \"ldap-config-secret\" format. Confirm that the sametime.ini and UserInfoConfig.xml files are updated. Open the /local/notesdata/sametime.ini file in the community pod. and confirm the LDAP TLS settings are present. Locate the following statements in the file: STLDAP_TLS_TRUST_STORE_TYPE=p12 STLDAP_TLS_TRUST_STORE_FILE = /local/notesdata/ldaptruststore.p12 The file name and path are hard coded and should not changed. STLDAP_TLS_TRUST_STORE_PASSWORD= thepassword This should be your actual password for the trust store. If these are missing, confirm the values.yaml settings are present as mentioned in the confirm you have the correct configuration details step. Open the /local/notesdata/UserInfoConfig.xml and confirm that you see the correct details in the <Storage Details> section for the host name and port of the LDAP server. Confirm that the below line is present, where \u201cthepassword\u201d is your trust store password: <SslProperties KeyStorePath=\"/local/notesdata/ldaptruststore.p12\" KeyStorePassword=\"password\" /> If anything in this section is missing, examine the settings in the values.yaml file for accuracy as decribed in the next step. Confirm you have correct configuration details . Confirm your other values in the values.yaml pertaining to LDAP: ldapHost: ldapHost: server\\_host\\_name ldapPort: \"636\" ldapTls: true Where server_host_name should be the LDAP server host name or IP address. Check the bind credentials in the sametime-global-secrets, they are base64 encoded. First, issue the command: kubectl edit secret sametime-global-secrets Locate the lines beginning with LdapBindEntryDn and LdapBindEntryPassword . Take the value of each setting and base64 decode them, they should be your Bind DN and the Bind password. If these are wrong, then base64 encode them. To decode the values, issue the following command: echo -n \u2018value\u2019 | base64 -d Where \u2018value\u2019 is the encoded value in the secret. If you need to change the credentials, you can set it to the base64 encoded value of the correct Bind name and password, directly in the secret, but it should also be set in the template file as well. If you fail to update the template file, then your existing secrets are overridden when you run a helm upgrade command. The template file is located where the helm directory was saved, and it is found under /helm/templates/sametime-secrets.yaml To change the Bind credentials, see Changing the LDAP service account password in Kubernetes . For more information on secrets, see the Managing secrets in Kubernetes and Modifying secrets topics. If you are overriding the default configuration using an extra-community-config secret, there are additional steps to take to correct the Bind DN. See Changing the LDAP service account password in Kubernetes . Confirm TLS is negotiating properly between Sametime and LDAP In Sametime 12 only TLS 1.2 is enabled by default. If the LDAP server you are connecting to doesnn't support TLS 1.2, then you need to override the default configuration. Sametime connects to LDAP attempting to negotiate TLS with the following ciphers: RSA_WITH_AES_256_GCM_SHA384 (0x009D) RSA_WITH_AES_128_CBC_SHA (0x002F) Support for at least one of the ciphers might need to be added to your LDAP server, such is the case for HCL Domino 12.0.2, for details see Sametime 12.0 TLS required ciphers to connect to Domino 12.0.2 LDAP There is a known issue when using a newer version of keytool to create the trust store, Sametime is unable to read it. To work around the problem, recreate the trust store with keytool and add the argument: -J-Dkeystore.pkcs12.legacy to the command. For more details, see the Sametime unable to read trust store causing LDAP connection to fail article. To determine if your TLS is not negotiating and finding a common cipher suite enable debug. Start with VP_LDAP_TRACE=1 and ST_TLS_DEBUG=1. See the Enabling Community trace in Kubernetes topic. By default, the community pod connects to LDAP on the pod IP address range, and the firewall should be configured to permit this traffic. If you are unable to open up the entire pod IP range to LDAP, consider implementing a network address translation, or IP Masquerade solution, which will give the traffic from the pods an IP in a range of your choosing. An example of this is the Google Kubernetes Engine IP masquerade agent solution. For more information, see the IP masquerade agent Google Cloud topic. Each cloud provider has an unique solution, see your vendor\u2019s documentation for more details. The community pod must resolve the host name of the LDAP server, or you can configure the IP address instead. If the host name of the LDAP server does not resolve in DNS, you can configure Host Aliases for the Community pod. See the Configuring host aliases for Kubernetes deployments article for steps. Netstat is installed on the community pod and can be helpful to understanding if the connectivity is succeeding or not succeeding. To use netstat on the community pod enter the command: netstat -an | grep 636 Substitute your secure LDAP port number if you are not using port 636. You might find that the default settings for LDAP are incompatible with your LDAP implementation and are causing problems Sametime 12 connects with multiple connections, the login, resolve and search connections uses the same settings. These settings are configured in the StCommunityConfig.xml, which are pulled from the values.yaml file and sametime-global-secrets. These can be overwritten by the extra-community-configs secret. The UserInfo task (business cards) uses different settings. These settings are in theUserInfoConfig.xml file and are also pulled from the values.yaml file and can be overwritten by the extra-community-configs secret. It is also possible to create a custom java class file to transform the LDAP searches for more efficient requests to LDAP. See Configuring the class file on Kubernetes for more details. Parent topic: Troubleshooting Sametime on Kubernetes","title":"Troubleshooting LDAP on the community pod"},{"location":"admin/t_troubleshooting_sametime_chat.html","text":"Troubleshooting Sametime Chat Parent topic: Troubleshooting","title":"Troubleshooting Sametime Chat {#t_troubleshooting_sametime_chat .concept}"},{"location":"admin/t_troubleshooting_sametime_chat.html#t_troubleshooting_sametime_chat","text":"Parent topic: Troubleshooting","title":"Troubleshooting Sametime Chat"},{"location":"admin/t_troubleshooting_sametime_docker.html","text":"Troubleshooting Sametime on Docker Enabling Community trace in Docker Parent topic: Troubleshooting","title":"Troubleshooting Sametime on Docker {#t_troubleshooting_sametime_docker .concept}"},{"location":"admin/t_troubleshooting_sametime_docker.html#t_troubleshooting_sametime_docker","text":"Enabling Community trace in Docker Parent topic: Troubleshooting","title":"Troubleshooting Sametime on Docker"},{"location":"admin/t_troubleshooting_sametime_kubernetes.html","text":"Troubleshooting Sametime on Kubernetes Enabling Community trace in Kubernetes Viewing and saving log files Logs track pod events. You can gather a log for a specific pod and container within a pod or for all pods. Pods in Sametime A pod is a group of one or more containers that share storage and network resources. Transferring files from a pod to a Linux shell Capturing a network trace in a pod Applying changes Kubernetes: Containers not starting due to \"Host not found\" Use this information on troubleshooting Sametime 12 Premium on Kubernetes - containers not starting due to \"Host not found.\" Troubleshooting LDAP on the community pod Parent topic: Troubleshooting","title":"Troubleshooting Sametime on Kubernetes {#t_troubleshooting_sametime_kubernetes .concept}"},{"location":"admin/t_troubleshooting_sametime_kubernetes.html#t_troubleshooting_sametime_kubernetes","text":"Enabling Community trace in Kubernetes Viewing and saving log files Logs track pod events. You can gather a log for a specific pod and container within a pod or for all pods. Pods in Sametime A pod is a group of one or more containers that share storage and network resources. Transferring files from a pod to a Linux shell Capturing a network trace in a pod Applying changes Kubernetes: Containers not starting due to \"Host not found\" Use this information on troubleshooting Sametime 12 Premium on Kubernetes - containers not starting due to \"Host not found.\" Troubleshooting LDAP on the community pod Parent topic: Troubleshooting","title":"Troubleshooting Sametime on Kubernetes"},{"location":"admin/t_troubleshooting_sametime_meetings.html","text":"Troubleshooting Sametime Meetings Parent topic: Troubleshooting","title":"Troubleshooting Sametime Meetings {#t_troubleshooting_sametime_meetings .concept}"},{"location":"admin/t_troubleshooting_sametime_meetings.html#t_troubleshooting_sametime_meetings","text":"Parent topic: Troubleshooting","title":"Troubleshooting Sametime Meetings"},{"location":"admin/t_troubleshooting_sametime_server.html","text":"Troubleshooting the Sametime server Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime server. This section will introduce the different Meeting server containers and what their roles are. This is important to know to help understand what certain container logs are reviewed for specific issues. The remainder of this section will introduce commonly reported issues, how to troubleshoot them and known causes. Sametime server images When installing Sametime Meetings on Docker, the following list of images are loaded. meetings-auth.node meetings-recordings.node meetings-web meetings-prosody meetings-jicofo meetings-jvb meetings-jigasi meetings-jibri meetings-persistence Meeting images Description meetings-auth.node Responsible for authentication via the nginx proxy to the Sametime Proxy server. The Sametime Proxy server in turn connects to the Sametime Community server for authentication. meetings-web Front end web server that uses the nginx proxy. meetings-jvb Responsible for the jitsi video bridge. meetings-jibri Responsible for the meeting recordings. meetings-persistence: Responsible for the MongoDB connection to create or retrieve Meeting room names and settings. These Meeting images work together to support all the required Meeting features. On Docker, the docker-compose-yaml file defines the Meeting server configuration. The Meeting server environment details are defined in the custom.env file. Note: These values are case sensitive and must be entered in lower case. Meeting Server Connections It\u2019s important to review and understand the required Meeting server connectivity and ports. The image provided is highlighting these connections and ports. Ensure the Meeting server is not blocked or prevented from successfully making these connections. Meetings Common Installation Issues Q1. Confirm version of Docker A1. CentOS ships with Docker installed, but not the most recent which is required. Use the command docker version to confirm 9.03.13. Q2. When running ./install.sh, receive docker-compose: command is not found . A2. For example: Starting composition... ./install.sh: line 48: docker-compose: command not found [root@meetings tmp]# If you recieve docker-compose: command is not found , confirm running as a user with access to the docker-compose location. Additional confirm docker-compose is correctly installed. For more information, see Install Docker Compose . Q3. Confirm if the user has the appropriate permissions? A3. Run the command: docker-compose logs -f nginx . If \"Permission denied\" is returned the user does not have the appropriate permissions. Example: nginx_1 | [s6-init] making user provided files available at /var/run/s6/etc...exited 0. nginx_1 | [s6-init] ensuring user provided files have correct perms...exited 0. nginx_1 | [fix-attrs.d] applying ownership and permissions fixes... nginx_1 | [fix-attrs.d] done. nginx_1 | [cont-init.d] executing container initialization scripts... nginx_1 | [cont-init.d] 01-set-timezone: executing... nginx_1 | [cont-init.d] 01-set-timezone: exited 0. nginx_1 | [cont-init.d] 10-config: executing... nginx_1 | mkdir: cannot create directory '/config/nginx': Permission denied nginx_1 | mkdir: cannot create directory '/config/keys': Permission denied Q4. Sametime Meetings install fails, what is needed before running the install again. A4. When Sametime Meetings install fails, delete the ./jitsi-config directory before attempting another install. Meetings Server Common Issues Q1. Install is complete, but I can't access the meeting homepage? A1. Run the following command from Linux Shell: docker-compose logs -f nginx Sample error from the log: nginx_1 | [cont-init.d] 10-config: exited 0. nginx_1 | [cont-init.d] 10-set-server-env: executing... nginx_1 | [cont-init.d] 10-set-server-env: exited 0. nginx_1 | [cont-init.d] done. nginx_1 | [services.d] starting services nginx_1 | [services.d] done. nginx_1 | nginx: [emerg] host not found in upstream \"chat.mysametimetrial.com\" in /config/nginx/meet.conf:18 nginx_1 | nginx: [emerg] host not found in upstream \"chat.mysametimetrial.com\" in /config/nginx/meet.conf:18 nginx_1 | nginx: [emerg] host not found in upstream \"chat.mysametimetrial.com\" in /config/nginx/meet.conf:18 The SAMETIME_PROXY_HOST and SAMETIME_PROXY_PORT values are in the custom.env file. These values must be reachable by the docker container. If you see \"host not found in upstream\", update or correct DNS so the host is resolvable. Alternatively, the docker-compose.yaml file can be updated so the host name is resolvable locally. Add the host name and IP to the \"extra_hosts\" setting in the nginx section of the docker-compose.yaml file (at the bottom). To enable the changes, restart by running the commands \"docker-compose down\" and \"docker-compose up -d\". Alternatively, the docker-compose.yaml file can be updated so the host name is resolvable locally. Add the host name and IP to the \"extra_hosts\" setting in the nginx section of the docker-compose.yaml file (at the bottom). To enable the changes, restart by running the commands docker-compose down and docker-compose up -d. For detailed instructions, see step 3 here . Q2. Sametime Meeting login page is successful, but 'oops' message is received when logging in? A2. Check and confirm: If the meetings policy is enabled on the Sametime Community server. If JWT secrets are correct and enabled on the Sametime Community server. If you can log in to the Sametime Community and Proxy servers after making the JWT changes. Check that the proxy hostname is resolving as expected in the docker container. 500 error in nginx logs on the /user/connect request will be found if this is the case. Review NGINX logs from the Meeting server. Q3. Entering a Meeting, receiving infinite \" Loading Meeting... \" A3. Review Meeting server jvb logs for errors. Confirm the DOCKER_HOST_ADDRESS in the custom.env file is correct and a rout-able IP address. Update or correct DNS so the host is resolvable. Other known causes: Virtual Sound Driver not installed. Unable to connect to STUN server(s). Review Meeting server jvb logs. Capture and review HAR file from a browser client. Confirm Port 10000 (docker) or 30000 (kubernetes) UDP is not blocked. Q4. Can\u2019t create a Meeting Room. A4. The Meetings 11.6 Release requires a connection to MongoDB. (This was not required in the pre-release version). Can re-use existing MongoDB server or create one specific for Meetings. Sametime Meetings Best Practices Run as root/sudo access. Run this command to access the docker shell for a given Meeting image. docker-compose exe <auth/jvb/nginx> /bin/sh Note: Replace <auth/jvb/nginx> with the Meeting image you want to access. From the docker shell you can confirm DNS, firewalls and other details that may differ from the host system. To start and stop the Sametime Meetings server, run these commands from Linux shell: To Start: docker-compose up -d To Stop: docker-compose down For Sametime Meeting issues, the Meeting server services/container logs will vary depending on the issue. For Meeting page failing to load or Login issues, get NGINX and AUTH logs with relevant times. For Meeting Recording issues, get JVB and JIBRI logs with relevant times. For Meeting Loading issues or STUN issues, get JVB logs with relevant times. Parent topic: Troubleshooting","title":"Troubleshooting the Sametime server {#troubleshooting_meeting .task}"},{"location":"admin/t_troubleshooting_sametime_server.html#troubleshooting_meeting","text":"Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime server. This section will introduce the different Meeting server containers and what their roles are. This is important to know to help understand what certain container logs are reviewed for specific issues. The remainder of this section will introduce commonly reported issues, how to troubleshoot them and known causes. Sametime server images When installing Sametime Meetings on Docker, the following list of images are loaded. meetings-auth.node meetings-recordings.node meetings-web meetings-prosody meetings-jicofo meetings-jvb meetings-jigasi meetings-jibri meetings-persistence Meeting images Description meetings-auth.node Responsible for authentication via the nginx proxy to the Sametime Proxy server. The Sametime Proxy server in turn connects to the Sametime Community server for authentication. meetings-web Front end web server that uses the nginx proxy. meetings-jvb Responsible for the jitsi video bridge. meetings-jibri Responsible for the meeting recordings. meetings-persistence: Responsible for the MongoDB connection to create or retrieve Meeting room names and settings. These Meeting images work together to support all the required Meeting features. On Docker, the docker-compose-yaml file defines the Meeting server configuration. The Meeting server environment details are defined in the custom.env file. Note: These values are case sensitive and must be entered in lower case. Meeting Server Connections It\u2019s important to review and understand the required Meeting server connectivity and ports. The image provided is highlighting these connections and ports. Ensure the Meeting server is not blocked or prevented from successfully making these connections. Meetings Common Installation Issues Q1. Confirm version of Docker A1. CentOS ships with Docker installed, but not the most recent which is required. Use the command docker version to confirm 9.03.13. Q2. When running ./install.sh, receive docker-compose: command is not found . A2. For example: Starting composition... ./install.sh: line 48: docker-compose: command not found [root@meetings tmp]# If you recieve docker-compose: command is not found , confirm running as a user with access to the docker-compose location. Additional confirm docker-compose is correctly installed. For more information, see Install Docker Compose . Q3. Confirm if the user has the appropriate permissions? A3. Run the command: docker-compose logs -f nginx . If \"Permission denied\" is returned the user does not have the appropriate permissions. Example: nginx_1 | [s6-init] making user provided files available at /var/run/s6/etc...exited 0. nginx_1 | [s6-init] ensuring user provided files have correct perms...exited 0. nginx_1 | [fix-attrs.d] applying ownership and permissions fixes... nginx_1 | [fix-attrs.d] done. nginx_1 | [cont-init.d] executing container initialization scripts... nginx_1 | [cont-init.d] 01-set-timezone: executing... nginx_1 | [cont-init.d] 01-set-timezone: exited 0. nginx_1 | [cont-init.d] 10-config: executing... nginx_1 | mkdir: cannot create directory '/config/nginx': Permission denied nginx_1 | mkdir: cannot create directory '/config/keys': Permission denied Q4. Sametime Meetings install fails, what is needed before running the install again. A4. When Sametime Meetings install fails, delete the ./jitsi-config directory before attempting another install. Meetings Server Common Issues Q1. Install is complete, but I can't access the meeting homepage? A1. Run the following command from Linux Shell: docker-compose logs -f nginx Sample error from the log: nginx_1 | [cont-init.d] 10-config: exited 0. nginx_1 | [cont-init.d] 10-set-server-env: executing... nginx_1 | [cont-init.d] 10-set-server-env: exited 0. nginx_1 | [cont-init.d] done. nginx_1 | [services.d] starting services nginx_1 | [services.d] done. nginx_1 | nginx: [emerg] host not found in upstream \"chat.mysametimetrial.com\" in /config/nginx/meet.conf:18 nginx_1 | nginx: [emerg] host not found in upstream \"chat.mysametimetrial.com\" in /config/nginx/meet.conf:18 nginx_1 | nginx: [emerg] host not found in upstream \"chat.mysametimetrial.com\" in /config/nginx/meet.conf:18 The SAMETIME_PROXY_HOST and SAMETIME_PROXY_PORT values are in the custom.env file. These values must be reachable by the docker container. If you see \"host not found in upstream\", update or correct DNS so the host is resolvable. Alternatively, the docker-compose.yaml file can be updated so the host name is resolvable locally. Add the host name and IP to the \"extra_hosts\" setting in the nginx section of the docker-compose.yaml file (at the bottom). To enable the changes, restart by running the commands \"docker-compose down\" and \"docker-compose up -d\". Alternatively, the docker-compose.yaml file can be updated so the host name is resolvable locally. Add the host name and IP to the \"extra_hosts\" setting in the nginx section of the docker-compose.yaml file (at the bottom). To enable the changes, restart by running the commands docker-compose down and docker-compose up -d. For detailed instructions, see step 3 here . Q2. Sametime Meeting login page is successful, but 'oops' message is received when logging in? A2. Check and confirm: If the meetings policy is enabled on the Sametime Community server. If JWT secrets are correct and enabled on the Sametime Community server. If you can log in to the Sametime Community and Proxy servers after making the JWT changes. Check that the proxy hostname is resolving as expected in the docker container. 500 error in nginx logs on the /user/connect request will be found if this is the case. Review NGINX logs from the Meeting server. Q3. Entering a Meeting, receiving infinite \" Loading Meeting... \" A3. Review Meeting server jvb logs for errors. Confirm the DOCKER_HOST_ADDRESS in the custom.env file is correct and a rout-able IP address. Update or correct DNS so the host is resolvable. Other known causes: Virtual Sound Driver not installed. Unable to connect to STUN server(s). Review Meeting server jvb logs. Capture and review HAR file from a browser client. Confirm Port 10000 (docker) or 30000 (kubernetes) UDP is not blocked. Q4. Can\u2019t create a Meeting Room. A4. The Meetings 11.6 Release requires a connection to MongoDB. (This was not required in the pre-release version). Can re-use existing MongoDB server or create one specific for Meetings. Sametime Meetings Best Practices Run as root/sudo access. Run this command to access the docker shell for a given Meeting image. docker-compose exe <auth/jvb/nginx> /bin/sh Note: Replace <auth/jvb/nginx> with the Meeting image you want to access. From the docker shell you can confirm DNS, firewalls and other details that may differ from the host system. To start and stop the Sametime Meetings server, run these commands from Linux shell: To Start: docker-compose up -d To Stop: docker-compose down For Sametime Meeting issues, the Meeting server services/container logs will vary depending on the issue. For Meeting page failing to load or Login issues, get NGINX and AUTH logs with relevant times. For Meeting Recording issues, get JVB and JIBRI logs with relevant times. For Meeting Loading issues or STUN issues, get JVB logs with relevant times. Parent topic: Troubleshooting","title":"Troubleshooting the Sametime server"},{"location":"admin/t_verify_namechange.html","text":"Sametime DB Utility reporting After running database updates, a report file is generated with a summary of the operation which were applied to the database. The files are placed in the output volume supplied to the docker run command. The file name will have the following format. name_change_summary_report_[date_time].log Parent topic: Updating Sametime data in MongoDB","title":"Sametime DB Utility reporting {#t_verify_namechange .task}"},{"location":"admin/t_verify_namechange.html#t_verify_namechange","text":"After running database updates, a report file is generated with a summary of the operation which were applied to the database. The files are placed in the output volume supplied to the docker run command. The file name will have the following format. name_change_summary_report_[date_time].log Parent topic: Updating Sametime data in MongoDB","title":"Sametime DB Utility reporting"},{"location":"admin/tls_change_certificate_docker.html","text":"Updating the TLS certificates on Docker Ensure that you have the certificate and private key to be used. Run the following command to stop the Sametime services. docker-compose down Copy the two files to the /keys folder where the Sametime is deployed. Replace the cert.key and cert.crt files with the new certificate files. The files are located in the installation_directory./sametime-config/web/keys/ directory. Where installation_directory is the Sametime installation directory. Note: These changes are lost if you delete or remove the sametime-config directory. Run the following command to start the Sametime services and apply the changes. docker compose up -d Parent topic: Updating the Sametime server TLS certificates","title":"Updating the TLS certificates on Docker {#tls_change_cetificate_docker .task}"},{"location":"admin/tls_change_certificate_docker.html#tls_change_cetificate_docker","text":"Ensure that you have the certificate and private key to be used. Run the following command to stop the Sametime services. docker-compose down Copy the two files to the /keys folder where the Sametime is deployed. Replace the cert.key and cert.crt files with the new certificate files. The files are located in the installation_directory./sametime-config/web/keys/ directory. Where installation_directory is the Sametime installation directory. Note: These changes are lost if you delete or remove the sametime-config directory. Run the following command to start the Sametime services and apply the changes. docker compose up -d Parent topic: Updating the Sametime server TLS certificates","title":"Updating the TLS certificates on Docker"},{"location":"admin/tls_change_certificate_kubernetes.html","text":"Updating the TLS certificates on Kubernetes In Kubernetes, TLS certificates are contained within a secret called tls_secret. Ensure that you have the certificate and private key to be used. To update the certificate on Kubernetes, first you must delete the existing secret and create it again with the new certificate information. Run the following command to verify if the secret currently exists. kubectl get secrets If the tls_secret exists, delete it. kubectl delete secret tls-secret Create a new tls_secret secret with the new certificate and private key. create secret tls tls-secret --key tls.key --cert tls.crt Where the value for key is the private key file and cert is the certificate file. Verify kubectl get secret tls-secret -o yaml Parent topic: Updating the Sametime server TLS certificates","title":"Updating the TLS certificates on Kubernetes {#tls_change_certificate_kubernetes .task}"},{"location":"admin/tls_change_certificate_kubernetes.html#tls_change_certificate_kubernetes","text":"In Kubernetes, TLS certificates are contained within a secret called tls_secret. Ensure that you have the certificate and private key to be used. To update the certificate on Kubernetes, first you must delete the existing secret and create it again with the new certificate information. Run the following command to verify if the secret currently exists. kubectl get secrets If the tls_secret exists, delete it. kubectl delete secret tls-secret Create a new tls_secret secret with the new certificate and private key. create secret tls tls-secret --key tls.key --cert tls.crt Where the value for key is the private key file and cert is the certificate file. Verify kubectl get secret tls-secret -o yaml Parent topic: Updating the Sametime server TLS certificates","title":"Updating the TLS certificates on Kubernetes"},{"location":"admin/tls_configuration.html","text":"Choosing the TLS configuration scope When configuring security, you can configure key store, trust store and other configuration settings globally that apply to all Community server interactions. This creates a single place for an administer to manage configuration settings because there is only one place to maintain certificates, as well as fewer settings to configure. Optionally, TLS configuration settings can be overridden to have separate key and trust store, and settings for each type of connection if required in your environment. Only the settings in the sametime.ini file are global. To complete the configuration, some additional configuration may be required in the stconfig.nsf or some of the server xml files. These settings are detailed under the appropriate topic labeled for each type of server interaction. Implementing the Global TLS Scope Implementing the Individual TLS Scope Parent topic: Securing connections","title":"Choosing the TLS configuration scope {#tls_configuration .task}"},{"location":"admin/tls_configuration.html#tls_configuration","text":"When configuring security, you can configure key store, trust store and other configuration settings globally that apply to all Community server interactions. This creates a single place for an administer to manage configuration settings because there is only one place to maintain certificates, as well as fewer settings to configure. Optionally, TLS configuration settings can be overridden to have separate key and trust store, and settings for each type of connection if required in your environment. Only the settings in the sametime.ini file are global. To complete the configuration, some additional configuration may be required in the stconfig.nsf or some of the server xml files. These settings are detailed under the appropriate topic labeled for each type of server interaction. Implementing the Global TLS Scope Implementing the Individual TLS Scope Parent topic: Securing connections","title":"Choosing the TLS configuration scope"},{"location":"admin/topology.html","text":"Planning the network topology and connectivity This topic explains how Sametime components are connected and the default ports that are used. There are also example topologies to illustrate how Sametime can be deployed in different scenarios. The following are components within the Sametime topology. Docker or Kubernetes Directory service Database Clients Clients are the interfaces used to connection with the Sametime server and product features. Each physical component communicates with the Sametime server using a specific port. See hcl_sametime_clients.md for more information on clients. Directory services When choosing which LDAP directory to use, consider all the integrations with Sametime. It is important to understand how users authenticate with the server. Sametime can be integrated into many other HCL products such as HCL iNotes, Verse, Connections and Digital Experience. It is important to understand how users authenticate with the server and use a common LDAP directory. Review the LDAP Planning section for additional information when choosing a directory. Single sign-on (SSO) Sametime requires Single Sign On and issues a JWT token to the users upon log in. All users are authenticated against the Community service, where tokens are generated to be shared with the other microservices. As an optional configuration, Sametime supports LTPA Single Sign On as well as Security Assertion Markup Language (SAML). With LTPA SSO, the user is issued an LTPA token which can be shared with other services that support LTPA authentication such as HCL Domino, Verse, and Connections. With SAML, the initial authentication is done by an Identity Provider which validates the user\u2019s identity with the Community service. The user is then provided a JWT token that is good for the duration of their session. For more information, see Enabling Single Sign-on . Planning considerations for chat Considerations for Sametime Premium Sametime Premium deployments are supported on Docker or Kubernetes. Considerations for telephony Integration with the Teamcall Message Gateway (TMG) application from iLink, telephony services can be added to your Sametime environment to allow for telephone access to chats and meetings. Ports used by Sametime services Sametime services use several ports for communication. If firewalls are in use in your environment, all traffic on these ports should be permitted bidirectionally. Parent topic: Planning","title":"Planning the network topology and connectivity {#topology .concept}"},{"location":"admin/topology.html#topology","text":"This topic explains how Sametime components are connected and the default ports that are used. There are also example topologies to illustrate how Sametime can be deployed in different scenarios. The following are components within the Sametime topology. Docker or Kubernetes Directory service Database Clients Clients are the interfaces used to connection with the Sametime server and product features. Each physical component communicates with the Sametime server using a specific port. See hcl_sametime_clients.md for more information on clients.","title":"Planning the network topology and connectivity"},{"location":"admin/topology.html#section_i5j_rmt_v5b","text":"When choosing which LDAP directory to use, consider all the integrations with Sametime. It is important to understand how users authenticate with the server. Sametime can be integrated into many other HCL products such as HCL iNotes, Verse, Connections and Digital Experience. It is important to understand how users authenticate with the server and use a common LDAP directory. Review the LDAP Planning section for additional information when choosing a directory.","title":"Directory services"},{"location":"admin/topology.html#section_plw_cnt_v5b","text":"Sametime requires Single Sign On and issues a JWT token to the users upon log in. All users are authenticated against the Community service, where tokens are generated to be shared with the other microservices. As an optional configuration, Sametime supports LTPA Single Sign On as well as Security Assertion Markup Language (SAML). With LTPA SSO, the user is issued an LTPA token which can be shared with other services that support LTPA authentication such as HCL Domino, Verse, and Connections. With SAML, the initial authentication is done by an Identity Provider which validates the user\u2019s identity with the Community service. The user is then provided a JWT token that is good for the duration of their session. For more information, see Enabling Single Sign-on . Planning considerations for chat Considerations for Sametime Premium Sametime Premium deployments are supported on Docker or Kubernetes. Considerations for telephony Integration with the Teamcall Message Gateway (TMG) application from iLink, telephony services can be added to your Sametime environment to allow for telephone access to chats and meetings. Ports used by Sametime services Sametime services use several ports for communication. If firewalls are in use in your environment, all traffic on these ports should be permitted bidirectionally. Parent topic: Planning","title":"Single sign-on (SSO)"},{"location":"admin/topology_chat.html","text":"Planning considerations for chat See the Ports used by Sametime topic for more details on which ports are required to be open on firewalls. Small Internal Chat Only Deployments For small internal deployments, a single Docker system can be deployed to support web chat, mobile and chat users with desktop clients (such as the Sametime Connect and Embedded Sametime client in HCL Notes). An example of a small deployment includes a single Docker deployment of Sametime, MongoDB Server and the LDAP directory. Figure 1 shows an example of a small internal deployment that only includes chat: In the above example, \u201cdesktop clients\u201d are the Sametime Connect client and Sametime embedded client (inside HCL Notes) for desktops. Browser clients may include other HCL applications such as HCL Verse, HCL iNotes, and HCL Connections, which have chat and presence integration with Sametime. You can use the mobile client app on your internal WIFI network if devices are able to connect to Sametime on port 443. Mobile apps can be used internally, however be aware that the mobile clients still need access to the Apple (APNS) and Google (FCM) servers for push notifications (notifying the user of new messages). As an additional option, Sametime supports proxying the notifications if you have a third party proxy to do so. Small Chat only environments with internet access Figure 2 shows a small chat only environment that includes internet access to Sametime. In this example you can open port 443 on the firewall to to support mobile clients on the internet. You can open TCP port 1533 to support desktop clients. Instead of placing Sametime in the Internal zone you can also place Sametime in a DMZ or on the external zone. Parent topic: Planning the network topology and connectivity","title":"Planning considerations for chat {#topology_chat .concept}"},{"location":"admin/topology_chat.html#topology_chat","text":"See the Ports used by Sametime topic for more details on which ports are required to be open on firewalls.","title":"Planning considerations for chat"},{"location":"admin/topology_chat.html#section_olj_3nt_v5b","text":"For small internal deployments, a single Docker system can be deployed to support web chat, mobile and chat users with desktop clients (such as the Sametime Connect and Embedded Sametime client in HCL Notes). An example of a small deployment includes a single Docker deployment of Sametime, MongoDB Server and the LDAP directory. Figure 1 shows an example of a small internal deployment that only includes chat: In the above example, \u201cdesktop clients\u201d are the Sametime Connect client and Sametime embedded client (inside HCL Notes) for desktops. Browser clients may include other HCL applications such as HCL Verse, HCL iNotes, and HCL Connections, which have chat and presence integration with Sametime. You can use the mobile client app on your internal WIFI network if devices are able to connect to Sametime on port 443. Mobile apps can be used internally, however be aware that the mobile clients still need access to the Apple (APNS) and Google (FCM) servers for push notifications (notifying the user of new messages). As an additional option, Sametime supports proxying the notifications if you have a third party proxy to do so.","title":"Small Internal Chat Only Deployments"},{"location":"admin/topology_chat.html#section_dzj_jqt_v5b","text":"Figure 2 shows a small chat only environment that includes internet access to Sametime. In this example you can open port 443 on the firewall to to support mobile clients on the internet. You can open TCP port 1533 to support desktop clients. Instead of placing Sametime in the Internal zone you can also place Sametime in a DMZ or on the external zone. Parent topic: Planning the network topology and connectivity","title":"Small Chat only environments with internet access"},{"location":"admin/topology_premium.html","text":"Considerations for Sametime Premium Sametime Premium deployments are supported on Docker or Kubernetes. If you are unfamiliar with these technologies, refer to Platforms . To learn more about Kubernetes, see An Overview of Kubernetes . Media audio and video streams over UDP port 10,000 for Docker or UDP 30,000 for Kubernetes. Sametime Meetings requires a STUN server if any user is attending from behind a firewall. The default configuration comes with the public Google STUN server configured using UDP Port 19302 configured, however any STUN server can be used. Both clients and the Sametime Meeting services need connectivity to the STUN service. For more information, see Session Traversal Utilities for NAT (STUN) . The following examples show several scenarios on how to deploy Sametime to include external users. Small Sametime Premium deployment on Docker If your environment includes a DMZ, you can place Sametime in the DMZ and open the required ports. In this example, clients can connect to Sametime from both inside the internal network as well as from the Internet. Browser clients and Mobile clients connect to Sametime using HTTPS port 443, and UDP port 10,000. These clients also connect directly to STUN on the Internet (or internally if installed as an optional configuration) on port 19302 UDP. Mobile clients must connect to the push notification services on the Internet in order to receive chat notifications in the client. Sametime desktop clients (those which are installed rich clients -Sametime Connect and Sametime embedded) are connecting on port 1533 TCP. The following graphic shows a small HCL Sametime Premium with internet access using Docker. Larger Sametime Premium deployments If you have a medium or large size user base you can deploy Sametime with Kubernetes. Kubernetes can be installed as an on-premise configuration or by leveraging a third party Kubernetes service such as Google Kubernetes Engine (GKE) or Amazon\u2019s Elastic Kubernetes Service (EKS), and others. When you deploy Sametime in Kubernetes, the Kubernetes cluster requires three node pools. Each node pool performs a different function. One node pool is dedicated to video, a second one for recorder and a main node pool for all other Sametime pods. The number of nodes in each node pool determines the capacity of the environment. An ingress controller is used to front-end connections from users to the webchat and meeting https services. Media streams are over UDP Port 30,000 and connect directly to the video node pool. Sametime desktop clients connect to a Sametime Mux Kubernetes service (svc) on port 1533 (TCP). The following graphic shows Kubernetes node pools and ingress. Connectivity for end users is very similar to the Docker deployment. The difference is UDP port 30,000 is used for media streams instead of port 10,000. There may be multiple nodes in the video node pool, and clients must be able to reach each one on port 30,000. The following graphic show an overview of connectivity in a Kubernetes deployment. For a fully containerized environment, it is possible to also run MongoDB as a Kubernetes cluster, which may require additional licensing from MongoDB. LDAP can also run as a container, Sametime supports LDAP v3 compliant directories. Domino LDAP can also run in Kubernetes. The following graphic shows fully containerized Sametime Premium Deployment. Managing Sametime features HCL Domino users are entitled to limited use of HCL Sametime chat capabilities. Parent topic: Planning the network topology and connectivity","title":"Considerations for Sametime Premium {#topology_premium .concept}"},{"location":"admin/topology_premium.html#topology_premium","text":"Sametime Premium deployments are supported on Docker or Kubernetes. If you are unfamiliar with these technologies, refer to Platforms . To learn more about Kubernetes, see An Overview of Kubernetes . Media audio and video streams over UDP port 10,000 for Docker or UDP 30,000 for Kubernetes. Sametime Meetings requires a STUN server if any user is attending from behind a firewall. The default configuration comes with the public Google STUN server configured using UDP Port 19302 configured, however any STUN server can be used. Both clients and the Sametime Meeting services need connectivity to the STUN service. For more information, see Session Traversal Utilities for NAT (STUN) . The following examples show several scenarios on how to deploy Sametime to include external users.","title":"Considerations for Sametime Premium"},{"location":"admin/topology_premium.html#section_lb3_tsv_v5b","text":"If your environment includes a DMZ, you can place Sametime in the DMZ and open the required ports. In this example, clients can connect to Sametime from both inside the internal network as well as from the Internet. Browser clients and Mobile clients connect to Sametime using HTTPS port 443, and UDP port 10,000. These clients also connect directly to STUN on the Internet (or internally if installed as an optional configuration) on port 19302 UDP. Mobile clients must connect to the push notification services on the Internet in order to receive chat notifications in the client. Sametime desktop clients (those which are installed rich clients -Sametime Connect and Sametime embedded) are connecting on port 1533 TCP. The following graphic shows a small HCL Sametime Premium with internet access using Docker.","title":"Small Sametime Premium deployment on Docker"},{"location":"admin/topology_premium.html#section_ftl_zsv_v5b","text":"If you have a medium or large size user base you can deploy Sametime with Kubernetes. Kubernetes can be installed as an on-premise configuration or by leveraging a third party Kubernetes service such as Google Kubernetes Engine (GKE) or Amazon\u2019s Elastic Kubernetes Service (EKS), and others. When you deploy Sametime in Kubernetes, the Kubernetes cluster requires three node pools. Each node pool performs a different function. One node pool is dedicated to video, a second one for recorder and a main node pool for all other Sametime pods. The number of nodes in each node pool determines the capacity of the environment. An ingress controller is used to front-end connections from users to the webchat and meeting https services. Media streams are over UDP Port 30,000 and connect directly to the video node pool. Sametime desktop clients connect to a Sametime Mux Kubernetes service (svc) on port 1533 (TCP). The following graphic shows Kubernetes node pools and ingress. Connectivity for end users is very similar to the Docker deployment. The difference is UDP port 30,000 is used for media streams instead of port 10,000. There may be multiple nodes in the video node pool, and clients must be able to reach each one on port 30,000. The following graphic show an overview of connectivity in a Kubernetes deployment. For a fully containerized environment, it is possible to also run MongoDB as a Kubernetes cluster, which may require additional licensing from MongoDB. LDAP can also run as a container, Sametime supports LDAP v3 compliant directories. Domino LDAP can also run in Kubernetes. The following graphic shows fully containerized Sametime Premium Deployment. Managing Sametime features HCL Domino users are entitled to limited use of HCL Sametime chat capabilities. Parent topic: Planning the network topology and connectivity","title":"Larger Sametime Premium deployments"},{"location":"admin/topology_telephony.html","text":"Considerations for telephony Integration with the Teamcall Message Gateway (TMG) application from iLink, telephony services can be added to your Sametime environment to allow for telephone access to chats and meetings. TMG provides two types of end user experiences: Dial in : Phone numbers are assigned to the Sametime Meeting service and each telephony enabled meeting has a unique pass code. This allows users to use their phones to dial in to a meeting. Dial out : Dia out allows users to dial a phone number from the meeting to join another user to the Sametime meeting. The iLink TMG can leverage your existing on-premise SIP Trunk, or a SIP Provider/Carrier service from a third-party. With this configuration, the SIP and RTP protocols are used between: the Meeting service and the iLink TMG server the iLink TMG server and the SIP Provider/Carrier or SIP Trunk For more details on the iLink product, see the iLink website. The following graphic shows a network environment with iLink integration. Parent topic: Planning the network topology and connectivity","title":"Considerations for telephony {#topology_telephony .concept}"},{"location":"admin/topology_telephony.html#topology_telephony","text":"Integration with the Teamcall Message Gateway (TMG) application from iLink, telephony services can be added to your Sametime environment to allow for telephone access to chats and meetings. TMG provides two types of end user experiences: Dial in : Phone numbers are assigned to the Sametime Meeting service and each telephony enabled meeting has a unique pass code. This allows users to use their phones to dial in to a meeting. Dial out : Dia out allows users to dial a phone number from the meeting to join another user to the Sametime meeting. The iLink TMG can leverage your existing on-premise SIP Trunk, or a SIP Provider/Carrier service from a third-party. With this configuration, the SIP and RTP protocols are used between: the Meeting service and the iLink TMG server the iLink TMG server and the SIP Provider/Carrier or SIP Trunk For more details on the iLink product, see the iLink website. The following graphic shows a network environment with iLink integration. Parent topic: Planning the network topology and connectivity","title":"Considerations for telephony"},{"location":"admin/topology_turn.html","text":"Determining where to install Sametime You can extend access to Sametime outside of your internal network to attendees on the Internet. Sametime can be installed in the demilitarized network zone (DMZ) and the required ports for connectivity need to be opened on the firewalls surrounding the DMZ. You can also use a third party Kubernetes cloud provider such as Amazon EKS, Google GKE, or other third party Kubernetes provider to deploy Sametime. For more information, see the Deploying Sametime 12 on Google Kubernetes Engine guide. For example, Sametime can be installed in a demilitarized network zone (DMZ) or internal zone, which requires ports open to the network. If there are users or attendees who might have a restrictive network environment, consider implementing a TURN service. TURN (Traversal Using Relays over NAT) is a protocol that relays network traffic. It is an optional service that you can deploy with Sametime to improve the end user experience when attendees and users of Sametime Meetings do not have connectivity to UDP port 30,000. If the user has access to ports 10,000 \u2013 20,000 UDP, then TURN can relay the traffic over this range instead. The user connects to the TURN server instead of Sametime directly. If the user is in a very restrictive environment and has no UDP ports available to use, then the TURN server can be used to relay traffic over TCP port 443. It is important to note that although port 443 is used for this purpose, it is not considered HTTP traffic, it is audio and video data. Sametime does not ship with a TURN server, but a third-party server can be used, such as CoTURN. CoTURN is the TURN server that has been tested with Sametime. For more details on TURN see Setting up a TURN server . Parent topic: Network planning for meetings","title":"Determining where to install Sametime {#topology_turn .concept}"},{"location":"admin/topology_turn.html#topology_turn","text":"You can extend access to Sametime outside of your internal network to attendees on the Internet. Sametime can be installed in the demilitarized network zone (DMZ) and the required ports for connectivity need to be opened on the firewalls surrounding the DMZ. You can also use a third party Kubernetes cloud provider such as Amazon EKS, Google GKE, or other third party Kubernetes provider to deploy Sametime. For more information, see the Deploying Sametime 12 on Google Kubernetes Engine guide. For example, Sametime can be installed in a demilitarized network zone (DMZ) or internal zone, which requires ports open to the network. If there are users or attendees who might have a restrictive network environment, consider implementing a TURN service. TURN (Traversal Using Relays over NAT) is a protocol that relays network traffic. It is an optional service that you can deploy with Sametime to improve the end user experience when attendees and users of Sametime Meetings do not have connectivity to UDP port 30,000. If the user has access to ports 10,000 \u2013 20,000 UDP, then TURN can relay the traffic over this range instead. The user connects to the TURN server instead of Sametime directly. If the user is in a very restrictive environment and has no UDP ports available to use, then the TURN server can be used to relay traffic over TCP port 443. It is important to note that although port 443 is used for this purpose, it is not considered HTTP traffic, it is audio and video data. Sametime does not ship with a TURN server, but a third-party server can be used, such as CoTURN. CoTURN is the TURN server that has been tested with Sametime. For more details on TURN see Setting up a TURN server . Parent topic: Network planning for meetings","title":"Determining where to install Sametime"},{"location":"admin/troubleshooting.html","text":"Troubleshooting This section provides information on troubleshooting and supporting Sametime environments. HCL Customer Support Sametime community forum Working with HCL support HCL support is available to provide technical assistance with obtaining a solution to problems with Sametime. Troubleshooting Sametime on Docker Troubleshooting Sametime on Kubernetes Troubleshooting the Sametime server Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime server. Troubleshooting Sametime Meetings Troubleshooting Sametime Chat Troubleshooting Sametime clients Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime clients. Resolving problems with business cards If business cards are not displaying user information as expected, first check the server configuration, then the client, and finally, the business cards themselves. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Troubleshooting {#troubleshooting .concept}"},{"location":"admin/troubleshooting.html#troubleshooting","text":"This section provides information on troubleshooting and supporting Sametime environments. HCL Customer Support Sametime community forum Working with HCL support HCL support is available to provide technical assistance with obtaining a solution to problems with Sametime. Troubleshooting Sametime on Docker Troubleshooting Sametime on Kubernetes Troubleshooting the Sametime server Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime server. Troubleshooting Sametime Meetings Troubleshooting Sametime Chat Troubleshooting Sametime clients Use this information on troubleshooting and logging tools to diagnose and resolve problems affecting the HCL Sametime clients. Resolving problems with business cards If business cards are not displaying user information as expected, first check the server configuration, then the client, and finally, the business cards themselves. Parent topic: HCL Sametime Administration Guide 12.0.1","title":"Troubleshooting"},{"location":"admin/troubleshooting_contact_support.html","text":"Working with HCL support HCL support is available to provide technical assistance with obtaining a solution to problems with Sametime. To request technical assistance, open a support case with HCL to work with a support engineer in resolving the problem. See How to open HCL Support case knowledge article for details. The support engineer needs to see the logs from the community pod. See the topic Viewing and saving log files . When working with the support engineer the following information is helpful in understanding the problem. Having the following information before talking with the support engineer saves time and reduces multiple calls. Time and date the problem was reproduced Problem scope, such as are all users or only certain users impacted, does the problem occur when performing specific task, and more Names of the user accounts involved. Steps to reproduce the problem Errors received by users You might be asked to share files with HCL support, see the HTTPS and SFTP upload and download instructions knowledge article for details. Parent topic: Troubleshooting","title":"Working with HCL support {#troubleshooting_contact_support .concept}"},{"location":"admin/troubleshooting_contact_support.html#troubleshooting_contact_support","text":"HCL support is available to provide technical assistance with obtaining a solution to problems with Sametime. To request technical assistance, open a support case with HCL to work with a support engineer in resolving the problem. See How to open HCL Support case knowledge article for details. The support engineer needs to see the logs from the community pod. See the topic Viewing and saving log files . When working with the support engineer the following information is helpful in understanding the problem. Having the following information before talking with the support engineer saves time and reduces multiple calls. Time and date the problem was reproduced Problem scope, such as are all users or only certain users impacted, does the problem occur when performing specific task, and more Names of the user accounts involved. Steps to reproduce the problem Errors received by users You might be asked to share files with HCL support, see the HTTPS and SFTP upload and download instructions knowledge article for details. Parent topic: Troubleshooting","title":"Working with HCL support"},{"location":"admin/troubleshooting_debug_trace_docker.html","text":"Enabling Community trace in Docker The Community and STProxy traces can be used to troubleshoot problems with the Sametime server and Sametime Meetings. The traces capture the flow between the Sametime server and the Meetings server. To enable the trace modify the docker-compose.yml file. In the community: section, locate the env_file: statement. community: image: hclcr.io/st/chat-server:${BUILD_LEVEL} restart: ${RESTART_POLICY} env_file: custom.env environment: Add, the debug.env parameter to the statement as shown in the following example. community: image: hclcr.io/st/chat-server:${BUILD_LEVEL} restart: ${RESTART_POLICY} env_file: - custom.env - debug.env environment: Parent topic: Troubleshooting Sametime on Docker","title":"Enabling Community trace in Docker {#troubleshooting_debug_trace_docker .task}"},{"location":"admin/troubleshooting_debug_trace_docker.html#troubleshooting_debug_trace_docker","text":"The Community and STProxy traces can be used to troubleshoot problems with the Sametime server and Sametime Meetings. The traces capture the flow between the Sametime server and the Meetings server. To enable the trace modify the docker-compose.yml file. In the community: section, locate the env_file: statement. community: image: hclcr.io/st/chat-server:${BUILD_LEVEL} restart: ${RESTART_POLICY} env_file: custom.env environment: Add, the debug.env parameter to the statement as shown in the following example. community: image: hclcr.io/st/chat-server:${BUILD_LEVEL} restart: ${RESTART_POLICY} env_file: - custom.env - debug.env environment: Parent topic: Troubleshooting Sametime on Docker","title":"Enabling Community trace in Docker"},{"location":"admin/troubleshooting_kubernetes_logs.html","text":"Viewing and saving log files Logs track pod events. You can gather a log for a specific pod and container within a pod or for all pods. Each Kubernetes pod and container performs a specific task, narrowing down which pod to gather a log allows you to focus on the problem being debugged. Review the Pods in Sametime topic to understand what each pod does. Some pods have multiple containers and you can specify gathering the log for the specific container. For pods that only have one container, you do not need to specify the container name. Run the kubectl get pods command to obtain the name of the pod. The command output includes all current pod names. Note: Pod name have hashes in it that change each time a pod is started. The following example shows the output from a kubectl get pods command. NAME READY STATUS RESTARTS AGE activity-5675f8bc9d-49b4f 1/1 Running 0 21h app-registry-84d89cfdd4-62z9s 1/1 Running 0 21h auth-7459fc7cd7-cqnjt 1/1 Running 0 21h backgrounds-c9fb7b87c-m2gpc 1/1 Running 0 21h catalog-6cdd48b6d6-8k669 1/1 Running 0 21h click2call-578d49d876-227fw 1/1 Running 0 21h community-695c867bfb-6tl42 2/2 Running 0 21h files-8454687cd8-xwsr8 2/2 Running 0 21h jibri-web-64c6d478fc-sfz9j 1/1 Running 0 21h jitsi-7b86fc4f64-vtrrb 3/3 Running 0 21h lobby-5ccf4bcb-s8mbr 1/1 Running 0 21h location-5868588458-htxtj 1/1 Running 0 21h mux-6b4bdc46d7-86768 1/1 Running 0 21h nginx-ingress-ingress-nginx-controller-5765f86f6-2dxq6 1/1 Running 0 21h outlook-5f946d99fd-nxhrc 1/1 Running 0 21h proxy-5697bc66f5-l88sf 1/1 Running 0 21h recorder-6b4d9d4598-jqpss 2/2 Running 0 21h recordings-bd9f7b94f-5hhzq 1/1 Running 0 21h video-778749bc5d-jhj5j 2/2 Running 0 21h web-5b5f4578d4-qmckq 1/1 Running 0 21h To view the log for a specific pod, run the kubectl logs command specifying the name of the pod to gather log information. If there is a specific container to gather the log, include both the pod name and container name on the command. kubectl logs pod\\_name container\\_name For example, if you want to view the jvb logs from the video pod based on the output in the previous step enter the command: kubectl logs video-58f8589f99-f4tcd jvb You can also use the --all-containers argument to see logs from all the containers on the pod. kubectl logs video-58f8589f99-f4tcd --all-containers To redirect the output to a file, add the greater than character ( > ) as an argument on the command and specifying a location that you have access to put the file. For example: kubectl logs video-58f8589f99-f4tcd --all-containers > /tmp/video.txt Parent topic: Troubleshooting Sametime on Kubernetes","title":"Viewing and saving log files {#troubleshooting_kubernetes_logs .task}"},{"location":"admin/troubleshooting_kubernetes_logs.html#troubleshooting_kubernetes_logs","text":"Logs track pod events. You can gather a log for a specific pod and container within a pod or for all pods. Each Kubernetes pod and container performs a specific task, narrowing down which pod to gather a log allows you to focus on the problem being debugged. Review the Pods in Sametime topic to understand what each pod does. Some pods have multiple containers and you can specify gathering the log for the specific container. For pods that only have one container, you do not need to specify the container name. Run the kubectl get pods command to obtain the name of the pod. The command output includes all current pod names. Note: Pod name have hashes in it that change each time a pod is started. The following example shows the output from a kubectl get pods command. NAME READY STATUS RESTARTS AGE activity-5675f8bc9d-49b4f 1/1 Running 0 21h app-registry-84d89cfdd4-62z9s 1/1 Running 0 21h auth-7459fc7cd7-cqnjt 1/1 Running 0 21h backgrounds-c9fb7b87c-m2gpc 1/1 Running 0 21h catalog-6cdd48b6d6-8k669 1/1 Running 0 21h click2call-578d49d876-227fw 1/1 Running 0 21h community-695c867bfb-6tl42 2/2 Running 0 21h files-8454687cd8-xwsr8 2/2 Running 0 21h jibri-web-64c6d478fc-sfz9j 1/1 Running 0 21h jitsi-7b86fc4f64-vtrrb 3/3 Running 0 21h lobby-5ccf4bcb-s8mbr 1/1 Running 0 21h location-5868588458-htxtj 1/1 Running 0 21h mux-6b4bdc46d7-86768 1/1 Running 0 21h nginx-ingress-ingress-nginx-controller-5765f86f6-2dxq6 1/1 Running 0 21h outlook-5f946d99fd-nxhrc 1/1 Running 0 21h proxy-5697bc66f5-l88sf 1/1 Running 0 21h recorder-6b4d9d4598-jqpss 2/2 Running 0 21h recordings-bd9f7b94f-5hhzq 1/1 Running 0 21h video-778749bc5d-jhj5j 2/2 Running 0 21h web-5b5f4578d4-qmckq 1/1 Running 0 21h To view the log for a specific pod, run the kubectl logs command specifying the name of the pod to gather log information. If there is a specific container to gather the log, include both the pod name and container name on the command. kubectl logs pod\\_name container\\_name For example, if you want to view the jvb logs from the video pod based on the output in the previous step enter the command: kubectl logs video-58f8589f99-f4tcd jvb You can also use the --all-containers argument to see logs from all the containers on the pod. kubectl logs video-58f8589f99-f4tcd --all-containers To redirect the output to a file, add the greater than character ( > ) as an argument on the command and specifying a location that you have access to put the file. For example: kubectl logs video-58f8589f99-f4tcd --all-containers > /tmp/video.txt Parent topic: Troubleshooting Sametime on Kubernetes","title":"Viewing and saving log files"},{"location":"admin/troubleshooting_kubernetes_pod_networktrace.html","text":"Capturing a network trace in a pod Get the name of the pod. kubectl get pods Start a shell session in the pod. Issue the below command, and make the following substitutions: kubectl exec -it <podname> --container=<container name> -- bash podname : The name of the pod. container_name : is the name of the container. If the pod only has one container you can omit this parameter. For example, if the pod name is jitsi-74d95d6d49-k5nts and the container name is jigasi, then the resulting command is: kubectl exec -it jitsi-74d95d6d49-k5nts --container=jigasi --bash Update the repositories by issuing the below command: apt-get update Install tcpdump by issuing the below command: apt-get install tcpdump Capture the network data, by issuing the command: tcpdump -i any -w <filename>.pcap Reproduce the problem. To stop and save the capture press Ctrl+C. Parent topic: Troubleshooting Sametime on Kubernetes Transferring files from a pod to a Linux shell Pods in Sametime","title":"Capturing a network trace in a pod {#troubleshooting_kubernetes_pod_networktrace .task}"},{"location":"admin/troubleshooting_kubernetes_pod_networktrace.html#troubleshooting_kubernetes_pod_networktrace","text":"Get the name of the pod. kubectl get pods Start a shell session in the pod. Issue the below command, and make the following substitutions: kubectl exec -it <podname> --container=<container name> -- bash podname : The name of the pod. container_name : is the name of the container. If the pod only has one container you can omit this parameter. For example, if the pod name is jitsi-74d95d6d49-k5nts and the container name is jigasi, then the resulting command is: kubectl exec -it jitsi-74d95d6d49-k5nts --container=jigasi --bash Update the repositories by issuing the below command: apt-get update Install tcpdump by issuing the below command: apt-get install tcpdump Capture the network data, by issuing the command: tcpdump -i any -w <filename>.pcap Reproduce the problem. To stop and save the capture press Ctrl+C. Parent topic: Troubleshooting Sametime on Kubernetes Transferring files from a pod to a Linux shell Pods in Sametime","title":"Capturing a network trace in a pod"},{"location":"admin/troubleshooting_kubernetes_transfer_pods.html","text":"Transferring files from a pod to a Linux shell Get the name of the pod. Pod name have hashes in it that change each time a pod is started. To get the name of the current pods, issue the command: kubectl get pods To copy a file from the pod, use the syntax below, and make the following substitutions: kubectl cp <podname>:/<filename> /<path_on_local>/<filename> --container=<container_name> podname : The name of the pod. filename : The file name inside the pod. path_on_local : The path on the machine running kubectl. container_name : The name of the container. If the pod only has one container you can omit this parameter. See Pods in Sametime for container names. For example if: The pod name is jitsi-7b86fc4f64-vtrrb The container name is jigasi The file name inside the pod is test1.pcap To save this file to the /tmp directory on the machine running kubectl, then the command is: kubectl cp jitsi-7b86fc4f64-vtrrb:/test1.pcap /tmp/test1.pcap --container=jigasi Parent topic: Troubleshooting Sametime on Kubernetes","title":"Transferring files from a pod to a Linux shell {#troubleshooting_kubernetes_transfer_pods .task}"},{"location":"admin/troubleshooting_kubernetes_transfer_pods.html#troubleshooting_kubernetes_transfer_pods","text":"Get the name of the pod. Pod name have hashes in it that change each time a pod is started. To get the name of the current pods, issue the command: kubectl get pods To copy a file from the pod, use the syntax below, and make the following substitutions: kubectl cp <podname>:/<filename> /<path_on_local>/<filename> --container=<container_name> podname : The name of the pod. filename : The file name inside the pod. path_on_local : The path on the machine running kubectl. container_name : The name of the container. If the pod only has one container you can omit this parameter. See Pods in Sametime for container names. For example if: The pod name is jitsi-7b86fc4f64-vtrrb The container name is jigasi The file name inside the pod is test1.pcap To save this file to the /tmp directory on the machine running kubectl, then the command is: kubectl cp jitsi-7b86fc4f64-vtrrb:/test1.pcap /tmp/test1.pcap --container=jigasi Parent topic: Troubleshooting Sametime on Kubernetes","title":"Transferring files from a pod to a Linux shell"},{"location":"admin/turnserver_centos.html","text":"Installing a TURN Server You can install and configure a TURN server to use with Sametime Meetings. The following procedures uses Coturn and CentOS 7 to implement a TURN server. Install the CentOS prerequisites. sudo yum install -y make gcc cc gcc-c++ wget openssl-devel libevent libevent-devel Download the Coturn source package that can be compiled from the Downloads repository. Ensure it is the latest version. The following example is downloading v4.5.2. mkdir /root/turn cd /root/turn wget https://coturn.net/turnserver/v4.5.2/turnserver-4.5.2.tar.gz Compile and install. ./configure --prefix=/usr/local/turnserver # Specify the installation directory make sudo make install Set the environment variables. vim ~/.bashrc Add the following statements. export turnserver_home=/usr/local/turnserver export PATH=$PATH:$turnserver_home/bin Configure the TURN server. Create the turnserver.conf file. vim /etc/turnserver.conf Add the following content to define the Coturn server. Replace the option values with the appropriate values for your environment. # Listener IP address of relay server. Multiple listeners can be specified. # If no IP(s) specified in the config file or in the command line options, # then all IPv4 and IPv6 system IPs will be used for listening. listening-ip=0.0.0.0 # External IP-Address of the TURN server external-ip=IP_ADDRESS # TURN listener port for UDP and TCP (Default: 3478). listening-port=3478 # 443 for TURN over TLS, which can bypass firewalls tls-listening-port=443 # host domain name. realm=mycompany.org # Path to the SSL certificate and private key. # Certificate file. cert=/usr/local/etc/turn_server_cert.pem # Private key file. pkey=/usr/local/etc/turn_server_pkey.pem # Lower and upper bounds of the UDP relay endpoints: # Further ports that are open for communication min-port=10000 max-port=20000 # This allows TURN credentials to be accounted for a specific user id. # If you don't have a suitable id, the timestamp alone can be used. # This option is just turning on secret-based authentication. # The actual value of the secret is defined by option static-auth-secret, use-auth-secret static-auth-secret=<YOUR_SECRET> # Option to set the log file name. # By default, the turnserver tries to open a log file in # /var/log, /var/tmp, /tmp and current directories directories log-file=/var/log/turnserver.log # Enable verbose logging verbose # Do not allow an TLS/DTLS version of protocol no-tlsv1 no-tlsv1_1 no-tlsv1_2 You can make additional customizations to the file. For additional information, see the turnserver.conf file. Within the file, configuration options are described as comments. Start the service. turnserver -v -r extranet-ip:port -a -o -c /etc/turnserver.conf Parent topic: Setting up a TURN server","title":"Installing a TURN Server {#turnserver_centos .task}"},{"location":"admin/turnserver_centos.html#turnserver_centos","text":"You can install and configure a TURN server to use with Sametime Meetings. The following procedures uses Coturn and CentOS 7 to implement a TURN server. Install the CentOS prerequisites. sudo yum install -y make gcc cc gcc-c++ wget openssl-devel libevent libevent-devel Download the Coturn source package that can be compiled from the Downloads repository. Ensure it is the latest version. The following example is downloading v4.5.2. mkdir /root/turn cd /root/turn wget https://coturn.net/turnserver/v4.5.2/turnserver-4.5.2.tar.gz Compile and install. ./configure --prefix=/usr/local/turnserver # Specify the installation directory make sudo make install Set the environment variables. vim ~/.bashrc Add the following statements. export turnserver_home=/usr/local/turnserver export PATH=$PATH:$turnserver_home/bin Configure the TURN server. Create the turnserver.conf file. vim /etc/turnserver.conf Add the following content to define the Coturn server. Replace the option values with the appropriate values for your environment. # Listener IP address of relay server. Multiple listeners can be specified. # If no IP(s) specified in the config file or in the command line options, # then all IPv4 and IPv6 system IPs will be used for listening. listening-ip=0.0.0.0 # External IP-Address of the TURN server external-ip=IP_ADDRESS # TURN listener port for UDP and TCP (Default: 3478). listening-port=3478 # 443 for TURN over TLS, which can bypass firewalls tls-listening-port=443 # host domain name. realm=mycompany.org # Path to the SSL certificate and private key. # Certificate file. cert=/usr/local/etc/turn_server_cert.pem # Private key file. pkey=/usr/local/etc/turn_server_pkey.pem # Lower and upper bounds of the UDP relay endpoints: # Further ports that are open for communication min-port=10000 max-port=20000 # This allows TURN credentials to be accounted for a specific user id. # If you don't have a suitable id, the timestamp alone can be used. # This option is just turning on secret-based authentication. # The actual value of the secret is defined by option static-auth-secret, use-auth-secret static-auth-secret=<YOUR_SECRET> # Option to set the log file name. # By default, the turnserver tries to open a log file in # /var/log, /var/tmp, /tmp and current directories directories log-file=/var/log/turnserver.log # Enable verbose logging verbose # Do not allow an TLS/DTLS version of protocol no-tlsv1 no-tlsv1_1 no-tlsv1_2 You can make additional customizations to the file. For additional information, see the turnserver.conf file. Within the file, configuration options are described as comments. Start the service. turnserver -v -r extranet-ip:port -a -o -c /etc/turnserver.conf Parent topic: Setting up a TURN server","title":"Installing a TURN Server"},{"location":"admin/turnserver_intro.html","text":"Setting up a TURN server A TURN server can be configured to provide for efficient traffic flow within your Sametime meeting. You'll need to install a TURN server and configure it for use with the Sametime Meeting server. There are several options for a TURN server. One option is the Coturn , which is an open source TURN server. The following two methods can be used to install the Coturn TURN server: Install on Ubuntu operating system Install on CentOS After the TURN is installed, follow the configuration method appropriate for your environment: Configuring the TURN Server for Docker Configuring the TURN server for Kubernetes Installing a TURN Server on Ubuntu You can install and configure a TURN server to use with Sametime Meeting on an Ubuntu operating system. Installing a TURN Server You can install and configure a TURN server to use with Sametime Meetings. Configuring the TURN Server for Docker You can configure the Sametime Meeting service to enable a TURN server on port 443 for Docker. Configuring the TURN server for Kubernetes Parent topic: Meetings","title":"Setting up a TURN server {#turnserver_intro .concept}"},{"location":"admin/turnserver_intro.html#turnserver_intro","text":"A TURN server can be configured to provide for efficient traffic flow within your Sametime meeting. You'll need to install a TURN server and configure it for use with the Sametime Meeting server. There are several options for a TURN server. One option is the Coturn , which is an open source TURN server. The following two methods can be used to install the Coturn TURN server: Install on Ubuntu operating system Install on CentOS After the TURN is installed, follow the configuration method appropriate for your environment: Configuring the TURN Server for Docker Configuring the TURN server for Kubernetes Installing a TURN Server on Ubuntu You can install and configure a TURN server to use with Sametime Meeting on an Ubuntu operating system. Installing a TURN Server You can install and configure a TURN server to use with Sametime Meetings. Configuring the TURN Server for Docker You can configure the Sametime Meeting service to enable a TURN server on port 443 for Docker. Configuring the TURN server for Kubernetes Parent topic: Meetings","title":"Setting up a TURN server"},{"location":"admin/turnserver_meetings_docker.html","text":"Configuring the TURN Server for Docker You can configure the Sametime Meeting service to enable a TURN server on port 443 for Docker. Update the following configuration in the custom.env file. # Enable TURN for JVB (bridge mode) connections TURN_ENABLE=1 # Secret for connect to TURN server # Add the same secret that you used to configure TURN server. TURN_SECRET=secret # Announce FQDN/IP address of the turn server via XMPP server (XEP-0215). # If empty or not set, variable DOCKER_HOST_ADDRESS will be used by default. TURN_HOST=turn.example.com # TLS/TCP/UDP turn port for connection TURN_PORT=443 # Transport for stun/turn connection. Can be tcp or udp. TURN_TRANSPORT=tcp Add the following configuration to the custom.env file. TURN_CREDENTIALS=secret Update the following configuration in the .env file. GLOBAL_MODULES=turncredentials Restart Docker. docker-compose up -d Parent topic: Setting up a TURN server","title":"Configuring the TURN Server for Docker {#turnserver_meetings_docker .task}"},{"location":"admin/turnserver_meetings_docker.html#turnserver_meetings_docker","text":"You can configure the Sametime Meeting service to enable a TURN server on port 443 for Docker. Update the following configuration in the custom.env file. # Enable TURN for JVB (bridge mode) connections TURN_ENABLE=1 # Secret for connect to TURN server # Add the same secret that you used to configure TURN server. TURN_SECRET=secret # Announce FQDN/IP address of the turn server via XMPP server (XEP-0215). # If empty or not set, variable DOCKER_HOST_ADDRESS will be used by default. TURN_HOST=turn.example.com # TLS/TCP/UDP turn port for connection TURN_PORT=443 # Transport for stun/turn connection. Can be tcp or udp. TURN_TRANSPORT=tcp Add the following configuration to the custom.env file. TURN_CREDENTIALS=secret Update the following configuration in the .env file. GLOBAL_MODULES=turncredentials Restart Docker. docker-compose up -d Parent topic: Setting up a TURN server","title":"Configuring the TURN Server for Docker"},{"location":"admin/turnserver_meetings_kubernetes.html","text":"Configuring the TURN server for Kubernetes You can configure the Sametime server to enable a TURN server on port 443 for Kubernetes. Note: Running the script to prepare deployment prompts for TURN server configuration. The following process is to enable TURN post deployment. For more information, refer to Preparing the deployment . Update the values.yaml file with the following values. Ensure that the syntax for the YAML file is followed. turnEnable: true globalModules: turncredentials turnHost:<turn host name> turnPort: 443 turnTransport: tcp jvbTcpHarvesterDisabled: true Update the helm/templates/sametime-secrets.yaml file. Locate the TurnSecret variable and set the value to the base64 encoded secret as set in the TURN configuration. TurnSecret: <base64encoded secret as set in TURN configuration> Note: If you need to generate a base64 encoded secret, use the following command. Use the unencoded value provided in your TURN configuration. /bin/echo -n $(openssl rand -hex 32) | base64 Run the helm update command to enable the configuration changes. Parent topic: Setting up a TURN server","title":"Configuring the TURN server for Kubernetes {#turnserver_meetings_kubernetes .task}"},{"location":"admin/turnserver_meetings_kubernetes.html#turnserver_meetings_kubernetes","text":"You can configure the Sametime server to enable a TURN server on port 443 for Kubernetes. Note: Running the script to prepare deployment prompts for TURN server configuration. The following process is to enable TURN post deployment. For more information, refer to Preparing the deployment . Update the values.yaml file with the following values. Ensure that the syntax for the YAML file is followed. turnEnable: true globalModules: turncredentials turnHost:<turn host name> turnPort: 443 turnTransport: tcp jvbTcpHarvesterDisabled: true Update the helm/templates/sametime-secrets.yaml file. Locate the TurnSecret variable and set the value to the base64 encoded secret as set in the TURN configuration. TurnSecret: <base64encoded secret as set in TURN configuration> Note: If you need to generate a base64 encoded secret, use the following command. Use the unencoded value provided in your TURN configuration. /bin/echo -n $(openssl rand -hex 32) | base64 Run the helm update command to enable the configuration changes. Parent topic: Setting up a TURN server","title":"Configuring the TURN server for Kubernetes"},{"location":"admin/turnserver_ubuntu.html","text":"Installing a TURN Server on Ubuntu You can install and configure a TURN server to use with Sametime Meeting on an Ubuntu operating system. You need the following: A Ubuntu server with a public IP-Address A custom domain name The following procedures uses Coturn open source implementation of a TURN server. The procedure includes installing and configuring the Conturn server. Install Coturn on the Ubuntu operating system. sudo apt-get -y update sudo apt-get -y install coturn To start the Coturn Daemon at Startup, modify the /etc/default/coturn file. sudo vim /etc/default/coturn Remove the comment character (#) from the beginning of the following line. TURNSERVER_ENABLED=1 Confige the Coturn server. Make a copy of your original configuration before making any changes. This original configuration copy can be used if a problem occurs. Create an empty file in the same directory to contain your configuration. sudo vim /etc/turnserver.conf Add the following content to define the Coturn server and replace the values with appropriate values for your configuration. # Listener IP address of relay server. Multiple listeners can be specified. # If no IP(s) specified in the config file or in the command line options, # then all IPv4 and IPv6 system IPs will be used for listening. listening-ip=0.0.0.0 # External IP-Address of the TURN server external-ip=IP_ADDRESS # TURN listener port for UDP and TCP (Default: 3478). listening-port=3478 # 443 for TURN over TLS, which can bypass firewalls tls-listening-port=443 # host domain name. realm=mycompany.org # Path to the SSL certificate and private key. # Certificate file. cert=/usr/local/etc/turn_server_cert.pem # Private key file. pkey=/usr/local/etc/turn_server_pkey.pem # Lower and upper bounds of the UDP relay endpoints: # Further ports that are open for communication min-port=10000 max-port=20000 # This allows TURN credentials to be accounted for a specific user id. # If you don't have a suitable id, the timestamp alone can be used. # This option is just turning on secret-based authentication. # The actual value of the secret is defined by option static-auth-secret, use-auth-secret static-auth-secret=<YOUR_SECRET> # Option to set the log file name. # By default, the turnserver tries to open a log file in # /var/log, /var/tmp, /tmp and current directories directories log-file=/var/log/turnserver.log # Enable verbose logging verbose # Do not allow an TLS/DTLS version of protocol no-tlsv1 no-tlsv1_1 no-tlsv1_2 You can make additional customizations to the file. For additional information, see the turnserver.conf file. Within the file, configuration options are described as comments. Save the file and restart the Coturn server to apply the changes. Parent topic: Setting up a TURN server","title":"Installing a TURN Server on Ubuntu {#turnserver_ubuntu .task}"},{"location":"admin/turnserver_ubuntu.html#turnserver_ubuntu","text":"You can install and configure a TURN server to use with Sametime Meeting on an Ubuntu operating system. You need the following: A Ubuntu server with a public IP-Address A custom domain name The following procedures uses Coturn open source implementation of a TURN server. The procedure includes installing and configuring the Conturn server. Install Coturn on the Ubuntu operating system. sudo apt-get -y update sudo apt-get -y install coturn To start the Coturn Daemon at Startup, modify the /etc/default/coturn file. sudo vim /etc/default/coturn Remove the comment character (#) from the beginning of the following line. TURNSERVER_ENABLED=1 Confige the Coturn server. Make a copy of your original configuration before making any changes. This original configuration copy can be used if a problem occurs. Create an empty file in the same directory to contain your configuration. sudo vim /etc/turnserver.conf Add the following content to define the Coturn server and replace the values with appropriate values for your configuration. # Listener IP address of relay server. Multiple listeners can be specified. # If no IP(s) specified in the config file or in the command line options, # then all IPv4 and IPv6 system IPs will be used for listening. listening-ip=0.0.0.0 # External IP-Address of the TURN server external-ip=IP_ADDRESS # TURN listener port for UDP and TCP (Default: 3478). listening-port=3478 # 443 for TURN over TLS, which can bypass firewalls tls-listening-port=443 # host domain name. realm=mycompany.org # Path to the SSL certificate and private key. # Certificate file. cert=/usr/local/etc/turn_server_cert.pem # Private key file. pkey=/usr/local/etc/turn_server_pkey.pem # Lower and upper bounds of the UDP relay endpoints: # Further ports that are open for communication min-port=10000 max-port=20000 # This allows TURN credentials to be accounted for a specific user id. # If you don't have a suitable id, the timestamp alone can be used. # This option is just turning on secret-based authentication. # The actual value of the secret is defined by option static-auth-secret, use-auth-secret static-auth-secret=<YOUR_SECRET> # Option to set the log file name. # By default, the turnserver tries to open a log file in # /var/log, /var/tmp, /tmp and current directories directories log-file=/var/log/turnserver.log # Enable verbose logging verbose # Do not allow an TLS/DTLS version of protocol no-tlsv1 no-tlsv1_1 no-tlsv1_2 You can make additional customizations to the file. For additional information, see the turnserver.conf file. Within the file, configuration options are described as comments. Save the file and restart the Coturn server to apply the changes. Parent topic: Setting up a TURN server","title":"Installing a TURN Server on Ubuntu"},{"location":"admin/update_client_policy.html","text":"Updating the client policy to include the managed settings or managed community configs URL Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. This step requires operating system access to the Sametime Community server. After creating a managed-settings.xml file or a managed-community-configs.xml file and placing the files on a web server, the URL to the file(s) must be defined inside the Sametime Policy. Follow the instructions in the topic Configuring policies for instructions on how to remote into the server and locate the policies.user.xml file. Create a backup of the policies.user.xml file by making a copy of it and saving it to another location. You can modify the default policy or create new policies . If you create a new policy, be certain to increase the policy weight and assign the policy to a group . Each policy weight must be unique. The Sametime server will look in the folder specified in the URL for both a managed-settings.xml and a managed-community-configs.xml. If you are using both types of files, your URL defined in the policy must be scoped to the folder path where the two files reside. For the purposes of this topic, these steps will modify the default policy. The managed-settings.xml and managed-community-configs.xml are part of the \u201cim\u201d policy. Open the policies.user.xml file using a text or XML editor. To modify the default template locate the line that begins with: <policy id=\"im.default.policy\" weight=\"1\"> Within this section, locate the attribute id=\u201dim.2012\u201d. Change the default-value=\u201d\u201d to your managed-settings URL folder. Note: The URL must specify the folder in which the file resides. The server automatically appends both managed-settings.xml and managed-community-configs.xml to the URL and looks for both files. default-value=\u201dhttp://www.example.com/default/\u201d For example: <p:policy-attribute current-value=\"\" default-value=\" http://www.example.com/default\" description=\"im.2012.desc\" id=\"im.2012\" label=\"im.2012.label\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" type=\"string\" visible=\"true\"/> Managed settings only apply to the user\u2019s primary (or default) community. It may also be helpful to set the \u201cim.2019\u201d policy attribute. User must set this community as the default server community\u201d which will force the user to set this server to be their default community. For example: <p:policy-attribute current-value=\"1\" default-value=\"1\" description=\"im.2019.desc\" id=\"im.2019\" label=\"im.2019.label\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" type=\"boolean\" visible=\"true\"/> Save and close the file. Note: As a best practice, open the policies.user.xml file with a browser to check for any formatting problems. Sametime policies refresh once per hour. You can wait one hour and then test the settings, or you can restart the \u201cST Policy\u201d service (Windows only) to test right away. When testing Managed Settings, be aware that settings are retrieved upon login. The settings may not take effect until the client is restarted. For troubleshooting managed settings and to download a sample file see the article How to troubleshoot Managed Settings for Sametime . Parent topic: Defining preferences in the managed-settings.xml file","title":"Updating the client policy to include the managed settings or managed community configs URL {#update_client_policy .task}"},{"location":"admin/update_client_policy.html#update_client_policy","text":"Once the xml file(s) is ready to be deployed to users, the file must be placed on a web server to host it. This can be any web server the users can reach. This step requires operating system access to the Sametime Community server. After creating a managed-settings.xml file or a managed-community-configs.xml file and placing the files on a web server, the URL to the file(s) must be defined inside the Sametime Policy. Follow the instructions in the topic Configuring policies for instructions on how to remote into the server and locate the policies.user.xml file. Create a backup of the policies.user.xml file by making a copy of it and saving it to another location. You can modify the default policy or create new policies . If you create a new policy, be certain to increase the policy weight and assign the policy to a group . Each policy weight must be unique. The Sametime server will look in the folder specified in the URL for both a managed-settings.xml and a managed-community-configs.xml. If you are using both types of files, your URL defined in the policy must be scoped to the folder path where the two files reside. For the purposes of this topic, these steps will modify the default policy. The managed-settings.xml and managed-community-configs.xml are part of the \u201cim\u201d policy. Open the policies.user.xml file using a text or XML editor. To modify the default template locate the line that begins with: <policy id=\"im.default.policy\" weight=\"1\"> Within this section, locate the attribute id=\u201dim.2012\u201d. Change the default-value=\u201d\u201d to your managed-settings URL folder. Note: The URL must specify the folder in which the file resides. The server automatically appends both managed-settings.xml and managed-community-configs.xml to the URL and looks for both files. default-value=\u201dhttp://www.example.com/default/\u201d For example: <p:policy-attribute current-value=\"\" default-value=\" http://www.example.com/default\" description=\"im.2012.desc\" id=\"im.2012\" label=\"im.2012.label\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" type=\"string\" visible=\"true\"/> Managed settings only apply to the user\u2019s primary (or default) community. It may also be helpful to set the \u201cim.2019\u201d policy attribute. User must set this community as the default server community\u201d which will force the user to set this server to be their default community. For example: <p:policy-attribute current-value=\"1\" default-value=\"1\" description=\"im.2019.desc\" id=\"im.2019\" label=\"im.2019.label\" master-attribute-link=\"null\" possible-value-labels=\"null\" possible-values=\"null\" type=\"boolean\" visible=\"true\"/> Save and close the file. Note: As a best practice, open the policies.user.xml file with a browser to check for any formatting problems. Sametime policies refresh once per hour. You can wait one hour and then test the settings, or you can restart the \u201cST Policy\u201d service (Windows only) to test right away. When testing Managed Settings, be aware that settings are retrieved upon login. The settings may not take effect until the client is restarted. For troubleshooting managed settings and to download a sample file see the article How to troubleshoot Managed Settings for Sametime . Parent topic: Defining preferences in the managed-settings.xml file","title":"Updating the client policy to include the managed settings or managed community configs URL"},{"location":"admin/update_ttl_index.html","text":"Updating the time-to-live index for persistent chat The time-to-live (TTL) setting defines how long the chat history is stored in the database. The default value is 90 days. However, administrators can update the value based on the organization's preferred setting. The TTL index in MongoDB must be rebuilt. For more information, refer to Manage Indexes in the MongoDB documentation. To update the TTL settings used by the Sametime server involves modifying the following files. custom.env for Docker helm/values.yaml for Kubernetes Note: These values are case sensitive and must be entered as shown below. Modify the configuration file. The minimum value is 1. For Docker, update the CLI__ChatLogging__CL_MONGO_HISTORY_TTL parameter. In the following example, the value is set to 7 days. CLI__ChatLogging__CL_MONGO_HISTORY_TTL=7 For Kubernetes, update the CLI__ChatLogging__CL_MONGO_HISTORY_TTL parameter. In the following example, the value is set to 7 days. CLI__ChatLogging__CL_MONGO_HISTORY_TTL: 7 Modify the Convomap Max Days configuration value to match the MongoDB TTL value. The minimum value is 1. For Docker, update the STI__convomap__CONVOMAP_MAX_DAYS parameter. In the following example, the value is set to 7 days. STI__convomap__CONVOMAP_MAX_DAYS=7 For Kubernetes, update the STI__convomap__CONVOMAP_MAX_DAYS parameters. In the following example, the value is set to 7 days. STI__convomap__CONVOMAP_MAX_DAYS: 7 You can update the STI__convomap__CONVOMAP_MAX_HOURS parameter to add hours to the time frame. In the following examples, the value is set to 2 hours. Docker: STI__convomap__CONVOMAP_MAX_HOURS=2 Kubernetes: STI__convomap__CONVOMAP_MAX_HOURS: 2 In the Mongo shell, run the following commands. use chatlogging db.EVENTS.getIndexes() db.EVENTS.dropIndex(\"TimeStamp_1\") The db.EVENTS.dropIndex command defines the name of the index to drop. The value is TimeStamp_1 . Restart the Sametime server to apply the changes. The TTL index is updated with the new value. For more information, refer to Starting and stopping servers . Run the following command to confirm that the value for TimeStamp_1 is updated. db.EVENTS.getIndexes() Parent topic: Configuring","title":"Updating the time-to-live index for persistent chat {#update_ttl_index .task}"},{"location":"admin/update_ttl_index.html#update_ttl_index","text":"The time-to-live (TTL) setting defines how long the chat history is stored in the database. The default value is 90 days. However, administrators can update the value based on the organization's preferred setting. The TTL index in MongoDB must be rebuilt. For more information, refer to Manage Indexes in the MongoDB documentation. To update the TTL settings used by the Sametime server involves modifying the following files. custom.env for Docker helm/values.yaml for Kubernetes Note: These values are case sensitive and must be entered as shown below. Modify the configuration file. The minimum value is 1. For Docker, update the CLI__ChatLogging__CL_MONGO_HISTORY_TTL parameter. In the following example, the value is set to 7 days. CLI__ChatLogging__CL_MONGO_HISTORY_TTL=7 For Kubernetes, update the CLI__ChatLogging__CL_MONGO_HISTORY_TTL parameter. In the following example, the value is set to 7 days. CLI__ChatLogging__CL_MONGO_HISTORY_TTL: 7 Modify the Convomap Max Days configuration value to match the MongoDB TTL value. The minimum value is 1. For Docker, update the STI__convomap__CONVOMAP_MAX_DAYS parameter. In the following example, the value is set to 7 days. STI__convomap__CONVOMAP_MAX_DAYS=7 For Kubernetes, update the STI__convomap__CONVOMAP_MAX_DAYS parameters. In the following example, the value is set to 7 days. STI__convomap__CONVOMAP_MAX_DAYS: 7 You can update the STI__convomap__CONVOMAP_MAX_HOURS parameter to add hours to the time frame. In the following examples, the value is set to 2 hours. Docker: STI__convomap__CONVOMAP_MAX_HOURS=2 Kubernetes: STI__convomap__CONVOMAP_MAX_HOURS: 2 In the Mongo shell, run the following commands. use chatlogging db.EVENTS.getIndexes() db.EVENTS.dropIndex(\"TimeStamp_1\") The db.EVENTS.dropIndex command defines the name of the index to drop. The value is TimeStamp_1 . Restart the Sametime server to apply the changes. The TTL index is updated with the new value. For more information, refer to Starting and stopping servers . Run the following command to confirm that the value for TimeStamp_1 is updated. db.EVENTS.getIndexes() Parent topic: Configuring","title":"Updating the time-to-live index for persistent chat"},{"location":"admin/updating_meeting_servers.html","text":"Updating the Sametime server TLS certificates The Sametime server is pre-configured with a self-signed certificate. You can replace the self-signed certificate with a third party certificate. Ensure that the certificate chain is complete and in the correct order. An incorrectly configured list of certificates can cause authentication failures. Updating the TLS certificates on Docker Updating the TLS certificates on Kubernetes In Kubernetes, TLS certificates are contained within a secret called tls_secret. Parent topic: Securing","title":"Updating the Sametime server TLS certificates {#updating_meeting_servers .task}"},{"location":"admin/updating_meeting_servers.html#updating_meeting_servers","text":"The Sametime server is pre-configured with a self-signed certificate. You can replace the self-signed certificate with a third party certificate. Ensure that the certificate chain is complete and in the correct order. An incorrectly configured list of certificates can cause authentication failures. Updating the TLS certificates on Docker Updating the TLS certificates on Kubernetes In Kubernetes, TLS certificates are contained within a secret called tls_secret. Parent topic: Securing","title":"Updating the Sametime server TLS certificates"},{"location":"admin/upgrade_docker.html","text":"Upgrading Sametime 11.5 and Sametime 11.6 Docker deployments To upgrade from Sametime 11.5 or Sametime 11.6 to Sametime 12, the following conditions must be satisfied: HCL Sametime Meetings 11.5 or Sametime 11.6 must be installed and configured. Sametime has access to a MongoDB server. You can re-use your existing MongoDB server. Note: There are no special configuration steps required for the database. It automatically creates when the Sametime server connects to MongoDB. Prepare migration steps before upgrading to the latest Sametime version. The upgrade gives you a new community and proxy component that replaces your existing components. Have a back-out plan. Create a backup of the following files. docker-compose.yml custom.env .env Docker Compose 1.29 or higher must be installed in your Sametime environment. Upgrading Sametime 11.5 or Sametime 11.6 Docker deployments are done in the custom.env file. The upgrade requires access to the MongoDB server. For this example, we will use the following directory structure for simplicity: /opt/STMeetingServer In /opt/STMeetingserver, stop the Sametime Meeting server by executing: > docker-compose down Unzip the sametime.meeting archive to /opt/STMeetingServer - this will overwrite several files in the folder. > unzip sametime-meetings.zip -d /opt/STMeetingServer Run the script below: > ./install.sh Follow the prompts to provide the information as required. You can copy the encoded secret from sametime.ini or create a new one with this update. Sametime detects an upgrade or full install. Note: If the you are not prompted for Auth Token, LDAP and Proxy, the custom.env file must be updated after the upgrade. Specify the appropriate values for the Auth Token, LDAP and set the Proxy to be the Sametime 12 host. Additionally, the MongoDB administrative user (sametimeUser) requires that the following be added: { role:\"readWrite\", db:\"meeting\"},{role:\"dbAdmin\", db:\"meeting\"} Update the new jitsi-config folder to change TLS certificates or other custom settings as needed. Be sure to follow the standard procedures for that. After upgrade is complete, clear the browser cache to refresh the authentication tokens that may be stored. Parent topic: Upgrading from Meetings 11.5 and 11.6 Revert to the previous version If you encounter a problem, run the command below to roll back to the previous version. in /opt/STMeetingServer issue >docker-compose down in /opt/STMeetingServer_bak issue > docker-compose up -d","title":"Upgrading Sametime 11.5 and Sametime 11.6 Docker deployments {#upgrade_docker .task}"},{"location":"admin/upgrade_docker.html#upgrade_docker","text":"To upgrade from Sametime 11.5 or Sametime 11.6 to Sametime 12, the following conditions must be satisfied: HCL Sametime Meetings 11.5 or Sametime 11.6 must be installed and configured. Sametime has access to a MongoDB server. You can re-use your existing MongoDB server. Note: There are no special configuration steps required for the database. It automatically creates when the Sametime server connects to MongoDB. Prepare migration steps before upgrading to the latest Sametime version. The upgrade gives you a new community and proxy component that replaces your existing components. Have a back-out plan. Create a backup of the following files. docker-compose.yml custom.env .env Docker Compose 1.29 or higher must be installed in your Sametime environment. Upgrading Sametime 11.5 or Sametime 11.6 Docker deployments are done in the custom.env file. The upgrade requires access to the MongoDB server. For this example, we will use the following directory structure for simplicity: /opt/STMeetingServer In /opt/STMeetingserver, stop the Sametime Meeting server by executing: > docker-compose down Unzip the sametime.meeting archive to /opt/STMeetingServer - this will overwrite several files in the folder. > unzip sametime-meetings.zip -d /opt/STMeetingServer Run the script below: > ./install.sh Follow the prompts to provide the information as required. You can copy the encoded secret from sametime.ini or create a new one with this update. Sametime detects an upgrade or full install. Note: If the you are not prompted for Auth Token, LDAP and Proxy, the custom.env file must be updated after the upgrade. Specify the appropriate values for the Auth Token, LDAP and set the Proxy to be the Sametime 12 host. Additionally, the MongoDB administrative user (sametimeUser) requires that the following be added: { role:\"readWrite\", db:\"meeting\"},{role:\"dbAdmin\", db:\"meeting\"} Update the new jitsi-config folder to change TLS certificates or other custom settings as needed. Be sure to follow the standard procedures for that. After upgrade is complete, clear the browser cache to refresh the authentication tokens that may be stored. Parent topic: Upgrading from Meetings 11.5 and 11.6","title":"Upgrading Sametime 11.5 and Sametime 11.6 Docker deployments"},{"location":"admin/upgrade_docker.html#task_sxq_dwl_c5b","text":"If you encounter a problem, run the command below to roll back to the previous version. in /opt/STMeetingServer issue >docker-compose down in /opt/STMeetingServer_bak issue > docker-compose up -d","title":"Revert to the previous version"},{"location":"admin/upgrade_install_fixpack.html","text":"Upgrading to a new version or applying a fixpack Newer versions and fix packs contain new features and fixes. You do not need to remove your current Sametime 12 installation when upgrading to a new version. To install a new version or fix pack, the following conditions must be satisfied: HCL Sametime 12 version is installed and configured Sametime server has access to a MongoDB server Installing a fix pack on Docker Installing a fix pack on Kubernetes Reverting to a previous version on Docker Reverting to a previous version on Kubernetes Parent topic: Migrating and Upgrading","title":"Upgrading to a new version or applying a fixpack {#upgrade_install_fixpack .task}"},{"location":"admin/upgrade_install_fixpack.html#upgrade_install_fixpack","text":"Newer versions and fix packs contain new features and fixes. You do not need to remove your current Sametime 12 installation when upgrading to a new version. To install a new version or fix pack, the following conditions must be satisfied: HCL Sametime 12 version is installed and configured Sametime server has access to a MongoDB server Installing a fix pack on Docker Installing a fix pack on Kubernetes Reverting to a previous version on Docker Reverting to a previous version on Kubernetes Parent topic: Migrating and Upgrading","title":"Upgrading to a new version or applying a fixpack"},{"location":"admin/upgrade_install_fixpack_docker.html","text":"Installing a fix pack on Docker To install a new version or fix pack, the following conditions must be satisfied: HCL Sametime 12 version is installed and configured Sametime server has access to a MongoDB server Creating a backup of the installation directory, allows you to return to your previous version if a problem occurs related to installing the fix pack. Note: Make a backup of your key files, such as docker-compose.yml and any customized files on the system so that you can validate any custom settings from the previous installation. If you have placed files in the sametime-config folder like custom branding or TLS certificates, those files need to be restored after the fix pack is installed. For the docker-compose.yml file, after the upgrade reference the backup version and add the modifications to the new docker-compose.yml provided during the upgrade. Changes to the custom.env and .env files are retained when upgrading to version 12.0.1 and later. In the directory where Sametime is installed, issue the following command to stop the Sametime server. docker-compose down Make a copy of the Sametime installation directory as a backup before installing the fix pack. Copy the contents of the installation directory into another directory. For example, /sametime_install_backup where sametime_install is the Sametime installation directory. Download and decompress the Sametime fix pack archive to the Sametime installation directory. unzip sametime\\_fixpack\\_zip -d /sametime\\_install\\_path In the sametime_install directory, run the following script to initiate the installation process. ./install.sh Follow the prompts to provide the required information. The install process detects if the install is an upgrade or full install. Parent topic: Upgrading to a new version or applying a fixpack","title":"Installing a fix pack on Docker {#upgrade_install_fixpack_docker .task}"},{"location":"admin/upgrade_install_fixpack_docker.html#upgrade_install_fixpack_docker","text":"To install a new version or fix pack, the following conditions must be satisfied: HCL Sametime 12 version is installed and configured Sametime server has access to a MongoDB server Creating a backup of the installation directory, allows you to return to your previous version if a problem occurs related to installing the fix pack. Note: Make a backup of your key files, such as docker-compose.yml and any customized files on the system so that you can validate any custom settings from the previous installation. If you have placed files in the sametime-config folder like custom branding or TLS certificates, those files need to be restored after the fix pack is installed. For the docker-compose.yml file, after the upgrade reference the backup version and add the modifications to the new docker-compose.yml provided during the upgrade. Changes to the custom.env and .env files are retained when upgrading to version 12.0.1 and later. In the directory where Sametime is installed, issue the following command to stop the Sametime server. docker-compose down Make a copy of the Sametime installation directory as a backup before installing the fix pack. Copy the contents of the installation directory into another directory. For example, /sametime_install_backup where sametime_install is the Sametime installation directory. Download and decompress the Sametime fix pack archive to the Sametime installation directory. unzip sametime\\_fixpack\\_zip -d /sametime\\_install\\_path In the sametime_install directory, run the following script to initiate the installation process. ./install.sh Follow the prompts to provide the required information. The install process detects if the install is an upgrade or full install. Parent topic: Upgrading to a new version or applying a fixpack","title":"Installing a fix pack on Docker"},{"location":"admin/upgrade_install_fixpack_kubernetes.html","text":"Installing a fix pack on Kubernetes For Sametime upgrades, the upgrade package includes full helm charts that need to be implemented. You need to port your settings over from your values.yaml into the new values.yaml file. Do not restore your values.yaml from a back up because there may be some deprecated settings. Download and extract the Sametime fix pack zip files into a directory on either the master Kubernetes host or on a machine which has management access to the Kubernetes cluster. Run the following command to load the fix pack Docker image to the Docker repository. ./load.sh If your image repository requires a secret, then define the secret name in the values.yaml file. If your image repository requires a secret, then define in the secret name on the hclImagePullSecret setting in the values.yaml file. Edit the values.yaml file as needed. Run the following script to update the current configuration to values.yaml file as needed. You are prompted for any missing information. ./prepareDeployment.sh When prompted to confirm the upgrade, answer Y to proceed with the current settings. If your response is No, you are prompted for necessary information. If the community LDAP settings are overridded in your deployment using an extra-community-config secret, there are changes to these files that need to be included as a part of the upgrade. Delete the secret by running the following command: kubectl delete secret extra-community-config Comment out the following line in the values.yaml file using the comment (#) character. # overrideCommunityConfigSecret: extra-community-config When the upgrade is finished, pull new copies of StCommunityConfig.xml and UserInfoConfig.xml files. Modify the files to include your custom settings. Create the extra-community-config secret again with your changes. If you have enabled telephony, copy the secrets from your old helm charts to the new ones. Copy the existing setting application-registry.json from /helm/templates/auth-config-secrets.yaml into your new /helm/templates/auth-config-secrets.yaml file. Copy the existing JigasiSipUri and JigasiSipPassword settings from the/helm/templates/sametime-secrets.yaml file to the new /helm/templates/sametime-secrets.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Parent topic: Upgrading to a new version or applying a fixpack","title":"Installing a fix pack on Kubernetes {#upgrade_install_fixpack_kubernetes .task}"},{"location":"admin/upgrade_install_fixpack_kubernetes.html#upgrade_install_fixpack_kubernetes","text":"For Sametime upgrades, the upgrade package includes full helm charts that need to be implemented. You need to port your settings over from your values.yaml into the new values.yaml file. Do not restore your values.yaml from a back up because there may be some deprecated settings. Download and extract the Sametime fix pack zip files into a directory on either the master Kubernetes host or on a machine which has management access to the Kubernetes cluster. Run the following command to load the fix pack Docker image to the Docker repository. ./load.sh If your image repository requires a secret, then define the secret name in the values.yaml file. If your image repository requires a secret, then define in the secret name on the hclImagePullSecret setting in the values.yaml file. Edit the values.yaml file as needed. Run the following script to update the current configuration to values.yaml file as needed. You are prompted for any missing information. ./prepareDeployment.sh When prompted to confirm the upgrade, answer Y to proceed with the current settings. If your response is No, you are prompted for necessary information. If the community LDAP settings are overridded in your deployment using an extra-community-config secret, there are changes to these files that need to be included as a part of the upgrade. Delete the secret by running the following command: kubectl delete secret extra-community-config Comment out the following line in the values.yaml file using the comment (#) character. # overrideCommunityConfigSecret: extra-community-config When the upgrade is finished, pull new copies of StCommunityConfig.xml and UserInfoConfig.xml files. Modify the files to include your custom settings. Create the extra-community-config secret again with your changes. If you have enabled telephony, copy the secrets from your old helm charts to the new ones. Copy the existing setting application-registry.json from /helm/templates/auth-config-secrets.yaml into your new /helm/templates/auth-config-secrets.yaml file. Copy the existing JigasiSipUri and JigasiSipPassword settings from the/helm/templates/sametime-secrets.yaml file to the new /helm/templates/sametime-secrets.yaml file. Apply your changes to the environment. Verify that you are in the helm directory and run the following command to apply changes. Specify the Sametime deployment name for your environment. The default for Sametime Premium version 12 is sametime. helm upgrade sametime\\_deployment\\_name . Note: Be sure to include the dot at the end. It is part of the command. If you are unsure of your deployment name, issue the helm list command to find the name. If you upgraded from an earlier Sametime release, the default name is sametime-meetings. Parent topic: Upgrading to a new version or applying a fixpack","title":"Installing a fix pack on Kubernetes"},{"location":"admin/upgrade_kubernetes.html","text":"Upgrading Sametime 11.5 and Sametime 11.6 Kubernetes deployments To upgrade from Sametime 11.5 or Sametime 11.6 to Sametime 12, the following conditions must be satisfied: HCL Sametime Meetings 11.5 or Sametime 11.6 must be installed and configured. Sametime has access to a MongoDB server. You can re-use your existing MongoDB server. Note: There are no special configuration steps required for the database. It automatically creates when the Sametime server connects to MongoDB. Prepare migration steps before upgrading to the latest Sametime version. The upgrade gives you a new community and proxy component that replaces your existing components. Have a back-out plan. Create a backup of the following files. docker-compose.yml custom.env .env Docker Compose 1.29 or higher must be installed in your Sametime environment. To upgrade from Sametime 11.5 or Sametime 11.6 to Sametime 12, follow these steps: Extract the 11.5, 11.6, or 11.6 IF1 zip files to any directory on either the master Kubernetes host itself or on a machine which has management access to the Kubernetes cluster. Deploy the docker images. ./load.sh Edit values.yaml where needed. Run the command below to detect the current settings and copy or update them as needed. ./prepareDeployment.sh Answer Y to proceed. If N (no) is answered, the install script prompts for the necessary steps. Run the command below to upgrade to Sametime 12. helm upgrade meetings -n default helm/. Parent topic: Upgrading from Meetings 11.5 and 11.6 Revert to the previous version If you encounter a problem, run the helm command to roll back to the previous version.","title":"Upgrading Sametime 11.5 and Sametime 11.6 Kubernetes deployments {#upgrade_kubernetes .task}"},{"location":"admin/upgrade_kubernetes.html#upgrade_kubernetes","text":"To upgrade from Sametime 11.5 or Sametime 11.6 to Sametime 12, the following conditions must be satisfied: HCL Sametime Meetings 11.5 or Sametime 11.6 must be installed and configured. Sametime has access to a MongoDB server. You can re-use your existing MongoDB server. Note: There are no special configuration steps required for the database. It automatically creates when the Sametime server connects to MongoDB. Prepare migration steps before upgrading to the latest Sametime version. The upgrade gives you a new community and proxy component that replaces your existing components. Have a back-out plan. Create a backup of the following files. docker-compose.yml custom.env .env Docker Compose 1.29 or higher must be installed in your Sametime environment. To upgrade from Sametime 11.5 or Sametime 11.6 to Sametime 12, follow these steps: Extract the 11.5, 11.6, or 11.6 IF1 zip files to any directory on either the master Kubernetes host itself or on a machine which has management access to the Kubernetes cluster. Deploy the docker images. ./load.sh Edit values.yaml where needed. Run the command below to detect the current settings and copy or update them as needed. ./prepareDeployment.sh Answer Y to proceed. If N (no) is answered, the install script prompts for the necessary steps. Run the command below to upgrade to Sametime 12. helm upgrade meetings -n default helm/. Parent topic: Upgrading from Meetings 11.5 and 11.6","title":"Upgrading Sametime 11.5 and Sametime 11.6 Kubernetes deployments"},{"location":"admin/upgrade_kubernetes.html#task_sxq_dwl_c5b","text":"If you encounter a problem, run the helm command to roll back to the previous version.","title":"Revert to the previous version"},{"location":"admin/upgrade_revert_docker.html","text":"Reverting to a previous version on Docker If you encounter a problem, you can return to the previous Sametime version. One method is to shut the fix pack version and then start the server from the backup directory. This is the method is described in the procedure section. Alternatively, you can shut down the Sametime server, rename the fix pack installed directory, and then rename the backup directory to the previous version's directory. From the Sametime installation directory, run the following script. docker-compose down From the backup Sametime installation directory, run the following the script. docker-compose up -d Parent topic: Upgrading to a new version or applying a fixpack","title":"Reverting to a previous version on Docker {#upgrade_revert_docker .task}"},{"location":"admin/upgrade_revert_docker.html#upgrade_revert_docker","text":"If you encounter a problem, you can return to the previous Sametime version. One method is to shut the fix pack version and then start the server from the backup directory. This is the method is described in the procedure section. Alternatively, you can shut down the Sametime server, rename the fix pack installed directory, and then rename the backup directory to the previous version's directory. From the Sametime installation directory, run the following script. docker-compose down From the backup Sametime installation directory, run the following the script. docker-compose up -d Parent topic: Upgrading to a new version or applying a fixpack","title":"Reverting to a previous version on Docker"},{"location":"admin/upgrade_revert_kubernetes.html","text":"Reverting to a previous version on Kubernetes If you encounter a problem, you can return to the previous Sametime version. Helm commands to return to a previous release on Kubernetes. To roll back to the previous version, run the helm rollback command. For more information about the command, see the Helm Rollback topic in the Helm documentation. If you don't know the previous release number, you can use the helm history command. For additional information on how to identify the prior release number, see the Helm History topic in the Helm documentation. Parent topic: Upgrading to a new version or applying a fixpack","title":"Reverting to a previous version on Kubernetes {#upgrade_revert_kubernetes .task}"},{"location":"admin/upgrade_revert_kubernetes.html#upgrade_revert_kubernetes","text":"If you encounter a problem, you can return to the previous Sametime version. Helm commands to return to a previous release on Kubernetes. To roll back to the previous version, run the helm rollback command. For more information about the command, see the Helm Rollback topic in the Helm documentation. If you don't know the previous release number, you can use the helm history command. For additional information on how to identify the prior release number, see the Helm History topic in the Helm documentation. Parent topic: Upgrading to a new version or applying a fixpack","title":"Reverting to a previous version on Kubernetes"},{"location":"admin/upgrading_meetings.html","text":"Upgrading from Meetings 11.5 and 11.6 Upgrade in place is possible for both Docker and Kubernetes. This section provides information on updating from Sametime 11.6 to Sametime 12. Upgrading Sametime 11.5 and Sametime 11.6 Docker deployments Upgrading Sametime 11.5 and Sametime 11.6 Kubernetes deployments Parent topic: Migrating and Upgrading","title":"Upgrading from Meetings 11.5 and 11.6 {#upgrading_meetings .task}"},{"location":"admin/upgrading_meetings.html#upgrading_meetings","text":"Upgrade in place is possible for both Docker and Kubernetes. This section provides information on updating from Sametime 11.6 to Sametime 12. Upgrading Sametime 11.5 and Sametime 11.6 Docker deployments Upgrading Sametime 11.5 and Sametime 11.6 Kubernetes deployments Parent topic: Migrating and Upgrading","title":"Upgrading from Meetings 11.5 and 11.6"},{"location":"admin/using_meeting_servers.html","text":"Applying Let's Encrypt certificates The Sametime Meeting server is preconfigured with a self-signed certificate. This section describes how to replace the self-signed certificate with a third-party certificate. Note: Let's Encrypt certificates expire every 90 days. To automatically renew the certificates, users can use Certbot . Otherwise, users can renew certificates when they expire. Parent topic: Securing Kubernetes Obtain one or more certificates and private key. Afterward, run the following commands to configure the Ingress to use them. For KEY_FILE specify the private key file and for CERT_FILE specify the certificates file. kubectl -n ingress-nginx delete secret ingress-tls-cert export CERT_NAME=ingress-tls-cert export KEY_FILE=privkey.pem export CERT_FILE=fullchain.pem kubectl -n ingress-nginx create secret tls ${CERT_NAME} --key ${KEY_FILE} --cert ${CERT_FILE} kubectl patch deployment nginx-ingress-controller -n ingress-nginx --patch \"$(cat kubernetes/ingress/nginx-tls-patch.yaml)\" Restart the ingress controller: kubectl scale deployment nginx-ingress-controller -n ingress-nginx --replicas=0 kubectl scale deployment nginx-ingress-controller -n ingress-nginx --replicas=1 Setup Certbot to automatically renew certificates. Refer to the Let's Encrypt documentation for details on using Certbot with Kubernetes. Docker Generate a Let's Encrypt certificate. Afterward, apply the encryption certificate on the Sametime Meeting server. Set ENABLE_LETSENCRYPT to 1 in the docker-compose.yml file. Find fullchain.pem privkey.pem Copy the specified files in the following folder: jitsi-config/web/letsencrypt/live/ Note: If a value for the LETSENCRYPT_DOMAIN is specified, the path is jitsi-config/web/letsencrypt/live/<LETSENCRYPT_DOMAIN >/. Restart to apply the changes. > docker-compose down > docker-compose up -d Use Certbot to renew the certificates. Under the NGINX section add the following code to the volumes section. ${CONFIG}/web/data/letsencrypt:/data/letsencrypt:Z Run Docker-compose up -d . After the initial start, add the following in the jitsi-config/web/nginx/meet.conf file. Follow the syntax pattern in the file. location ^~ /.well-known { allow all; root /data/letsencrypt/; } Modify Docker-compose down, Docker-compose up -d to restart. Validate if they are working properly. Use Docker to run the certbot/letsencrypt request to renew certificates. For example: docker run -it --rm \\ -v certs:/etc/letsencrypt \\ -v certs-data:/data/letsencrypt \\ deliverous/certbot \\ certonly \\ --webroot --webroot-path=/data/letsencrypt \\ -d example.com -d www.example.com Specify the full absolute path to the jitsi-config folder on the certs and certs-data commands. For example: -v certs:/etc/letsencrypt \\ would be -v /stmeetings/jitsi-config/web/letsencrypt:/etc/letsencrypt \\ and -v certs-data:/data/letsencrypt \\ would be -v /stmeetings/jitsi-config/web/data/letsencrypt:/data/letsencrypt \\ Validate that Certbot is working as expected.","title":"Applying Let's Encrypt certificates {#using_meeting_servers .task}"},{"location":"admin/using_meeting_servers.html#using_meeting_servers","text":"The Sametime Meeting server is preconfigured with a self-signed certificate. This section describes how to replace the self-signed certificate with a third-party certificate. Note: Let's Encrypt certificates expire every 90 days. To automatically renew the certificates, users can use Certbot . Otherwise, users can renew certificates when they expire. Parent topic: Securing","title":"Applying Let's Encrypt certificates"},{"location":"admin/using_meeting_servers.html#using_meeting_server_kubernetes","text":"Obtain one or more certificates and private key. Afterward, run the following commands to configure the Ingress to use them. For KEY_FILE specify the private key file and for CERT_FILE specify the certificates file. kubectl -n ingress-nginx delete secret ingress-tls-cert export CERT_NAME=ingress-tls-cert export KEY_FILE=privkey.pem export CERT_FILE=fullchain.pem kubectl -n ingress-nginx create secret tls ${CERT_NAME} --key ${KEY_FILE} --cert ${CERT_FILE} kubectl patch deployment nginx-ingress-controller -n ingress-nginx --patch \"$(cat kubernetes/ingress/nginx-tls-patch.yaml)\" Restart the ingress controller: kubectl scale deployment nginx-ingress-controller -n ingress-nginx --replicas=0 kubectl scale deployment nginx-ingress-controller -n ingress-nginx --replicas=1 Setup Certbot to automatically renew certificates. Refer to the Let's Encrypt documentation for details on using Certbot with Kubernetes.","title":"Kubernetes"},{"location":"admin/using_meeting_servers.html#using_meeting_servers_docker","text":"Generate a Let's Encrypt certificate. Afterward, apply the encryption certificate on the Sametime Meeting server. Set ENABLE_LETSENCRYPT to 1 in the docker-compose.yml file. Find fullchain.pem privkey.pem Copy the specified files in the following folder: jitsi-config/web/letsencrypt/live/ Note: If a value for the LETSENCRYPT_DOMAIN is specified, the path is jitsi-config/web/letsencrypt/live/<LETSENCRYPT_DOMAIN >/. Restart to apply the changes. > docker-compose down > docker-compose up -d Use Certbot to renew the certificates. Under the NGINX section add the following code to the volumes section. ${CONFIG}/web/data/letsencrypt:/data/letsencrypt:Z Run Docker-compose up -d . After the initial start, add the following in the jitsi-config/web/nginx/meet.conf file. Follow the syntax pattern in the file. location ^~ /.well-known { allow all; root /data/letsencrypt/; } Modify Docker-compose down, Docker-compose up -d to restart. Validate if they are working properly. Use Docker to run the certbot/letsencrypt request to renew certificates. For example: docker run -it --rm \\ -v certs:/etc/letsencrypt \\ -v certs-data:/data/letsencrypt \\ deliverous/certbot \\ certonly \\ --webroot --webroot-path=/data/letsencrypt \\ -d example.com -d www.example.com Specify the full absolute path to the jitsi-config folder on the certs and certs-data commands. For example: -v certs:/etc/letsencrypt \\ would be -v /stmeetings/jitsi-config/web/letsencrypt:/etc/letsencrypt \\ and -v certs-data:/data/letsencrypt \\ would be -v /stmeetings/jitsi-config/web/data/letsencrypt:/data/letsencrypt \\ Validate that Certbot is working as expected.","title":"Docker"},{"location":"admin/verse_integration.html","text":"Integrating with other applications Integration with an application such as Verse prior to Sametime 12.0 requires the legacy web-client interface. Beginning in Sametime 12.0 the legacy web-client is not enabled by default, but can enabled when needed for integration with other products. Enabling the legacy web client on Docker Enabling the legacy web client on Kubernetes Parent topic: Configuring","title":"Integrating with other applications {#verse_integration .concept}"},{"location":"admin/verse_integration.html#verse_integration","text":"Integration with an application such as Verse prior to Sametime 12.0 requires the legacy web-client interface. Beginning in Sametime 12.0 the legacy web-client is not enabled by default, but can enabled when needed for integration with other products. Enabling the legacy web client on Docker Enabling the legacy web client on Kubernetes Parent topic: Configuring","title":"Integrating with other applications"},{"location":"admin/verse_integration_docker.html","text":"Enabling the legacy web client on Docker Edit the docker-compose.yaml file. Locate the SAMETIME_EXTERNAL_WARINTEGRATION variable and ensure that it is set to true. If the statement doesn't exist, add it in the proxy section of the file. SAMETIME_EXTERNAL_WARINTEGRATION=true From the Sametime installation directory, run the following script. docker-compose down From the backup Sametime installation directory, run the following the script. docker-compose up -d Parent topic: Integrating with other applications","title":"Enabling the legacy web client on Docker {#verse_integration_docker .task}"},{"location":"admin/verse_integration_docker.html#verse_integration_docker","text":"Edit the docker-compose.yaml file. Locate the SAMETIME_EXTERNAL_WARINTEGRATION variable and ensure that it is set to true. If the statement doesn't exist, add it in the proxy section of the file. SAMETIME_EXTERNAL_WARINTEGRATION=true From the Sametime installation directory, run the following script. docker-compose down From the backup Sametime installation directory, run the following the script. docker-compose up -d Parent topic: Integrating with other applications","title":"Enabling the legacy web client on Docker"},{"location":"admin/verse_integration_kubernetes.html","text":"Enabling the legacy web client on Kubernetes The changes in this task affect the following pods: proxy Edit the values.yaml file. Add the enableLegacyClient key with the value set to true. enableLegacyClient: true Apply the changes to the configuration. Run the helm upgrade command from the helm directory where the Sametime installation package was unzipped. Specify the Sametime deployment name. helm upgrade sametime\\_deployment\\_name . Note: The dot is part of the command. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Integrating with other applications","title":"Enabling the legacy web client on Kubernetes {#verse_integration_kubernetes .task}"},{"location":"admin/verse_integration_kubernetes.html#verse_integration_kubernetes","text":"The changes in this task affect the following pods: proxy Edit the values.yaml file. Add the enableLegacyClient key with the value set to true. enableLegacyClient: true Apply the changes to the configuration. Run the helm upgrade command from the helm directory where the Sametime installation package was unzipped. Specify the Sametime deployment name. helm upgrade sametime\\_deployment\\_name . Note: The dot is part of the command. Restart the pods with the changes. Use the kubectl scale command to scale the pods to zero and then to one that have been changed. You must run the commands for each pod that the change affects. Run the following command to scale the pod to zero. Scale the pod to zero, where pod_deployment_name is the pod name. kubectl scale deploy pod\\_deployment\\_name --replicas=0 Run the following command to scale the pod to one. kubectl scale deploy pod\\_deployment\\_name --replicas=1 Parent topic: Integrating with other applications","title":"Enabling the legacy web client on Kubernetes"},{"location":"admin/whats_new.html","text":"What's new HCL Sametime and HCL Sametime Premium 12.0.1 provides many new features, enhancements and fixes to servers and clients. For information on these new features and enhancement, see the HCL Sametime and HCL Sametime Premium 12.0.1 Release Information article. For a listing of fixes provided in 12.0.1, refer to the HCL Sametime and HCL Sametime Premium 12.0.1 Fix List . Parent topic: HCL Sametime Administration Guide 12.0.1","title":"What&apos;s new in Sametime&quest;"},{"location":"admin/whats_new.html#whats_new","text":"HCL Sametime and HCL Sametime Premium 12.0.1 provides many new features, enhancements and fixes to servers and clients. For information on these new features and enhancement, see the HCL Sametime and HCL Sametime Premium 12.0.1 Release Information article. For a listing of fixes provided in 12.0.1, refer to the HCL Sametime and HCL Sametime Premium 12.0.1 Fix List . Parent topic: HCL Sametime Administration Guide 12.0.1","title":"What's new"}]}